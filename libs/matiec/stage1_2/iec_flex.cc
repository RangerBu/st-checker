#line 2 "iec_flex.cc"

#line 4 "iec_flex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 341
#define YY_END_OF_BUFFER 342
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4088] =
    {   0,
       74,  315,   74,  315,   74,  315,   74,  315,   74,  315,
       74,  315,   74,  315,   74,  315,   74,   74,   74,  315,
       74,  315,   49,   49,   75,  315,   75,  315,   74,  315,
       74,  315,   74,  315,   74,  315,   74,  315,   74,  315,
      315,  315,   12,   12,  342,  340,  341,   74,  340,  341,
       74,  341,  340,  341,  340,  341,  251,  281,  340,  341,
      340,  341,  340,  341,  340,  341,  340,  341,  332,  340,
      341,  332,  340,  341,  332,  340,  341,  332,  340,  341,
      340,  341,  340,  341,  340,  341,  340,  341,  339,  340,
      341,  339,  340,  341,  339,  340,  341,  339,  340,  341,

      339,  340,  341,  339,  340,  341,  339,  340,  341,  339,
      340,  341,  339,  340,  341,  339,  340,  341,  339,  340,
      341,  339,  340,  341,  339,  340,  341,  339,  340,  341,
      339,  340,  341,  339,  340,  341,  339,  340,  341,  339,
      340,  341,  339,  340,  341,  339,  340,  341,  340,  341,
      340,  341,   25,  341,   25,  341,   25,  341,   20,  341,
      341,   20,  341,   19,   20,  341,   20,  341,  339,  340,
      341,  339,  340,  341,  339,  340,  341,  340,  341,  339,
      340,  341,  339,  340,  341,  339,  340,  341,  339,  340,
      341,   47,  341,   47,   74,  341,   47,  341,   47,  341,

       47,  341,   47,  341,  339,  340,  341,   57,  341,   49,
       57,  341,   57,  341,   57,  341,   57,  341,   57,  341,
       57,  341,   57,  341,   57,  341,   57,  341,   57,  341,
       75,  340,  341,  233,  341,  251,  281,  340,  341,  339,
      340,  341,16722,  339,  340,  341,16722,  339,  340,  341,
    16722,  339,  340,  341,16722,  339,  340,  341,16722,  339,
      340,  341,16722,  339,  340,  341,16722,  339,  340,  341,
    16722,  339,  340,  341,16722,  339,  340,  341,16722,  339,
      340,  341,16722,  339,  340,  341,16722,  339,  340,  341,
    16722,  339,  340,  341,16722,  339,  340,  341,16722,  250,

      339,  340,  341,16722,  249,  339,  340,  341,16722,  339,
      340,  341,16722,  339,  340,  341,16722,  339,  340,  341,
    16722,  339,  340,  341,16722,  339,  340,  341,16722,  340,
      341,  339,  340,  341,16721,  339,  340,  341,16721,  339,
      340,  341,16721,  339,  340,  341,16721,  339,  340,  341,
    16721,  339,  340,  341,16721,  339,  340,  341,16721,  339,
      340,  341,16721,  339,  340,  341,16721,  339,  340,  341,
    16721,  339,  340,  341,16721,  339,  340,  341,16721,  339,
      340,  341,16721,  339,  340,  341,16721,  339,  340,  341,
    16721,  339,  340,  341,16721,  339,  340,  341,16721,  339,

      340,  341,16721,  339,  340,  341,16721,  339,  340,  341,
    16721,  340,  341,  339,  340,  341,  205,  339,  340,  341,
      204,  339,  340,  341,  209,  339,  340,  341,  210,  339,
      340,  341,  213,  339,  340,  341,  214,  339,  340,  341,
      339,  340,  341,  328,  341,  329,  341,  327,  328,  341,
      328,  341,  326,  328,  341,   80,  341,   81,  341,   80,
      341,   80,  341,  341,   12,  341,   14,  341,   14,  341,
       74,  330,  331,   77,  277,  164,  332,  314,  315,  314,
      315,  314,  315,  314,  315,  332,  163,  287,  280,  278,
      288,  279,  339,  339,  339,  339,  181,  339,  339,  301,

      339,  339,  339,  104,  105,  339,  339,  302,  305,  339,
      339,  107,  127,  339,  339,  339,   86,  339,  339,  339,
      339,  339,  339,  290,  339,  339,  339,  339,  339,  339,
      339,  339,  168,  296,  339,  219,  339,  236,  284,  339,
      339,  339,  339,  339,  339,   98,   99,  339,  339,  339,
      199,  300,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,    9,   76,
       19,   19,  339,  339,  339,  339,  339,  339,  339,   86,
      339,   49,   51,   59,    8,   75,  265,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  181,  339,16722,

      339,16722,  301,  339,16722,  339,16722,  260,  339,16722,
      339,16722,  339,16722,  259,  339,16722,  339,16722,  339,
    16722,  302,  305,  339,16722,  339,16722,  107,  127,  339,
    16722,  339,16722,  339,16722,   86,  339,16722,  241,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  242,  339,16722,  243,  339,16722,  290,  339,16722,
      262,  339,16722,  339,16722,  252,  339,16722,  244,  339,
    16722,  339,16722,  339,16722,  245,  339,16722,  339,16722,
      339,16722,  339,16722,  247,  339,16722,  339,16722,  339,
    16722,  168,  296,  339,16722,  219,  339,16722,  236,  284,

      339,16722,  339,16722,  263,  339,16722,  261,  339,16722,
      257,  339,16722,  339,16722,  256,  339,16722,  339,16722,
      339,16722,  254,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  199,  300,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16721,  339,
    16721,  339,16721,  339,16721,  181,  339,16721,  339,16721,
      301,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  302,  305,  339,16721,  339,16721,  107,  127,  339,

    16721,  339,16721,  339,16721,   86,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  290,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  168,  296,  339,16721,  219,
      339,16721,  236,  284,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  199,  300,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,   86,  339,  207,  339,

      211,  339,  212,  339,  206,  339,  208,  339,  339,  316,
      317,  318,  319,   78,   79,   12,   13,  312,  311,  313,
      315,  315,  314,  315,  315,  315,  334,  335,  339,  234,
      282,  339,  153,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,   87,  339,  339,  339,  299,
      339,  339,  339,  339,  339,  114,  339,  339,  339,  339,
      235,  286,  339,  339,  238,  285,  339,  339,  339,  339,
       82,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  102,  128,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  184,  189,  339,  339,  339,  339,

      339,  339,  237,  283,  339,    9,  339,  339,  339,  114,
      339,  339,  339,   26,  184,  189,  339,   43,  339,   61,
        8, 8530,  339,16722,  239,  339,16722,  234,  282,  339,
    16722,  153,  339,16722,  339,16722,  339,16722,  339,16722,
      268,  339,16722,  339,16722,  258,  339,16722,  339,16722,
      339,16722,  339,16722,  240,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,   87,  339,16722,  339,16722,
      339,16722,  299,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  114,  339,16722,  274,  339,16722,  253,
      339,16722,  339,16722,  339,16722,  339,16722,  235,  286,

      339,16722,  246,  339,16722,  339,16722,  238,  285,  339,
    16722,  339,16722,  266,  339,16722,  339,16722,  339,16722,
       82,  339,16722,  339,16722,  339,16722,  271,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  255,  339,
    16722,  339,16722,  248,  339,16722,  339,16722,  339,16722,
      339,16722,  102,  128,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  184,  189,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  237,  283,  339,16722,
     8529,  339,16721,  234,  282,  339,16721,  153,  339,16721,

      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,   87,  339,16721,  339,16721,  339,16721,  299,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      114,  339,16721,  339,16721,  339,16721,  339,16721,  235,
      286,  339,16721,  339,16721,  238,  285,  339,16721,  339,
    16721,  339,16721,  339,16721,   82,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      102,  128,  339,16721,  339,16721,  339,16721,  339,16721,

      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      184,  189,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  237,  283,  339,16721,  339,  339,
      320,  311,  313,  314,  315,  314,  315,  314,  315,  314,
      315,  314,  315,  315,  315,  314,  315,  314,  315,  336,
      334,  335,  339,  339,  108,  339,  109,  339,  295,  339,
      339,  339,  103,  126,  339,  115,  339,   83,  339,  339,
      293,  297,  339,  339,  310,  339,  339,  198,  339,  339,
      339,  339,  116,  339,  339,  339,   85,  339,  339,  339,
      121,  339,  339,  339,  339,  339,  339,  339,  113,  339,

      201,  339,  339,  339,  217,  339,  291,  339,  100,  125,
      339,  339,   88,  339,  165,  339,  339,  118,  339,  339,
      339,  339,  131,  339,  339,  224,  339,  110,  339,  339,
      339,  339,  339,  339,  339,  339,   60,   63,  339,16722,
      264,  339,16722,  339,16722,  108,  339,16722,  109,  339,
    16722,  269,  339,16722,  295,  339,16722,  339,16722,  339,
    16722,  103,  126,  339,16722,  115,  339,16722,   83,  339,
    16722,  339,16722,  293,  297,  339,16722,  339,16722,  310,
      339,16722,  339,16722,  198,  339,16722,  339,16722,  339,
    16722,  339,16722,  275,  339,16722,  116,  339,16722,  339,

    16722,  339,16722,   85,  339,16722,  339,16722,  339,16722,
      121,  339,16722,  339,16722,  339,16722,  339,16722,  272,
      339,16722,  339,16722,  339,16722,  339,16722,  113,  339,
    16722,  201,  339,16722,  339,16722,  339,16722,  217,  339,
    16722,  291,  339,16722,  100,  125,  339,16722,  339,16722,
       88,  339,16722,  165,  339,16722,  339,16722,  118,  339,
    16722,  339,16722,  339,16722,  339,16722,  131,  339,16722,
      339,16722,  224,  339,16722,  110,  339,16722,  339,16722,
      267,  339,16722,  339,16721,  339,16721,  108,  339,16721,
      109,  339,16721,  295,  339,16721,  339,16721,  339,16721,

      103,  126,  339,16721,  115,  339,16721,   83,  339,16721,
      339,16721,  293,  297,  339,16721,  339,16721,  310,  339,
    16721,  339,16721,  198,  339,16721,  339,16721,  339,16721,
      339,16721,  116,  339,16721,  339,16721,  339,16721,   85,
      339,16721,  339,16721,  339,16721,  121,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  113,  339,16721,  201,  339,16721,  339,16721,  339,
    16721,  217,  339,16721,  291,  339,16721,  100,  125,  339,
    16721,  339,16721,   88,  339,16721,  165,  339,16721,  339,
    16721,  118,  339,16721,  339,16721,  339,16721,  339,16721,

      131,  339,16721,  339,16721,  224,  339,16721,  110,  339,
    16721,  339,16721,  339,  321,  322,  323,  324,  311,  311,
      311,  315,  333,  315,  314,  315,  315,  315,  315,  315,
      315,  315,  315,  314,  315,  336,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  167,  339,  339,  339,  111,
      339,  292,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   93,  339,  339,  339,  339,  122,  339,
      112,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  119,  339,  120,  339,  308,  339,  117,  339,

      339,  339,  339,  339,  339,  339,  339,  304,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   10,  339,   62,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  167,  339,16722,  270,  339,16722,
      339,16722,  339,16722,  111,  339,16722,  292,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
       93,  339,16722,  339,16722,  339,16722,  339,16722,  276,
      339,16722,  122,  339,16722,  112,  339,16722,  339,16722,

      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      273,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  119,  339,16722,  120,  339,16722,  308,  339,16722,
      117,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  304,  339,16722,
      339,16722,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      167,  339,16721,  339,16721,  339,16721,  111,  339,16721,

      292,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,   93,  339,16721,  339,16721,  339,16721,
      339,16721,  122,  339,16721,  112,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  119,  339,
    16721,  120,  339,16721,  308,  339,16721,  117,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,

      339,16721,  339,16721,  304,  339,16721,  339,16721,  339,
      339,  339,  325,  311,  311,  311,  333,  314,  315,  314,
      315,  314,  315,  314,  315,  314,  315,  194,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,   94,   89,
      339,  339,  339,  339,  339,  339,  339,  339,  294,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  180,  339,
      339,  339,  339,  339,  339,   84,  339,  307,  339,  339,
      177,  226,  339,  289,  339,  179,  339,  339,  339,  339,
      339,  149,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  124,  339,  169,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  231,  339,  339,  339,
      339,  339,  339,  339,  339,   10,  339,   64,   58,  194,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
     8530,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  294,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  180,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,   84,

      339,16722,  307,  339,16722,  339,16722,  177,  226,  339,
    16722,  289,  339,16722,  179,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  149,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  124,  339,16722,  169,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  194,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,

    16721,  339,16721, 8529,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      294,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  180,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,   84,  339,16721,  307,  339,16721,  339,16721,
      177,  226,  339,16721,  289,  339,16721,  179,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  149,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,

    16721,  339,16721,  339,16721,  339,16721,  339,16721,  124,
      339,16721,  169,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,  339,  339,  311,  311,
      311,  315,  315,  314,  315,  160,  339,  339,  339,  339,
      159,  339,  339,  157,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  303,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  176,  191,  223,  339,  339,  339,  339,
      339,   17,  192,  225,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  140,  339,  339,  339,  339,  339,  339,

      339,  150,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  123,  339,  339,
      339,  192,  225,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   48,  176,  191,  223,  339,  160,  339,
    16722,  339,16722,  339,16722,  339,16722,  159,  339,16722,
      339,16722,  157,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  303,  339,16722,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  339,16722,
      176,  191,  223,  339,16722,  339,16722,  339,16722,  339,

    16722,  339,16722,  192,  225,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  140,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,  339,16722,  339,16722,  150,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  123,
      339,16722,  160,  339,16721,  339,16721,  339,16721,  339,
    16721,  159,  339,16721,  339,16721,  157,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,

    16721,  339,16721,  339,16721,  303,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  176,  191,  223,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  192,  225,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  140,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  150,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  339,16721,  339,

    16721,  339,16721,  123,  339,16721,  339,  339,  339,  314,
      315,  314,  315,  314,  315,  162,  339,  339,  339,  339,
      158,  339,  339,  339,  185,  339,  339,  339,  298,  339,
      339,  339,  339,  339,  339,  202,  339,  339,  339,  166,
      339,  339,   15,  182,  339,  339,   17,  339,  339,  218,
      339,  132,  339,  133,  339,  148,  339,  141,  339,  339,
      142,  339,  339,  339,  137,  339,  139,  339,  147,  339,
      339,  144,  339,  339,  339,  134,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  188,  339,  339,  182,  339,
      232,  339,  230,  339,  339,  339,  339,  339,  339,  339,

      339,   32,  188,  339,   40,  162,  339,16722,  339,16722,
      339,16722,  339,16722,  158,  339,16722,  339,16722,  339,
    16722,  185,  339,16722,  339,16722,  339,16722,  298,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  202,  339,16722,  339,16722,  339,16722,  166,  339,
    16722,  339,16722,  182,  339,16722,  339,16722,  339,16722,
      339,16722,  218,  339,16722,  132,  339,16722,  133,  339,
    16722,  148,  339,16722,  141,  339,16722,  339,16722,  142,
      339,16722,  339,16722,  339,16722,  137,  339,16722,  139,
      339,16722,  147,  339,16722,  339,16722,  144,  339,16722,

      339,16722,  339,16722,  134,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  188,  339,16722,  162,  339,16721,  339,
    16721,  339,16721,  339,16721,  158,  339,16721,  339,16721,
      339,16721,  185,  339,16721,  339,16721,  339,16721,  298,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  202,  339,16721,  339,16721,  339,16721,  166,
      339,16721,  339,16721,  182,  339,16721,  339,16721,  339,
    16721,  339,16721,  218,  339,16721,  132,  339,16721,  133,
      339,16721,  148,  339,16721,  141,  339,16721,  339,16721,

      142,  339,16721,  339,16721,  339,16721,  137,  339,16721,
      139,  339,16721,  147,  339,16721,  339,16721,  144,  339,
    16721,  339,16721,  339,16721,  134,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  188,  339,16721,  339,  339,  203,
      339,  315,  314,  315,  339,  339,  339,  339,   90,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  306,  339,
       15,  339,  339,  229,  339,  339,  135,  339,  138,  339,
      136,  339,  145,  339,  146,  339,  143,  339,  339,  339,
      339,  339,  339,  339,  171,  339,  339,  339,  339,  339,

      339,  339,  339,   27,  171,  339,  339,  339,   35,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  306,  339,16722,  339,16722,
      339,16722,  229,  339,16722,  339,16722,  135,  339,16722,
      138,  339,16722,  136,  339,16722,  145,  339,16722,  146,
      339,16722,  143,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  171,  339,16722,
      339,16722,  339,16722,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,

      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      306,  339,16721,  339,16721,  339,16721,  229,  339,16721,
      339,16721,  135,  339,16721,  138,  339,16721,  136,  339,
    16721,  145,  339,16721,  146,  339,16721,  143,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  171,  339,16721,  339,16721,  339,16721,  339,
      339,  314,  315,  339,  339,  339,  161,  339,   95,  339,
      339,  195,  339,  339,  339,  339,  309,  339,  339,  170,
      339,  339,  339,  339,  178,  190,  227,  339,  228,  339,
       96,   91,  339,  339,  339,  196,  339,  222,  339,  221,

      339,  339,  175,  339,  173,  339,  172,  339,  339,  339,
       34,  222,  339,   33,  221,  339,  339,   31,  175,  339,
       29,  173,  339,   28,  172,  339,   42,   41,   39,   37,
       36,   52,  339,16722,  339,16722,  339,16722,  161,  339,
    16722, 8530,  339,16722,  339,16722,   69,  195,  339,16722,
      339,16722,  339,16722,  339,16722,  309,  339,16722,  339,
    16722,  170,  339,16722,  339,16722,  339,16722,  339,16722,
      178,  190,  227,  339,16722,  228,  339,16722,  339,16722,
      339,16722,  339,16722,  196,  339,16722,  222,  339,16722,
      221,  339,16722,  339,16722,  175,  339,16722,  173,  339,

    16722,  172,  339,16722,  339,16721,  339,16721,  339,16721,
      161,  339,16721, 8529,  339,16721,  339,16721,   69,  195,
      339,16721,  339,16721,  339,16721,  339,16721,  309,  339,
    16721,  339,16721,  170,  339,16721,  339,16721,  339,16721,
      339,16721,  178,  190,  227,  339,16721,  228,  339,16721,
      339,16721,  339,16721,  339,16721,  196,  339,16721,  222,
      339,16721,  221,  339,16721,  339,16721,  175,  339,16721,
      173,  339,16721,  172,  339,16721,  339,  339,   11,  314,
      315,  154,  339,  339,  339,  339,  339,  339,  339,  193,
      339,  339,  339,  339,  339,  339,  339,  101,  130,  339,

      339,    9,   23,  339,  339,  339,   46,   56,  154,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  339,
    16722,  339,16722,   67,  193,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16722,  339,16722,  101,
      130,  339,16722,  339,16722,  154,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  339,16721,  339,16721,
       67,  193,  339,16721,  339,16721,  339,16721,  339,16721,
      339,16721,  339,16721,  339,16721,  101,  130,  339,16721,
      339,16721,  339,   72,  193,  339,  339,  339,  339,  339,
      339,  183,  339,  220,  339,  339,  339,  200,  339,  339,

      174,  339,    1,    9,   21,  339,  339,   30,  174,  339,
       44,   38,   53,   50,  339,16722,  339,16722,  339,16722,
      339,16722,  339,16722,   65,  183,  339,16722,  220,  339,
    16722,  339,16722,  339,16722,  200,  339,16722,  339,16722,
      174,  339,16722,  339,16721,  339,16721,  339,16721,  339,
    16721,  339,16721,   65,  183,  339,16721,  220,  339,16721,
      339,16721,  339,16721,  200,  339,16721,  339,16721,  174,
      339,16721,   70,  183,  339,  339,  156,  339,   18,  215,
      339,  106,  129,  339,  339,  339,  339,   92,  339,    1,
      215,  339,  339,  339,16722,  156,  339,16722, 8530, 8530,

      215,  339,16722,  106,  129,  339,16722,  339,16722,  339,
    16722,  339,16722,  339,16722,  339,16721,  156,  339,16721,
     8529, 8529,  215,  339,16721,  106,  129,  339,16721,  339,
    16721,  339,16721,  339,16721,  339,16721,  155,  339,   18,
      339,  339,  197,  339,   16,  186,  339,   97,  339,  339,
      186,  339,   55,  155,  339,16722, 8530,  339,16722,  339,
    16722,   68,  197,  339,16722,  186,  339,16722,  339,16722,
      339,16722,  155,  339,16721, 8529,  339,16721,  339,16721,
       68,  197,  339,16721,  186,  339,16721,  339,16721,  339,
    16721,  339,  339,  339,   16,  339,  152,  339,  339,16722,

      339,16722,  339,16722,  152,  339,16722,  339,16721,  339,
    16721,  339,16721,  152,  339,16721,  339,  339,  339,  339,
      339,16722,  339,16722,  339,16722,  339,16721,  339,16721,
      339,16721,  339,   73,  216,  339,  339,  151,  339,   24,
       73,  216,  339,16722,  339,16722,  151,  339,16722,   73,
      216,  339,16721,  339,16721,  151,  339,16721,  339,  187,
      339,   22,   45,   54,   66,  187,  339,16722,   66,  187,
      339,16721,   71,  187,  339,    3,    9,    7,    8,    2,
        9,    6,    8,    5,   10,    4,   10
    } ;

static yyconst flex_int16_t yy_accept[2849] =
    {   0,
        1,    3,    5,    5,    5,    5,    5,    7,    9,   11,
       13,   15,   17,   18,   19,   21,   23,   24,   25,   27,
       29,   31,   33,   35,   37,   39,   41,   42,   43,   43,
       43,   43,   43,   43,   43,   44,   45,   45,   45,   46,
       48,   51,   53,   55,   57,   61,   63,   65,   67,   69,
       72,   75,   78,   81,   83,   85,   87,   89,   92,   95,
       98,  101,  104,  107,  110,  113,  116,  119,  122,  125,
      128,  131,  134,  137,  140,  143,  146,  149,  151,  153,
      155,  157,  159,  161,  162,  164,  167,  169,  172,  175,
      178,  180,  183,  186,  189,  192,  194,  197,  199,  201,

      203,  205,  208,  210,  213,  215,  217,  219,  221,  223,
      225,  227,  229,  231,  234,  236,  240,  244,  248,  252,
      256,  260,  264,  268,  272,  276,  280,  284,  288,  292,
      296,  300,  305,  310,  314,  318,  322,  326,  330,  332,
      336,  340,  344,  348,  352,  356,  360,  364,  368,  372,
      376,  380,  384,  388,  392,  396,  400,  404,  408,  412,
      414,  417,  421,  425,  429,  433,  437,  441,  444,  446,
      448,  451,  453,  456,  458,  460,  462,  464,  465,  467,
      469,  471,  472,  472,  473,  473,  473,  473,  473,  473,
      473,  474,  475,  476,  477,  477,  478,  480,  482,  484,

      486,  486,  487,  487,  487,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  499,  499,  500,  502,  503,  504,
      506,  507,  508,  511,  512,  515,  516,  517,  519,  520,
      521,  522,  523,  524,  524,  526,  527,  528,  529,  530,
      531,  532,  533,  536,  538,  541,  542,  543,  543,  544,
      545,  546,  548,  549,  550,  551,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  569,  569,  569,  569,  569,  569,  570,  571,  571,
      572,  572,  573,  574,  575,  576,  577,  578,  579,  580,
      580,  580,  580,  580,  580,  580,  580,  582,  583,  584,

      584,  584,  584,  584,  585,  585,  585,  585,  585,  585,
      585,  585,  586,  587,  588,  588,  588,  590,  590,  592,
      594,  596,  598,  601,  601,  601,  603,  606,  608,  611,
      613,  615,  618,  620,  622,  626,  628,  632,  634,  636,
      639,  642,  644,  646,  648,  650,  652,  652,  655,  658,
      661,  664,  666,  669,  672,  674,  676,  679,  681,  683,
      685,  688,  690,  692,  696,  699,  703,  705,  708,  711,
      714,  716,  716,  719,  721,  723,  726,  728,  730,  732,
      734,  738,  740,  742,  744,  746,  748,  750,  752,  754,
      756,  758,  760,  762,  764,  766,  768,  768,  768,  770,

      770,  772,  774,  776,  779,  779,  779,  781,  784,  786,
      788,  790,  792,  796,  798,  802,  804,  806,  809,  811,
      813,  815,  817,  819,  819,  822,  824,  826,  828,  830,
      832,  834,  836,  840,  843,  847,  849,  851,  851,  853,
      855,  857,  859,  861,  863,  867,  869,  871,  873,  875,
      877,  879,  881,  883,  885,  887,  889,  891,  893,  895,
      897,  899,  901,  903,  905,  907,  909,  910,  910,  910,
      911,  912,  913,  914,  914,  915,  916,  916,  917,  917,
      918,  918,  918,  918,  918,  918,  918,  919,  920,  920,
      920,  920,  920,  920,  920,  920,  921,  921,  921,  921,

      921,  922,  922,  922,  922,  923,  923,  923,  923,  925,
      926,  926,  927,  927,  928,  929,  930,  933,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  945,  946,
      948,  949,  950,  952,  953,  954,  955,  956,  958,  959,
      960,  961,  964,  965,  968,  969,  970,  971,  973,  974,
      975,  976,  977,  978,  979,  980,  981,  982,  983,  984,
      987,  988,  989,  990,  991,  992,  993,  994,  995,  998,
      999, 1000, 1001, 1002, 1003, 1006, 1006, 1006, 1006, 1006,
     1007, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1018,
     1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020, 1020, 1020,

     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022, 1022,
     1023, 1025, 1028, 1032, 1035, 1037, 1037, 1037, 1037, 1039,
     1041, 1044, 1046, 1049, 1051, 1053, 1055, 1058, 1060, 1062,
     1064, 1066, 1069, 1071, 1073, 1076, 1078, 1080, 1082, 1084,
     1087, 1090, 1093, 1095, 1097, 1099, 1103, 1106, 1108, 1112,
     1114, 1117, 1119, 1121, 1124, 1126, 1128, 1131, 1133, 1135,
     1137, 1139, 1142, 1144, 1147, 1149, 1151, 1153, 1157, 1159,
     1161, 1163, 1165, 1167, 1169, 1171, 1173, 1177, 1179, 1181,
     1183, 1185, 1187, 1191, 1191, 1192, 1194, 1198, 1201, 1203,
     1203, 1203, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217,

     1219, 1221, 1223, 1226, 1228, 1230, 1233, 1235, 1237, 1239,
     1241, 1244, 1246, 1248, 1250, 1254, 1256, 1260, 1262, 1264,
     1266, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285,
     1287, 1289, 1291, 1295, 1297, 1299, 1301, 1303, 1305, 1307,
     1309, 1311, 1315, 1317, 1319, 1321, 1323, 1325, 1329, 1330,
     1331, 1331, 1332, 1332, 1332, 1332, 1333, 1333, 1333, 1334,
     1336, 1336, 1338, 1340, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1344, 1345, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1351, 1352, 1352, 1353, 1353, 1354, 1354, 1355,
     1357, 1359, 1361, 1362, 1363, 1366, 1368, 1370, 1371, 1374,
     1375, 1375, 1377, 1378, 1380, 1381, 1382, 1383, 1385, 1386,
     1387, 1387, 1389, 1390, 1391, 1393, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1401, 1403, 1404, 1405, 1407, 1409, 1412,
     1413, 1415, 1417, 1418, 1420, 1421, 1422, 1423, 1423, 1425,
     1426, 1428, 1430, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1438, 1438, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1441, 1444, 1444, 1446,

     1446, 1446, 1449, 1452, 1455, 1458, 1460, 1462, 1466, 1469,
     1472, 1474, 1478, 1480, 1480, 1483, 1485, 1488, 1490, 1492,
     1494, 1497, 1500, 1502, 1504, 1504, 1507, 1509, 1511, 1514,
     1514, 1516, 1518, 1520, 1523, 1525, 1527, 1529, 1532, 1535,
     1537, 1539, 1542, 1545, 1549, 1551, 1554, 1557, 1559, 1562,
     1564, 1566, 1568, 1568, 1571, 1573, 1576, 1579, 1581, 1584,
     1584, 1584, 1586, 1586, 1588, 1588, 1588, 1591, 1594, 1597,
     1599, 1601, 1605, 1608, 1611, 1613, 1617, 1619, 1619, 1622,
     1624, 1627, 1629, 1631, 1633, 1636, 1638, 1640, 1640, 1643,
     1645, 1647, 1650, 1650, 1652, 1654, 1656, 1658, 1660, 1662,

     1665, 1668, 1670, 1672, 1675, 1678, 1682, 1684, 1687, 1690,
     1692, 1695, 1697, 1699, 1701, 1701, 1704, 1706, 1709, 1712,
     1714, 1714, 1715, 1715, 1716, 1717, 1718, 1719, 1719, 1719,
     1719, 1720, 1721, 1722, 1722, 1723, 1723, 1724, 1724, 1725,
     1725, 1727, 1728, 1728, 1729, 1729, 1729, 1729, 1729, 1730,
     1731, 1731, 1732, 1732, 1732, 1732, 1732, 1733, 1733, 1733,
     1733, 1734, 1734, 1734, 1734, 1734, 1736, 1737, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1748, 1748,
     1749, 1750, 1750, 1752, 1754, 1755, 1756, 1757, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1766, 1767, 1768, 1769, 1771,

     1773, 1774, 1775, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
     1792, 1792, 1793, 1795, 1797, 1799, 1801, 1802, 1803, 1804,
     1805, 1806, 1807, 1808, 1810, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
     1819, 1820, 1821, 1822, 1823, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1825,
     1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1827, 1827,
     1827, 1827, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841,
     1843, 1845, 1848, 1848, 1848, 1848, 1848, 1848, 1851, 1853,

     1855, 1855, 1858, 1861, 1863, 1865, 1867, 1869, 1871, 1873,
     1875, 1877, 1879, 1881, 1884, 1886, 1888, 1890, 1893, 1896,
     1899, 1901, 1903, 1903, 1905, 1907, 1909, 1911, 1914, 1916,
     1918, 1920, 1922, 1924, 1926, 1928, 1930, 1932, 1934, 1936,
     1938, 1940, 1940, 1942, 1945, 1948, 1951, 1954, 1956, 1958,
     1960, 1962, 1964, 1966, 1968, 1971, 1973, 1973, 1975, 1977,
     1979, 1981, 1983, 1985, 1987, 1989, 1991, 1994, 1994, 1994,
     1994, 1994, 1994, 1996, 1998, 1998, 2001, 2004, 2006, 2008,
     2010, 2012, 2014, 2016, 2018, 2020, 2022, 2024, 2027, 2029,
     2031, 2033, 2036, 2039, 2041, 2043, 2043, 2045, 2047, 2049,

     2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069,
     2071, 2073, 2075, 2077, 2077, 2079, 2082, 2085, 2088, 2091,
     2093, 2095, 2097, 2099, 2101, 2103, 2105, 2108, 2110, 2111,
     2112, 2113, 2114, 2114, 2114, 2115, 2115, 2116, 2116, 2117,
     2118, 2118, 2118, 2118, 2118, 2118, 2120, 2120, 2120, 2120,
     2120, 2120, 2122, 2122, 2122, 2122, 2122, 2124, 2124, 2124,
     2124, 2124, 2124, 2126, 2126, 2126, 2126, 2126, 2128, 2128,
     2128, 2128, 2128, 2128, 2128, 2128, 2128, 2130, 2131, 2132,
     2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2141,
     2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2151,

     2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2161, 2162,
     2163, 2164, 2165, 2166, 2168, 2170, 2171, 2174, 2176, 2178,
     2179, 2180, 2181, 2182, 2184, 2185, 2186, 2187, 2188, 2189,
     2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2200,
     2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
     2212, 2212, 2212, 2212, 2212, 2212, 2212, 2213, 2214, 2215,
     2216, 2217, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2226, 2226, 2226, 2226, 2226, 2226, 2226, 2226, 2226, 2226,
     2226, 2227, 2228, 2228, 2228, 2228, 2228, 2228, 2229, 2230,
     2230, 2230, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247,

     2249, 2251, 2251, 2251, 2252, 2252, 2254, 2256, 2258, 2260,
     2262, 2264, 2266, 2268, 2271, 2273, 2275, 2277, 2279, 2281,
     2283, 2285, 2287, 2290, 2292, 2294, 2296, 2298, 2300, 2303,
     2306, 2308, 2312, 2315, 2318, 2320, 2322, 2324, 2326, 2329,
     2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349,
     2351, 2353, 2355, 2357, 2360, 2363, 2365, 2367, 2369, 2371,
     2373, 2375, 2377, 2379, 2381, 2383, 2386, 2388, 2390, 2392,
     2394, 2396, 2398, 2400, 2402, 2404, 2404, 2404, 2405, 2405,
     2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2424, 2426,
     2428, 2430, 2432, 2434, 2436, 2438, 2440, 2443, 2445, 2447,

     2449, 2451, 2453, 2456, 2459, 2461, 2465, 2468, 2471, 2473,
     2475, 2477, 2479, 2482, 2484, 2486, 2488, 2490, 2492, 2494,
     2496, 2498, 2500, 2502, 2504, 2506, 2508, 2510, 2513, 2516,
     2518, 2520, 2522, 2524, 2526, 2528, 2530, 2532, 2534, 2536,
     2537, 2538, 2539, 2539, 2540, 2541, 2542, 2542, 2542, 2542,
     2542, 2542, 2543, 2543, 2543, 2543, 2543, 2544, 2544, 2544,
     2544, 2544, 2544, 2546, 2546, 2546, 2548, 2549, 2550, 2551,
     2553, 2554, 2556, 2557, 2558, 2558, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2566, 2567, 2568, 2569, 2570, 2571, 2572,
     2573, 2574, 2578, 2579, 2580, 2581, 2582, 2586, 2587, 2588,

     2589, 2590, 2591, 2592, 2593, 2594, 2596, 2597, 2598, 2599,
     2600, 2601, 2602, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
     2611, 2612, 2613, 2614, 2615, 2616, 2616, 2617, 2618, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2621, 2622, 2625, 2626,
     2627, 2628, 2629, 2630, 2631, 2632, 2632, 2633, 2634, 2634,
     2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634,
     2634, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2642,
     2644, 2646, 2648, 2651, 2653, 2656, 2658, 2660, 2660, 2660,
     2660, 2662, 2664, 2666, 2668, 2670, 2672, 2675, 2677, 2679,
     2681, 2683, 2685, 2687, 2689, 2691, 2696, 2698, 2700, 2702,

     2704, 2708, 2710, 2712, 2714, 2716, 2718, 2720, 2722, 2724,
     2727, 2729, 2731, 2733, 2735, 2737, 2739, 2742, 2744, 2746,
     2748, 2750, 2752, 2754, 2756, 2758, 2760, 2762, 2764, 2766,
     2766, 2768, 2770, 2773, 2776, 2778, 2780, 2782, 2785, 2787,
     2790, 2792, 2794, 2794, 2794, 2794, 2796, 2798, 2800, 2802,
     2804, 2806, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823,
     2825, 2830, 2832, 2834, 2836, 2838, 2842, 2844, 2846, 2848,
     2850, 2852, 2854, 2856, 2858, 2861, 2863, 2865, 2867, 2869,
     2871, 2873, 2876, 2878, 2880, 2882, 2884, 2886, 2888, 2890,
     2892, 2894, 2896, 2898, 2900, 2900, 2902, 2904, 2907, 2908,

     2909, 2910, 2910, 2910, 2910, 2910, 2912, 2912, 2912, 2912,
     2912, 2912, 2914, 2914, 2914, 2914, 2916, 2916, 2916, 2916,
     2916, 2916, 2916, 2916, 2918, 2919, 2920, 2921, 2923, 2924,
     2924, 2924, 2925, 2927, 2928, 2929, 2931, 2932, 2933, 2934,
     2935, 2936, 2938, 2939, 2940, 2942, 2943, 2946, 2946, 2947,
     2948, 2949, 2950, 2952, 2954, 2956, 2958, 2960, 2961, 2963,
     2964, 2965, 2967, 2969, 2971, 2972, 2974, 2975, 2976, 2978,
     2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2988,
     2988, 2988, 2988, 2988, 2988, 2988, 2989, 2991, 2993, 2995,
     2996, 2997, 2998, 2999, 3000, 3001, 3002, 3005, 3005, 3005,

     3005, 3005, 3005, 3005, 3005, 3005, 3005, 3006, 3006, 3006,
     3006, 3006, 3006, 3006, 3006, 3006, 3006, 3009, 3011, 3013,
     3015, 3018, 3020, 3020, 3020, 3022, 3025, 3027, 3029, 3032,
     3034, 3036, 3038, 3040, 3042, 3045, 3047, 3049, 3052, 3054,
     3057, 3057, 3059, 3061, 3063, 3066, 3069, 3072, 3075, 3078,
     3080, 3083, 3085, 3087, 3090, 3093, 3096, 3098, 3101, 3103,
     3105, 3108, 3108, 3110, 3112, 3114, 3116, 3118, 3120, 3122,
     3124, 3127, 3130, 3132, 3134, 3136, 3139, 3141, 3141, 3141,
     3143, 3146, 3148, 3150, 3153, 3155, 3157, 3159, 3161, 3163,
     3166, 3168, 3170, 3173, 3175, 3178, 3178, 3180, 3182, 3184,

     3187, 3190, 3193, 3196, 3199, 3201, 3204, 3206, 3208, 3211,
     3214, 3217, 3219, 3222, 3224, 3226, 3229, 3229, 3231, 3233,
     3235, 3237, 3239, 3241, 3243, 3245, 3248, 3249, 3250, 3252,
     3252, 3252, 3252, 3253, 3253, 3253, 3253, 3255, 3256, 3257,
     3258, 3259, 3259, 3260, 3261, 3261, 3262, 3263, 3264, 3265,
     3266, 3267, 3268, 3269, 3271, 3272, 3272, 3273, 3274, 3276,
     3277, 3277, 3277, 3279, 3281, 3283, 3283, 3285, 3287, 3289,
     3290, 3291, 3292, 3293, 3294, 3295, 3297, 3298, 3299, 3299,
     3299, 3299, 3299, 3299, 3299, 3300, 3300, 3301, 3302, 3303,
     3304, 3307, 3308, 3309, 3309, 3309, 3309, 3309, 3309, 3309,

     3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310,
     3310, 3310, 3312, 3314, 3316, 3318, 3318, 3318, 3318, 3318,
     3320, 3320, 3322, 3324, 3326, 3328, 3330, 3332, 3334, 3336,
     3339, 3339, 3341, 3343, 3346, 3348, 3348, 3351, 3354, 3357,
     3357, 3360, 3363, 3366, 3368, 3370, 3372, 3374, 3376, 3378,
     3381, 3383, 3385, 3387, 3389, 3391, 3393, 3393, 3393, 3393,
     3393, 3395, 3395, 3397, 3399, 3401, 3403, 3405, 3407, 3409,
     3411, 3414, 3414, 3416, 3418, 3421, 3423, 3423, 3426, 3429,
     3432, 3432, 3435, 3438, 3441, 3443, 3445, 3447, 3449, 3451,
     3453, 3456, 3458, 3460, 3461, 3462, 3462, 3462, 3464, 3464,

     3464, 3464, 3464, 3464, 3464, 3464, 3465, 3466, 3467, 3469,
     3470, 3471, 3472, 3474, 3475, 3476, 3477, 3479, 3480, 3482,
     3483, 3484, 3485, 3489, 3491, 3492, 3493, 3493, 3493, 3494,
     3495, 3496, 3498, 3500, 3502, 3503, 3505, 3507, 3509, 3509,
     3509, 3509, 3509, 3509, 3509, 3509, 3510, 3511, 3514, 3517,
     3518, 3521, 3524, 3527, 3527, 3527, 3528, 3529, 3529, 3530,
     3531, 3532, 3532, 3532, 3533, 3533, 3533, 3533, 3533, 3533,
     3533, 3535, 3537, 3539, 3542, 3542, 3543, 3543, 3543, 3543,
     3545, 3547, 3551, 3553, 3555, 3557, 3560, 3562, 3565, 3567,
     3569, 3571, 3576, 3579, 3581, 3583, 3585, 3588, 3591, 3594,

     3596, 3599, 3602, 3605, 3607, 3609, 3611, 3614, 3614, 3615,
     3615, 3615, 3615, 3617, 3619, 3623, 3625, 3627, 3629, 3632,
     3634, 3637, 3639, 3641, 3643, 3648, 3651, 3653, 3655, 3657,
     3660, 3663, 3666, 3668, 3671, 3674, 3677, 3678, 3679, 3679,
     3680, 3680, 3680, 3680, 3682, 3684, 3685, 3686, 3687, 3688,
     3689, 3690, 3692, 3693, 3694, 3695, 3696, 3696, 3696, 3697,
     3698, 3701, 3702, 3702, 3702, 3703, 3703, 3703, 3703, 3703,
     3704, 3705, 3706, 3707, 3707, 3708, 3708, 3708, 3708, 3708,
     3709, 3709, 3709, 3709, 3709, 3712, 3714, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3718, 3720, 3722, 3724, 3728, 3730,

     3732, 3734, 3736, 3738, 3740, 3744, 3746, 3749, 3751, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3755, 3757, 3759, 3761,
     3765, 3767, 3769, 3771, 3773, 3775, 3777, 3781, 3783, 3784,
     3787, 3787, 3787, 3788, 3789, 3790, 3791, 3792, 3794, 3796,
     3797, 3798, 3800, 3800, 3800, 3801, 3801, 3803, 3803, 3805,
     3805, 3805, 3805, 3805, 3805, 3806, 3807, 3808, 3811, 3812,
     3813, 3813, 3813, 3814, 3814, 3815, 3815, 3815, 3817, 3819,
     3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3821,
     3823, 3825, 3829, 3832, 3834, 3836, 3839, 3841, 3841, 3844,
     3846, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848,

     3848, 3850, 3852, 3854, 3858, 3861, 3863, 3865, 3868, 3870,
     3870, 3873, 3876, 3877, 3879, 3882, 3885, 3886, 3886, 3887,
     3888, 3888, 3889, 3889, 3890, 3890, 3891, 3891, 3891, 3891,
     3891, 3893, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
     3896, 3899, 3899, 3900, 3900, 3900, 3900, 3900, 3900, 3901,
     3901, 3904, 3908, 3910, 3910, 3912, 3914, 3914, 3916, 3918,
     3921, 3921, 3922, 3922, 3922, 3922, 3922, 3922, 3923, 3923,
     3926, 3930, 3932, 3932, 3934, 3936, 3936, 3938, 3938, 3940,
     3941, 3942, 3943, 3945, 3948, 3949, 3950, 3951, 3951, 3951,
     3951, 3951, 3953, 3953, 3953, 3953, 3953, 3954, 3954, 3954,

     3957, 3957, 3958, 3958, 3958, 3958, 3960, 3962, 3966, 3969,
     3971, 3973, 3976, 3976, 3977, 3977, 3977, 3977, 3979, 3981,
     3985, 3988, 3990, 3992, 3993, 3994, 3995, 3996, 3997, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     4001, 4003, 4005, 4008, 4010, 4012, 4014, 4017, 4018, 4019,
     4020, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021,
     4021, 4021, 4023, 4025, 4027, 4029, 4031, 4033, 4034, 4037,
     4038, 4040, 4040, 4040, 4041, 4041, 4041, 4041, 4041, 4041,
     4041, 4041, 4045, 4047, 4050, 4054, 4056, 4059, 4060, 4062,
     4062, 4062, 4063, 4064, 4064, 4064, 4065, 4065, 4065, 4069,

     4073, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4078, 4078, 4078, 4078, 4080, 4082, 4082,
     4082, 4084, 4084, 4084, 4084, 4086, 4088, 4088
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,    5,   15,   16,    5,   17,   18,   19,
       20,   21,   21,   22,   23,   24,   25,   26,    5,   27,
       28,   29,    5,    5,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
        5,    5,    5,    5,   56,    5,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   55,   82,    5,   83,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[84] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    5,    5,
        8,    4,    5,    5,    5,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    5,    5,    4,    5,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   12,
       13,   14,   13,   12,   13,   12,   13,   15,   13,   12,
       12,   12,   12,   12,   12,   16,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   12,   13,   14,   13,
       12,   13,   12,   13,   15,   13,   12,   12,   12,   12,
       12,    4,    5
    } ;

static yyconst flex_uint16_t yy_base[3006] =
    {   0,
        0,    0,   72,   73,  134,  217,  132,  133,  215,  216,
      234,  260,  305,  311,  292,  296,  392,  473,  555,    0,
      638,    0,  341,  347,  690,    0,  457,  724,  770,  794,
       83,   84, 2689, 2670, 2744, 2704,   85,   86, 2703,22182,
       97,  100,  102,  128,22182,  103, 2672, 2663, 2652,  835,
     2620, 2606, 2586, 2559,   65, 2511, 2505,  358,  125,  142,
      904,  132,  391, 2471,  214,  384,   61,  212,  444,  133,
      287,  466,  977,  828,  290,  841,  211,    0,  747,22182,
     2511,  133,22182,22182, 2498, 2432,    0,  341,  870,  293,
      412,  447,  303,  901,  480,22182,  116, 2462,  139,  153,

      742,  911,22182,  119, 2440, 2423,  154,  372,  215,  290,
      268,  299,  804,  122,22182,  341, 1057,  983, 1138, 1219,
     1300, 1353,  994,  819, 1001,  890, 1424, 1028, 1120, 1091,
     1231, 1206, 1502, 1578, 1627, 1173, 1706, 1306,    0, 1787,
     1320, 1404, 1868, 1949, 2030,  997, 1323, 2111, 1489, 1393,
     2164, 1395, 1155, 2240, 2316, 2396, 1452, 2446,  703,    0,
     1055, 2515,  692,  477,  918,  422, 1505,  687,22182,22182,
    22182, 2579,22182,22182,22182, 2411, 2373, 2376,    0,22182,
      125,  541,  828,22182, 1683,  834, 2641,  835,  913, 1295,
    22182,22182,22182,22182, 1569, 2706, 1578, 1783, 1803, 1865,

     1945, 2367,   98, 1694,22182,22182,22182,22182,22182, 2301,
      394,  889,  689, 2294, 2282,  442,  814,  907,  779,22182,
      941,  946, 2275,  748, 2263,  869,  970, 1058,  399,  485,
     1041,  964, 1004,  771, 2235, 1131, 1024, 1012, 1065, 1095,
     1143, 1104, 2224, 2219, 2209, 1134, 1591, 1166, 1190, 1195,
     1460,22182, 1194, 1180, 1214, 1221, 1342,  456, 1235, 1202,
     1319, 1240, 1322, 1273, 1373, 1379, 1243, 1348, 1305, 1400,
     2202, 2162, 1256, 1376, 1435, 2150,22182,22182,  847, 2174,
     2169, 2161, 1454, 1469, 1409, 1499, 1512, 1472, 1475,  848,
      835, 2117, 1568, 1493, 2098, 1161, 1585,  796,22182, 1380,

     1403, 1509, 1506,22182, 1544, 1574, 1566, 2091, 1572, 1601,
     2089,22182,  299,22182, 1660, 2143, 1681, 2114, 1692, 1848,
     1970, 1782, 1898, 1899,   48, 1983, 1987, 2016, 1984, 2043,
     2066, 2077, 2088, 2091, 2128, 2175, 2150, 2184, 2211, 2244,
     2225, 2280, 2283, 2328, 2367, 2392, 2441, 2403, 2414, 2453,
     2501, 2496, 2613, 2526, 2676, 2677, 2532, 2732, 2745, 2751,
     2733, 2781, 2770, 2792, 2804, 2819, 2837, 2838, 2841, 2842,
     2923, 2875, 2878, 2914, 2950, 2979, 2928, 2961, 2990, 2999,
     3017, 3026, 3035, 3058, 3062, 3083, 3098, 3123, 3129, 3134,
     3154, 3165, 3166, 3169, 3196, 3200, 2331, 2107, 1701, 2088,

     3189, 3225, 2145, 2582, 3305,  189, 2873, 3264, 3250, 3332,
     3335, 3353, 3370, 3403, 3391, 3314, 3390, 3412, 3430, 3478,
     3495, 3465, 3529, 1577, 3535, 3517, 3546, 3592, 3570, 3619,
     3634, 3652, 3656, 3669, 3683, 3665, 3736, 1640, 3720, 3740,
     3758, 3779, 3775, 3835, 3856, 2311, 3862, 3808, 3883, 3844,
     3894, 3876, 3933, 3919, 3931, 3969, 3996, 4001, 4007, 4018,
     1696, 2050, 2026, 2011, 2003, 1982, 1797, 4073,    0,22182,
    22182, 1628,22182, 4084,22182,22182, 1640,    0, 1794,22182,
        0,  922,  965, 1135, 1606, 1671,22182, 4093, 4102,    0,
     1725, 1767, 1774, 1803, 1834, 4133, 4193, 1704, 1985, 1875,

     4111, 4253, 1917, 2149, 4120, 4313, 2243, 2361,22182, 4202,
     1849, 4262,    0, 1064, 2695, 1793, 1969, 1944, 1817, 1776,
     1885, 1915, 2000, 1922, 1867, 1663, 1866, 2090, 1937, 1923,
     1945, 2070, 1904, 1981, 1990, 2075, 2104, 1873, 2198, 1902,
     1901, 1858, 1853, 1851, 2020, 2213, 2238, 1843, 2256, 2127,
     2271, 2269, 2286, 2288, 2356, 2430, 2071, 2363, 2416, 1823,
     2371, 2459, 2470, 2476, 2391, 2499, 2064, 2500, 1739, 2525,
     2566, 2528, 2572, 2094, 1705, 2306, 2561, 2416, 1623, 1616,
     1613, 2575, 2517, 2247, 2577, 2596, 2836, 1605, 1572, 1568,
     2601, 2588, 1522, 2496, 2461, 1516, 2514, 1510, 2575,22182,

     2621, 2639, 2625, 2699, 2694, 2734, 1444, 1436, 1499,22182,
     4286, 3388, 4311, 4172, 4176, 1428, 1400, 2962, 4315, 4292,
     4345, 4358, 4236, 4383, 4387, 4398, 4394, 4401, 4405, 4447,
     4458, 4487, 4488, 4493, 4492, 4523, 4522, 4534, 4554, 4505,
     4581, 4543, 4594, 4616, 4619, 4630, 4649, 4650, 4653, 4680,
     4667, 4698, 4687, 4712, 4725, 4748, 4761, 4754, 4793, 4796,
     4797, 4811, 4846, 4853, 4858, 4864, 4887, 4901, 4904, 4937,
     4950, 4951, 4954, 4973, 4985, 5010, 5016, 5023, 5035, 5050,
     5056, 5057, 5097, 1465,22182, 5116, 5131, 5143, 5146, 1394,
     1363, 3418, 5166, 5180, 5193, 5207, 5249, 5262, 5268, 5289,

     5295, 5161, 5337, 5350, 5355, 5372, 5392, 5377, 5410, 5413,
     5443, 5448, 5475, 5479, 5482, 5509, 5515, 5538, 5542, 5571,
     5565, 5598, 5605, 5632, 5638, 5665, 5688, 5700, 5703, 5720,
     5763, 5786, 5715, 5797, 5801, 5820, 5847, 5824, 5882, 5885,
     5912, 5916, 5930, 5933, 5967, 5981, 6004, 6015, 1377, 2724,
     6081,22182, 2743,    0, 6070, 6140, 6149, 2452, 6180, 6159,
     6170, 6239, 6248, 6257, 6266, 6297, 6308, 2817, 3503, 3285,
     6317, 6367, 6376, 6385, 6416, 2851, 6426, 6435, 6444, 6454,
     3310, 2913, 6463, 6522, 6531, 3175, 6540, 6549, 6559, 3497,
     3528, 2754, 6568, 6618, 6627, 3689, 6636, 6645, 3015, 2780,

     6654, 1370, 2296,  352, 3910, 4019, 2812, 6649, 3011,  413,
     1364, 1359, 2840, 2815, 1356, 1333, 1303, 2944, 1299, 2952,
     6695, 1296, 3045, 1289, 2846, 3053, 2977, 1281, 3056, 2992,
     3081, 1275, 3183, 1223, 1218, 3066, 3063, 3224, 3221, 3225,
     3179, 6744, 1192, 1148, 3164, 3127, 1137, 1118, 1106, 3235,
     1096, 1093, 3348, 1081, 3387, 3119, 3413, 6794, 1074, 3263,
     1056, 1045, 3294, 3425, 2884, 3408,  994, 3789, 3345, 3522,
     3237, 3553, 3559, 3511, 6841, 3595, 6888, 3265, 3462,  969,
     3288, 3339, 3397,22182, 4855,22182, 3497, 3526, 3539, 3571,
     3582, 3593,  966, 1005,  467, 5998, 5782, 6963, 6001,  927,

     3787, 6751, 6733, 6786, 6832, 6887, 6880, 6899, 6926, 6959,
     6974, 6986, 7023, 7104, 7027, 7042, 7045, 7062, 7059, 7092,
     7119, 7063, 7131, 7169, 7186, 7191, 7192, 7203, 7206, 7226,
     7233, 7253, 7267, 7268, 7289, 7316, 7397, 7325, 7329, 7352,
     7358, 7385, 7398, 7454, 7457, 7466, 7479, 7484, 7488, 7497,
     7515, 7502, 7596, 7519, 7553, 7560, 7565, 7608, 7587,  990,
      536, 7672, 7753, 7677,  905, 3989, 7684, 7690, 7695, 7733,
     7776, 7817, 7834, 7837, 7851, 7857, 7868, 7949, 7864, 7898,
     7954, 8014, 8031, 8036, 8043, 8048, 8079, 8117, 8120, 8124,
     8138, 8151, 8155, 8184, 8206, 8220, 8223, 8265, 8346, 8226,

     8243, 8261, 8307, 8288, 8334, 8352, 8357, 8379, 8415, 8434,
     8438, 8451, 8470, 8465, 8551, 8484, 8565, 8520, 8547, 8616,
     4013, 8669, 8729,22182,22182, 3594,22182, 7950, 3611,    0,
     8617, 8638, 8665, 8789, 8798, 8848, 8857, 4011, 8866, 4669,
    22182, 8875, 3650, 8884, 8897, 8957, 4142, 5054, 8906,22182,
     8966, 8997, 4013, 9038, 5212, 5170, 9016, 9025, 5052, 3672,
     9047, 9078, 9097, 4130, 9106,22182,  930,  912, 3720, 3653,
     4550, 4561, 3806, 4454, 3828, 4394, 3911, 3647, 4955, 4013,
     4755, 5290, 3652, 3759, 4541, 5581, 5542, 4683, 3781, 4633,
     4187, 4298, 4814, 4192, 3788, 4399, 4863, 4934, 3820, 3874,

     5212, 5193, 5787, 4121, 4483, 3878, 3912, 4613, 5247, 5241,
     5599, 5459, 5511, 5253, 4799, 5827, 6074, 5449, 4952, 4565,
     5639, 5050, 4117, 4122, 4242, 4316, 5296, 5637, 5344, 5361,
     5627, 5704, 5406, 4361, 5687, 4430, 4435, 5007,  879, 4675,
     4701, 4732, 5130, 5549, 5695, 5699, 5831, 5454, 5556, 5883,
     5987, 5998, 5852, 5899, 5611, 4782, 4809, 4863, 4874, 4915,
     5005, 5052, 5080, 5127, 5226, 5390,  846, 5173,22182, 5874,
     5247, 5284, 5295, 5416, 5479, 5506, 5552,22182, 5824, 5898,
      790, 6034, 7720, 8641, 8708, 9130, 9131, 8568, 8774, 7822,
     9134, 7621,  784, 6124,  765,  791,  702, 7974, 9148, 9152,

     9161, 8193, 8447, 9165, 9221, 9224, 9225, 9238, 9255, 9242,
     9298, 9311, 9328, 8942, 9331, 9369, 9332, 9166, 9346, 9349,
     9404, 9405, 9422, 9425, 9442, 9443, 9480, 9455, 9498, 9510,
     9501, 9591, 9530, 9549, 9557, 9603, 9622, 9703, 9618, 9667,
     9653, 9682, 9678, 9709, 9720, 9738, 9765, 9768, 9785, 9780,
     9797, 9802, 9814, 9847, 9859, 9864, 6217, 9897, 9886, 9909,
     9945, 9952, 9959, 9981, 9995,10008,10040,  779, 6223,  979,
      983,  855,10043,10057,10063,10070,10099,10105,10126,10145,
    10132,10172,10201,10221,10228,10208,10248,10277,10289,10304,
    10311,10316,10322,10345,10372,10379,10393,10406,10410,10413,

    10468,10474,10487,10568,10517,10487,10573, 7317,10551,10626,
    10633,10590, 8113,10637,10120,10667,10694,10708,10714,10725,
    10731,10744, 6456,10765,10802,10808,10815,10829, 6304, 5688,
     5913,22182, 5695, 2679,10883,10895,10904,10913,10923,10932,
    10944,10953, 5983,10972,10981,10990,11040,11049,11059, 6191,
     6069,11068,11127,11136,11145, 6071,11154,11213,11222,11232,
     6290, 6783,11241,11291,11300, 6301, 6305,11309,11318,11327,
     6008, 5769,11336, 6451,11349,11358, 5906, 6451, 6454, 5918,
     6461, 6547, 6308, 6553, 6654, 5973,22182,22182, 5991, 6034,
     6459, 6077, 6555, 6556, 6443, 6638, 6169, 6643, 6176, 6655,

     6736, 6788, 6674, 6559, 6305, 6694, 6793, 6458, 6648, 6729,
     6646, 6876, 6552, 6691, 6692, 6822, 6739, 6798, 6800, 6836,
     6884, 6892, 6930, 6819, 6969, 6946, 7179, 6938, 7006, 7170,
     7240, 7252, 7039, 7239, 7269, 7260, 7329, 6831, 6839, 6847,
     7330, 7299, 7118, 7369, 7374, 7093, 7557, 7543, 7455, 7591,
     7108, 7175, 7344, 6914, 6966, 7018, 7341, 7389, 7597, 7193,
     7609, 7055, 7548, 7468, 7668, 7667, 7738, 7868, 7678, 7141,
     7165, 7260, 7381, 7388, 7449, 7496, 7469, 7507, 7627, 7692,
      750, 7512, 7633, 7727, 7759, 7776, 7775,22182,22182, 7806,
     7814, 9948,11382,11383,11386,11395,11413,11418,11424,11445,

    11451,  745, 1009,  727,  670,11480,11507,11510,11492,11511,
    11542,11543,11579,11592,11598,11611,11599,11660,11664,11675,
    11687,11700,11706,11709,11736,11751,11766,11772,11771,11785,
    11802,11819,11838,11853,11858,11867,11870,11885,11876,11903,
    11932,11949,11961,11968,11995,11998,12016,11999,12036,12033,
    12058,12071,12098,12093,12104,12127,12118,12131,12154,12167,
    12140,12189,12202,12225,12203,12216,12252,12271,12284,12288,
    12301,12333,12339,12360,12372,  663, 1024,  659,  649,12395,
    12401,12422,12435,12457,12478,12484,12495,12491,12498,12533,
    12560,12572,12594,12589,12621,12628,12666,12677,12688,12711,

    12722,12726,12759,12773,12786,12793,12807,12820,12834,12854,
    12857,12868,12889,12916,12919,12923,12950,12953,12987,13010,
    13017,13037,13044,13048,13075,13086,13108,13104,13125,13131,
    13142,13146,13173,13192,13207,13219,13230,13234,13257, 7844,
     7851, 7888, 7767,13304,13313,13323,13332, 8238,13386, 8738,
     8489,13372,13445,13395, 8276, 8016,13426, 8536,13454,13504,
     8037,13513,22182, 8666,13530, 7834, 8041, 8249, 7946, 7835,
     8283, 7847, 8037, 8268, 7887, 7886, 7891, 8168, 8100, 8350,
     8483, 8499, 7938, 8617, 8329, 8670, 7948, 8384, 8383, 8539,
     8726, 7994, 8468, 8725, 8445, 8434, 8628, 8786, 8723, 9114,

     8787, 9145, 9235, 8541, 8026, 8063, 8619, 9184, 8070, 8891,
     8886, 9402, 8169, 8789, 8893, 8894, 8953, 8618, 8653, 9225,
     9472, 9516, 9602, 9421, 8954, 9034, 9032, 9037, 8210, 8969,
     8365,  261, 8260, 8308, 8305, 8326, 9348, 8488, 9281, 9493,
     9678, 9542, 9870, 9580, 9365, 9763, 9038, 9563, 8542, 8738,
     8791, 8800, 8902, 8972, 9095, 9161, 9190, 9216, 9360,  384,
     9257, 9281, 9331, 9412, 9415,  673, 9460,  840,12555,13425,
    13554,13555,12639,13559,13428,13560,13566, 1061, 1073, 1149,
    13605,13628,13641,13642,13647,13660,13429,13661,13690,13707,
    13726,13732,13743,13747,13746,13487,13782,13783,13820,13829,

    13832,13833,13854,13865,13850,13869,13905,13892,13896,13925,
    13952,13955,13967,13961,13982,14014,13994,14023,14028,14043,
    14078,14055,14061,14090,14096,14138,14137,14149,14180,14183,
    14184,14187,14214,14221,14248,14243,14282,14285,14288,14315,
    14333,14344, 1170, 1247, 1214,14351,14374,14391,14410,14425,
    14432,14437,14459,14493,14496,14499,14532,14535,14562,14591,
    14580,14598,14594,14631,14653,14665,14686,14692,14703,14721,
    14741,14748,14768,14804,14808,14825,14831,14837,14844,14867,
    14864,14902,14925,14906,14929,14936,14963,14948,14998,15010,
    15013,15025,15048,15070,15085,15097,15112,15115, 9714, 9625,

     9673, 9455,15168,15114,10041,15182,15141,15194,    0,    0,
        0,15222,15231,15241,10123,15250,15262,15271, 9841, 9441,
    15280,15290,15299, 9501, 9943, 9871, 9654, 9502,10006, 9522,
     9583, 9765, 9617, 9799, 9931, 9671,10077,10168, 9709,10133,
    10171, 9743,10194,10057, 9758,10200,10284,10295,10315, 2704,
    10112,10220, 9848,10007, 9859,10290, 9922, 9959, 9988,10379,
    10386,10047,10094,10389,10224,10192,10314,10438,10225,10493,
    10539,10426,10490,10248,10558,10535,10610,10626,10282,10369,
      911,10435,10386,10383,10432,10574,10684,10458,10480,10677,
    10724,10500,10633,10791,10799,10801,10504,10609,10635,10666,

    10700,10692,10725,10712,10724,10745,22182, 1307,10791,10784,
    10780,10787,10791,10805, 1313,10827,15066,15323,15324,15327,
    15338,15341,11015,11020,15358,15391,15396,15400,15414,15423,
    15427,15434,15456,15441,15473,15498,15513,15520,15531,15535,
    15556,15562,15569,15573,15604,15607,15624,15641,15644,15655,
    15662,15666,15675,15689,15700,15712,15734,15737,15748,15749,
    15783,15784,15824,15787,15825,15830,15843,15847,15870,15881,
    15885,15912,15915,15942,15953,15957,15971,11101,11107,15976,
    15998,16017,16034,16040,16047,16079,16067,16090,16128,16140,
    16155,16161,16167,16173,16188,16200,16223,16229,16250,16256,

    16262,16269,16289,16292,16319,16312,16325,16331,16358,16380,
    16393,16407,16413,16425,16430,16442,16488,16501,16506,16528,
    16524,16535,16547,16574,16597,16609,10813,10807,10821,10848,
    11058,11347,16621,16663,11392,16675,22182,11065,11138,10979,
    11144,10924,22182,11139,11143,11151,11231,11230,11469,11148,
    10912,11222,11504,10973, 2943,11935,11226,11153,10978,11366,
    11907,11584,11048,11049,11225,11505,11229,11232,11345,11667,
    11562,11396,11769,11653,11450,11398,11429,11482, 4768,11451,
    11574,11454,11499,11530,11761,12194,11596,11864,11755,11692,
    11591,11836,12186,11613,11675,11697,11718,11716,11749,22182,

    11762,11775,11871,11862,11806,11825,11834,11883,11888,11947,
    11950,16699,16700,16712,16711,13014,  710,  351, 1931,16734,
    16747,16761,16783,16796,16797,16810,16513,16828,16843,16816,
    16878,16846,16889,16885,16912,16919,16925,16946,16950,16968,
    16975,16980,16981,16986,17013,17017,17018,17047,17068,17074,
    17085,17103,17135,17162,17174,17180,13280,  532,  741, 2168,
    17185,17197,17235,17256,17116,17268,17273,17262,17285,17304,
    17344,17350,17361,17390,17373,17393,17410,17449,17461,17466,
    17479,17483,17496,17500,17517,17534,17555,17551,17582,17568,
    17589,17616,17619,12019,12060, 3897,12277,17637,17659,17685,

    12000,11909,17694,17703,17712,12091,12338,12232,11924,22182,
    12138,12344,11939,12393,12405,12540,11989,12482,12020,12599,
    12291,12103,12114,12134,22182,22182,12169,12174,12195,12481,
    12394,12223,12274,12332,12538,12346,12384,12388, 8991,  252,
    12555,12602,12472,12481,12502,12709,12614,12539,12573,12756,
    12613,12627,12646,12660,12666,22182,22182,12679,22182,22182,
    22182,12675,12708,22182,12698,12710,12708,12738,12768,12784,
    17736,17737,17748,17749, 1272,  526, 1250, 1474, 1335,17771,
    17778,17766,17833,17798,17837,17860,17864,17869,17873,17896,
    17900,17929,17941,17946,17958,17963,17975,17994,17997,18006,

    18031,18037,18044,18071,18066,18078,18093, 1301,  516, 1530,
     1733, 1644,18105,18108,18135,18154,18174,18177,18181,18194,
    18211,18240,18245,18275,18262,18279,18296,18302,18317,18339,
    18344,18351,18373,18378,18384,18390,12803,12890, 4062,22182,
    18456,12765,18465,22182,12759,12953,12840,12896,12989,12769,
    12899,12778,13020,12911,12933,13180,12785,12777,13105,12841,
    12834,13027,  410, 3438,  491,13001,13183,12860,12918,22182,
    13206,13226,13115,12953,22182,12962,13042,13338,12994,22182,
    13123,13127,13212,13339,18112,18411,18490,  474,14338,14050,
     1750, 2083,16648,18493,18499,18504,18524,18505,18554,18561,

    18541,18588,18591,18609,18618,18627,18638,18650,18684,  470,
    17217,18673, 1765, 2845,18701,18719,18722,18733,18739,18769,
    18784,18796,18825,18829,18844,18856,18861,18890,13470,13126,
    18931,18942,13156,13324,13538,13552,13241,13193,13165,13532,
    13653,13240,13311,13391,13544,13745,13445, 4242,22182,  427,
     6071,13564, 1486,13482,  354,13709,13768,13471,  343,22182,
    13679, 1537,  335,13549,22182,13730, 1603,18966,18967,14887,
     1914, 1652, 1710,17121,18901, 1970, 2727, 3350,18986,19003,
    19004,19007,19034,19039,19043,19068,19072,19075,19089,19102,
    19134,19139, 1990, 1729, 1772,19157,19161, 2002, 3561, 3664,

    19175,19195,19198,19202,19234,19257,19261,19279,19284,19296,
    19302,13549,13881,13592,14318,13608,14038,13941,14084,14089,
    13644,22182,14127,13946, 6229,22182, 1686,13733,13657,13708,
    13796,14170,13832, 1783,13859,13882,13880, 1814,13941,19290,
    19168, 2190,  235,19111, 2295, 1754, 2309, 3497, 2418, 2468,
    19319,19351,19355,19358,19378,19390,19413,19396,19447,19452,
     2478,  227,19464, 2523, 1784, 2339, 3743, 2615, 2682,19479,
    19482,19494,19509,19513,19550,19569,19556,14495,13884, 4029,
    14132,14027,13935,14466,22182,14322,14167,13956,14086,13995,
    14094,14128,14193,14232,14219,14233,22182,14243,14298,19391,

     2929,  221, 3080,19573, 3192,19592,19596,19603,19607,19632,
    19637,19664, 3439,  211, 3490,19696, 3615,19678,19699,19719,
    19726,19733,19746,14343,14408,14515, 4248,14265,14231,14349,
    14348,14372,14401,14413,14449,14434,14414,14489,14463,19713,
    19760,19764,19781,19810,19832,19837,19849,14577,14568,14638,
    14731,14488,14546,14446,14581,14599,14649,14657,14613,14656,
    14700,19843,19868,19855,19905,19926,19932,14741,14627,14689,
    14628,14797,14739,22182,14644,14688,14841,14771,14726,14910,
    14900,19939,19943,19961,19966,19988,20001,14747,14751,14950,
    14769,22182,22182,14973,14906,22182,14984,14978,20007,20028,

    14808,15027,14956,15066,15097,15098,15146,15149,15113,15281,
    15144,15285,15306,15316,14915,15383,15020,15384,15304,15421,
    14951,15428,15347,15436,15367,15444,  169,15451,  104,15513,
       88,   42,22182,   29,14843,    7,22182,22182,15034,15115,
    22182,15120,15161,15302,22182,22182,22182,20110,20126,20142,
    20158,20174,20190,20206,20222,20238,20251,20264,20271,20278,
    20293,20300,20307,20322,20338,20353,20360,20374,20381,20396,
    20409,20420,20430,20440,20453,20469,20476,20492,20508,20524,
    20540,20555,20571,20587, 2681,20603, 2789,20616,20624,20632,
    20640, 3048,20656,20672,20688,20704,20720,20736,20752,20768,

    20784,20800,20815,20831,20847,20863,20878,20894,20910, 3119,
    20926,20939,20947,20955,20963,20970,20986,21002,21018,21034,
    21050,21066,21082,21097,21113,21129,21145,21160,21176,21192,
     3139,21208,21216,21224,21232,21239,21246,21254,21261,21277,
    21293,21309,21325,21341,21357,21372,21388,21404,21419,21435,
    21451,21464,21480,21488,21495,21503,21510,21517,21525,21532,
    21548,21564,21580,21596,21611,21627,21643,21659,21674,21690,
    21706,21722,21738,21745,21752,21760,21767,21775,21782,21798,
    21814,21822,21838,21854,21870,21886,21893,21901,21917,21933,
    21941,21957,21973,21989,22005,22021,22037,22053,22069,22085,

    22101,22117,22133,22149,22165
    } ;

static yyconst flex_int16_t yy_def[3006] =
    {   0,
     2847,    1, 2848, 2848, 2849, 2849,    1,    1,    1,    1,
        1,    1, 2850, 2850,    1,    1, 2851, 2851, 2847,   19,
     2847,   21,    1,    1,    1,   25,    1,    1, 2852, 2852,
     2853, 2853, 2854, 2854, 2855, 2855, 2856, 2856, 2847, 2847,
     2847, 2847, 2857, 2847, 2847, 2858, 2847, 2847, 2847, 2847,
       50,   50,   50, 2847, 2847, 2847, 2847, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2860, 2861, 2847,
     2847, 2847, 2847, 2847, 2847, 2862, 2863, 2859, 2859, 2859,
     2861, 2859, 2859, 2859, 2859, 2847, 2847, 2847, 2847, 2847,

     2864, 2859, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2865, 2847, 2847, 2847, 2866, 2866, 2866, 2866,
     2866,  119, 2866, 2866, 2866, 2866,  120, 2866, 2866, 2866,
     2866, 2866, 2866,  120,  121, 2866, 2866, 2866, 2867, 2868,
     2868, 2868, 2868, 2868, 2868, 2868, 2868, 2868, 2868,  145,
      145,  145, 2868, 2868,  145, 2868,  145,  156,  158, 2869,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2870, 2847,
     2847, 2847, 2871, 2847, 2872, 2871, 2847, 2873, 2873, 2874,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847,  196, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2847,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2847, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2875, 2875, 2875, 2875, 2876, 2847, 2847, 2847, 2877,
     2877, 2877, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2847,
     2847, 2878, 2878, 2878, 2879, 2847, 2859, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2880, 2880, 2880,
     2881, 2847, 2847, 2847, 2847, 2847, 2882, 2847, 2882, 2882,
     2882, 2882, 2882, 2882, 2883, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2882, 2882, 2882, 2882, 2882, 2847, 2847,  158, 2847,

      158,  158,  145,  158,  158, 2884,  158,  405,  158,  405,
      405,  405,  405,  405,  405,  158,  158,  158,  158,  405,
      405,  158,  405,  405,  405,  158,  405,  405,  158,  405,
      405,  405,  405,  405,  405,  158,  158,  405,  405,  405,
      405,  158,  405,  405,  405,  145,  405,  158,  405,  158,
      405,  158,  405,  158,  158,  405,  405,  405,  405,  405,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2847,  172, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2870, 2847, 2847,
     2885, 2871, 2871, 2871, 2871, 2871, 2847, 2886, 2847, 2887,
     2888, 2888, 2888, 2888, 2888, 2847, 2847,  497,  498,  499,

     2847, 2847,  502, 2889, 2847, 2847,  506, 2890, 2847, 2847,
     2891, 2847, 2892, 2847, 2847, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2893, 2893, 2893, 2894, 2895,
     2847, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2847, 2847,
     2896, 2896, 2897, 2898, 2847, 2859, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2899, 2899, 2900, 2901, 2902, 2847,
     2903, 2903, 2903, 2903, 2903, 2904, 2905, 2847, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2903, 2903, 2906, 2847, 2907, 2907, 2907, 2907, 2908,
     2909, 2847, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,

     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2907, 2907, 2907, 2907, 2859, 2859,
     2847, 2847, 2847, 2910, 2847, 2911, 2847, 2912, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847,  767,  768,  769,
     2847, 2847, 2847, 2847, 2847,  770, 2847, 2847, 2847, 2847,
      780, 2913, 2847, 2847, 2847, 2913, 2847, 2847, 2847,  789,
     2914, 2847, 2847, 2847, 2847, 2914, 2847, 2847, 2915, 2847,

     2847, 2916, 2847, 2847, 2847, 2847, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859, 2859,
     2859, 2859, 2859, 2917, 2917, 2917, 2918, 2847, 2859, 2859,
     2859, 2859, 2859, 2859,  858, 2847, 2847, 2919, 2919, 2920,
     2920, 2847,  821, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2921, 2921, 2922, 2923, 2923, 2924, 2924, 2924, 2924, 2925,

     2926, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2927,
     2927, 2928, 2928, 2928, 2929, 2930, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,

     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928,
      821,  858, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2931,
     2932, 2932, 2932, 2847, 2847, 2847, 2847, 2933, 2847, 2934,
     2847, 2847, 2935, 2847, 2847, 2847, 1046, 2933, 2847, 2847,
     2847, 2847, 2936, 2847, 1054, 2934, 2847, 2847, 2937, 2938,
     2847, 2847, 2847, 2935, 2847, 2847, 2939, 2939, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2847, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 2940, 2940, 2940, 2941, 2847,
     2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2942, 2942, 2943, 2943, 2847, 1022,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2944, 2944,
     2945, 2847, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2947, 2947, 2947, 2947, 2948, 2946, 2946, 2946,

     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 1232, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
     2946, 2946, 2946, 2946, 2946, 2946, 2847, 2949, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2950, 2950, 2950,
     2950, 2951, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949, 2949,

     2949, 2949, 2949, 2949, 2949, 1304, 2949, 1304, 1304, 1304,
     2949, 2949, 1304, 2949, 1304, 2949, 2949, 2949, 2949, 2949,
     2949, 2949, 1310, 2949, 2949, 2949, 2949, 2949, 1022, 1022,
     1022, 2847, 2847, 2952, 2953, 2847, 2953, 2847, 2953, 2847,
     2847, 2847, 1064, 2847, 2847, 2847, 2847, 2847, 2847, 1349,
     2954, 2847, 2847, 2847, 2847, 2955, 2847, 2847, 2847, 2847,
     1360, 2956, 2847, 2847, 2847, 2957, 2958, 2847, 2847, 2847,
     2959, 2847, 2847, 2960, 2847, 2847, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 2847, 2847, 2847, 2847,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     2961, 2961, 2961, 2847, 2847, 2847, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2962, 2962,
     2963, 1022, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2964,
     2964, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2966, 2967, 2966, 2968, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2970, 2971, 2970, 2972, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,

     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 1022,
     1022, 1022, 2847, 2973, 2973, 2973, 2847, 2974, 2847, 1649,
     2956, 2847, 2847, 2847, 2975, 2976, 2847, 2977, 2847, 2847,
     2978, 2847, 2847, 2979, 2847, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 2847, 2847, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2980,
     2980, 2980, 2847, 2847, 2847, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2981, 2981,
     1022, 2847, 2847, 2847, 2847, 2847, 2964, 2964, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2967, 2967, 2967,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2971, 2971, 2971, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 1022, 1022,

     1022, 2847, 2847, 2847, 2974, 2847, 2847, 2847, 1649, 1650,
     1651, 2847, 2847, 2847, 2975, 2847, 2847, 2847, 2982, 2847,
     2847, 2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022, 2847,
     2847, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2847,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2980,
     2980, 2980, 2847, 2847, 2847, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2981, 2981, 2847,
     2847, 2847, 2847, 2847, 2964, 2964, 2965, 2965, 2965, 2965,
     2965, 2965, 2983, 2984, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2969, 2969, 2969, 2969, 2969, 2969, 2985, 2986, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,

     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 1022, 1022, 1022, 2847,
     2987, 2988, 2847, 2847, 2978, 2847, 2847, 1022, 1022, 1022,
     1022, 2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 2847, 1022, 1022, 1022, 1022, 1022,
     2847, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2980, 2980,
     2980, 2847, 2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2981, 2981, 2847, 2847, 2847, 2847, 2847, 2964,
     2964, 2965, 2965, 2965, 2965, 2984, 2984, 2984, 2989, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2969, 2969, 2969, 2969, 2986, 2986, 2986, 2990,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 1022, 1022, 2847, 2987, 2847, 2847, 2847,

     2991, 2847, 2847, 2847, 2847, 1022, 1022, 1022, 1022, 2847,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 2847, 2847, 2847, 2847, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 2980, 2992,
     2980, 2980, 2847, 2847, 2847, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2981, 2981, 2847, 2847, 2847, 2847, 2847, 2964, 2964,
     2965, 2965, 2965, 2965, 2993, 2984, 2989, 2989, 2994, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2969, 2969, 2969, 2969, 2995, 2986, 2990,
     2990, 2996, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 1022, 1022, 2847, 2847,
     2847, 2135, 2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 2847, 2847, 1022, 1022,
     1022, 1022, 2992, 2980, 2997, 2980, 2980, 2847, 2847, 2847,
     1022, 1022, 1022, 2847, 2847, 2847, 2981, 2981, 2847, 2847,
     2847, 2847, 2964, 2964, 2965, 2965, 2965, 2984, 2984, 2998,
     2994, 2994, 2999, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2965, 2969, 2969, 2969, 2986,
     2986, 3000, 2996, 2996, 3001, 2969, 2969, 2969, 2969, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 1022, 1022,
     2847, 2847, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 2847, 2847, 1022, 1022, 1022, 2980, 2847, 2997,
     2847, 2980, 2980, 2847, 2847, 1022, 1022, 1022, 2847, 2847,
     2981, 2981, 2847, 2847, 2847, 2964, 2964, 2965, 2965, 2998,
     2998, 2998, 2998, 3002, 2999, 2999, 2999, 2994, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2969,
     2969, 3000, 3000, 3000, 3000, 3003, 3001, 3001, 3001, 2996,

     2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2969, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     2847, 2847, 1022, 1022, 2847, 2847, 2980, 2980, 2847, 2847,
     1022, 1022, 2847, 2981, 2981, 2847, 2847, 2964, 2964, 2965,
     2965, 2989, 2998, 3002, 3002, 3002, 3002, 3004, 2999, 2994,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2969, 2969,
     2990, 3000, 3003, 3003, 3003, 3003, 3005, 3001, 2996, 2969,
     2969, 2969, 2969, 2969, 2969, 2969, 2969, 1022, 1022, 2847,
     1022, 1022, 1022, 1022, 2847, 1022, 1022, 2980, 2980, 2847,
     2847, 1022, 2847, 2981, 2981, 2847, 2847, 2964, 2964, 2965,

     2994, 3002, 2999, 2999, 2999, 2965, 2965, 2965, 2965, 2965,
     2965, 2969, 2996, 3003, 3001, 3001, 3001, 2969, 2969, 2969,
     2969, 2969, 2969, 1022, 1022, 1022, 2847, 1022, 1022, 2980,
     2980, 2847, 2847, 2847, 2981, 2981, 2847, 2964, 2964, 2965,
     2965, 2965, 2965, 2969, 2969, 2969, 2969, 1022, 1022, 1022,
     1022, 2980, 2980, 2847, 2847, 2847, 2981, 2981, 2847, 2964,
     2964, 2965, 2965, 2965, 2969, 2969, 2969, 1022, 1022, 1022,
     1022, 2980, 2980, 2847, 2847, 2847, 2981, 2981, 2847, 2964,
     2964, 2965, 2965, 2965, 2969, 2969, 2969, 1022, 1022, 2980,
     2980, 2847, 2847, 2981, 2981, 2847, 2964, 2964, 2965, 2969,

     1022, 2980, 2980, 2981, 2981, 2964, 2964, 2980, 2980, 2981,
     2981, 2964, 2964, 2980, 2980, 2981, 2981, 2964, 2964, 2980,
     2980, 2981, 2981, 2964, 2964, 2980, 2980, 2981, 2981, 2964,
     2964, 2980, 2847, 2981, 2847, 2964, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847,    0, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847
    } ;

static yyconst flex_uint16_t yy_nxt[22266] =
    {   0,
       40,   41,   42,   41,   40,   43,   40,   40,   44,   45,
       46,   47,   40,   48,   40,   49,   50,   51,   52,   50,
       50,   50,   50,   53,   50,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   64,   65,   64,   64,
       66,   67,   68,   69,   70,   64,   71,   72,   73,   74,
       75,   76,   77,   64,   64,   78,   58,   59,   60,   61,
       62,   63,   64,   64,   65,   64,   64,   66,   67,   68,
       69,   70,   64,   71,   72,   73,   74,   75,   76,   77,
       64,   79,   40,   81,   81,  175,  175,   84,   84, 2841,
      181,  181,  206,  207,  176,  176,  177,  177,  182,  182,

      182,  182,  182,  182,  240,   82,   82,  184,  189,  185,
      190, 2839,  186,  191,  514,  514,  215,  182,  182,  182,
      298,  298,  298,  313, 2838,  313,  479,  479,  479,  617,
      618,  240,   82,   82,   83,   83,   84,   83,   83,   83,
       83,   83,   83,   83,   83,   85,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   88,   88,  187,   89,   89,  216,  187,
     2837,  218,  227,  187,  228,  279,   90,   90,  217,  246,
      215,  290,  291,  300,  229,  219, 2835,  215,  215,   87,
       88,   88,  187,   89,   89,  216,  187,  215,  218,  227,

      187,  228,  279,   90,   90,  217,  246,  480,  290,  291,
      300,  229,  219,   91,   91,   83,   83,   83,   83,   84,
       83,   83,   83,   83,   83,   83,   83,   83,   85,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   88,   88,  235,   89,
       89, 2833,   92,   92,  270,  241,  236, 2464,  303,   93,
       93,  242,   94,   94, 1982,   88,  215,  215,   89,  215,
      691,  692,   87,   88,   88,  235,   89,   89,   90,   92,
       92,  270,  241,  236,   95,  303,   93,   93,  242,   94,
       94,   88,   88,  966,   89,   89,   91,   91,   83,   83,

      313,  306,  313,  901,   90,   90,   97,   42,   97,  692,
       95,   95,   97,   42,   97,   91,   98,  618,   88,  264,
      247,   89,   98,   88,  304,  102,   89,   88,  306,  102,
       89,   90,  305,  265, 2465,  307,   90,   95,   99,  285,
       90,   91,  248,  277,   99,  215,  264,  247,  215,  287,
       88,  304,  102,   89,   88,  100,  102,   89,  215,  305,
      265,  100,  307,   90,  895,   99,  285,   90,  803,  803,
      218,   99,   88,   91,  161,   89,  287,   91,   88, 2376,
      161,   89,  100,  314,  283,   90,  101, 2009,  100,  211,
     2636,   90,  101,  104,  104,  104,  215,  218, 2633,   88,

      212,  161,   89,  105,  213,   88,  214,  161,   89, 2630,
      314,  283,   90,  215,  301, 2464,  211,  106,   90, 1079,
      230,  237,   91,  107,  302,  108,  109,  212,   91,  110,
      238,  213, 2551,  214,  231,  239,  531,  232,  111,  215,
      233,  301,  516,  112,  274,  275,  234,  230,  237,  215,
      107,  302,  108,  109,  215,  247,  110,  238,   40,   84,
       40,  231,  239,  531,  232,  111,  296,  233,  215,  516,
      112,  274,  275,  113,  104,  104,  104,  248,  243, 1182,
      895,  235,  247,  961,  105,  520,  244,  895,   88,  286,
      245,   89, 2465,  276,  277,  249, 2551,  215,  106,  215,

      563,  168,  215,  250,  107,  243,  108,  109,  235,  289,
      110,  215,  520,  244,  251,   88,  286,  245,   89,  111,
      241,  215,  249,  265,  112,  532,  242,  563,  168,  961,
      250,  107,  215,  108,  109,  215,  289,  110,   91,  895,
      215,  251,  182,  182,  182, 2408,  111,  241, 1257,  961,
      265,  112,  532,  242,  113,   40,  114,  115,  114,   40,
       43,   40,   40,   44,  116,   46,   47,   40,   48,   40,
       49,   50,   51,   52,   50,   50,   50,   50,   53,   50,
       54,   55,   56,   57,  117,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  124,  127,  128,  129,  130,  131,

      124,  132,  133,  134,  135,  136,  137,  138,  124,  124,
      139,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  124,  127,  128,  129,  130,  131,  124,  132,  133,
      134,  135,  136,  137,  138,  124,   91,   40,   40,   41,
       42,   41,   40,   43,   40,   40,   44,   45,   46,   47,
       40,   48,   40,   49,   50,   51,   52,   50,   50,   50,
       50,   53,   50,   54,   55,   56,   57,  140,  141,  142,
      143,  144,  145,  146,  146,  147,  146,  146,  148,  149,
      150,  151,  152,  146,  153,  154,  155,  156,  157,  158,
      159,  146,  146,  160,  140,  141,  142,  143,  144,  145,

      146,  146,  147,  146,  146,  148,  149,  150,  151,  152,
      146,  153,  154,  155,  156,  157,  158,  159,  146,   91,
       40,   88,  162, 2375,   89,   40,   84,   40, 2014,  237,
      163,  966,  164,  467,  165,  519,  166,  167,  238,  399,
      399, 1576,  215,  239,  215,  692,  459,  215,   88,  162,
      399,   89,  901,  273,  961,   88,  237,  163,   89,  164,
      467,  165,  519,  166,  167,  238,  399,  399,  168, 2409,
      239,   91,  170,  459,  293,  294,  171,  399, 1503,  274,
      275,  526,   88, 1505,  901,   89,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  168,  170,  298,  298,  298,

      171,  293,  294,  215,  536,   91,  274,  275,  526, 1502,
      172,  172,  172,  172,  172,  172,  172,  172,  172, 1504,
      315,  523,  315,  295,  296,  173, 2847,  618,  276,  277,
      316,  536, 1167,  184,  215,  185,  309,  310,  186,  184,
      189,  185,  190, 2016,  186,  191,  318, 1502,  523,  173,
      195,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      259, 1576,  521,  309,  310,  260, 1502,  197,  261,  215,
      262,  198,  312, 1502,  324,  263,  199,  266,  267,  581,
      589,  590,  200,  215,  268,  311,  312,  259,  269,  521,
      201,  315,  260,  315,  197,  261,  215,  262,  198,  230,

      325,  316,  263,  199,  266,  267,  581,  589,  590,  200,
      220,  268,  527,  231, 2180,  269,  232,  318,  189,  284,
      190,  517,  312,  191,  215,  234,  230,  184,  296,  185,
      249,  352,  186,  221,  463,  464, 1579,  966,  288,  527,
      231,  222,  518,  232,  215,  324,  284,  223,  517,  251,
      224,  227,  225,  297,  522,  226,  215,  249,  352,  215,
      221,  277,  215,  229,  285,  288,  215, 2847,  222,  518,
      184,  325,  185,  215,  223,  186,  251,  224,  227,  225,
      297,  522,  226,  252,  315, 1068,  315,  966,  525,  524,
      229,  285, 1577,  277,  316,  315,  215,  315,  397,  397,

      397,  215,  315,  961,  315,  316,  253,  534,  398,  901,
      318, 1578,  316,  254,  255,  525,  524,  528,  895,  215,
      256,  318, 1779,  257,  400,  215,  326,  348,  318,  315,
      258,  315,  215,  253,  534,  350,  327, 1844,  324,  316,
      254,  255,  349,  351,  528,  540,  535,  256, 1181,  324,
      257, 1167,  405,  326,  348,  318,  324,  258,  315,  215,
      315, 1576,  350,  327,  325, 1576,  539,  215,  316,  349,
      351,  359,  540,  535, 1779,  325, 1139,  360,  406,  215,
      803,  803,  325,  324,  318, 2023, 1779,  533,  319,  320,
      529, 1780,  315,  539,  315,  227,  215,  461,  359,  321,

      215,  530,  316,  322,  360,  323, 1845,  229,  541,  325,
      215,  215,  324,  215,  533,  319,  320,  529,  318,  804,
      215,  315,  227,  315,  461,  364,  321,  542,  530,  215,
      322,  316,  323,  365,  229,  541,  215,  366,  325,  315,
      184,  315,  185, 1780,  545,  186,  324,  318,  215,  316,
      215,  215,  364,  361,  542, 1780,  397,  397,  397,  215,
      365, 1121, 1779,  362,  366,  318,  398,  328,  537,  363,
      329,  545,  325,  215,  315,  324,  315,  546,  330,  538,
      361,  331,  400, 1844,  316,  543,  215,  332,  437,  215,
      362,  544,  215,  324,  328,  537,  363,  329,  215,  552,

      318,  325,  389,  215,  546,  330,  538,  315,  331,  315,
      438,  595,  543,  558,  332,  437,  390,  316,  544,  325,
      315, 2847,  315,  370,  553,  220,  552, 1844,  324,  389,
      316, 2024,  315,  318,  315,  215,  406,  554,  595,  371,
      558,  557,  316,  390,  565,  215,  318,  215,  333,  215,
      215,  553, 1845,  560,  325,  559,  334,  215,  318, 2078,
     1844,  372,  335, 2378,  554,  336,  371,  337,  557,  215,
      338,  565,  564,  215,  324,  333,  215,  367, 1103,  368,
      560,  369,  559,  334, 2489,  895,  324,  325,  567,  335,
      215,  572,  336,  576,  337,  215, 2079,  338,  215,  564,

      325,  315,  188,  315,  367,  189,  368,  315,  369,  315,
     2203,  316,  325, 2511,  961,  567, 2210,  316,  572,  569,
      576,  397,  397,  397,  397,  397,  397,  318,  215, 1845,
      215,  398, 2024,  318,  398,  491,  215,  492,  277,  493,
      339,  494,  340,  495,  215,  341,  569,  400, 2492,  395,
      400,  215,  342,  574,  215,  324,  566,  425,  215,  568,
      215,  324,  491,  407,  492,  426,  493,  339,  494,  340,
      495,  561,  341,  408,  215,  405,  395,  215,  405,  342,
      574,  325,  343,  566,  425,  317,  568,  325,  215,  296,
      407,  562,  426,  317,  573,  312,  344,  215,  561,  345,

      408,  406,  346,  215,  406,  397,  397,  397,  347,  343,
      570, 1082,  317,  577,  215,  398,  571, 2493,  562,  215,
      317,  573,  399,  344,  399, 1068,  345,  597,  215,  346,
     2847,  400, 1021,  409,  215,  598,  431,  570,  399,  399,
      577,  436,  432,  571,  399,  966,  575,  410,  405,  399,
      405,  399,  584,  317,  597,  215,  353,  354,  277,  405,
      409,  355,  598,  431,  215,  399,  399,  317,  436,  432,
      356,  399,  357,  575,  410,  358,  692,  578,  961,  584,
      317,  453,  901,  353,  354,  406, 2490, 2378,  355, 2628,
      397,  397,  397,  555,  317,  454,  582,  356,  399,  357,

      398,  399,  358,  315,  578,  315,  556,  405,  453,  215,
      618,  583,  895,  316,  587,  215,  400,  277,  312,  373,
      555,  588,  454,  582,  215,  399,  608,  215,  399,  318,
      215,  374,  430,  556,  249,  592,  537,  465,  583,  375,
     2635,  587,  250, 2411,  405,  466,  599,  585,  588,  586,
      376,  377,  600,  251,  215,  584, 2024,  324,  374,  430,
      215,  249,  592,  537,  465,  885,  375,  215,  277,  250,
      406,  883,  466,  599,  585,  296,  586,  376,  377,  600,
      251,  601,  584,  325,  252,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  497,  498,  499,  500,  500,  500,

      500,  500,  500,  604,  594,  591, 2639,  378,  601,  605,
      709,  184, 2079,  185,  379,  380,  186,  596,  602,  296,
      547,  381,  603,  877,  382,  548,  317,  876,  530,  317,
      604,  383,  591,  501,  378,  549,  605,  709,  550,  551,
      215,  379,  380,  606,  596,  602,  215,  547,  381,  603,
      296,  382,  548,  317,  312,  530,  317, 2514,  383,  384,
      875,  315,  549,  315,  385,  550,  551,  386,  868,  387,
      606,  316,  317,  725,  388,  752,  184,  753,  185,  317,
     2643,  186,  315,  312,  315,  312,  384,  318,  186, 2688,
      183,  385,  316,  315,  386,  315,  387,  817,  277,  317,

      725,  388,  752,  316,  753,  580,  317,  315,  318,  315,
      515,  515,  515,  515,  515,  515,  515,  316,  215,  318,
      770,  770,  770,  482,  817,  483, 2515,  484,  749,  485,
      189,  486,  190,  318,  618,  191,  324,  399,  399,  530,
      611,  325,  391,  392,  399, 2512, 2411,  324,  399,  393,
      482,  215,  483,  394,  484,  749,  485, 2662,  486,  775,
      215,  324,  325, 2492,  399,  399,  530,  611,  277,  391,
      392,  399,  189,  325,  190,  399,  393,  191, 2514,  189,
      394,  190, 2702,  315,  191,  315, 2694,  325,  397,  397,
      397,  617,  618,  316,  858,  479,  479,  479,  398,  502,

      503,  503,  503,  503,  504,  504,  504,  504,  189,  318,
      190,  692, 2714,  191,  400, 2079,  810, 2698,  401,  506,
      507,  507,  507,  507,  508,  508,  508,  508,  615,  402,
      807,  215, 2493,  403,  750,  404,  901,  324,  505,  189,
      584,  190,  405,  810,  191,  401,  809, 2515,  215,  315,
      509,  315,  215,  691,  692,  615,  402,  807,  510,  316,
      403,  750,  404,  325,  798,  296,  966,  584,  406,  397,
      397,  397,  215,  809,  220,  318,  480,  509,  215,  398,
      612,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      800,  776,  776,  776,  776,  400,  312,  411,  836,  315,

     2847,  315, 2847,  324,  801,  412,  215,  612,  831,  316,
     2847,  413,  818,  215,  414,  816,  415,  800,  811,  416,
      512,  215,  215,  405,  411,  318, 2847, 2642,  215,  325,
      778,  829,  412,  782,  782,  782,  782,  782,  413,  818,
      215,  414,  816,  415, 2378,  811,  416,  830,  812,  406,
      397,  397,  397,  324, 2847,  815,  215,  215,  829,  215,
      398,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      215,  315,  785,  315,  830,  812,  400,  215,  215,  325,
     2847,  316,  815, 2648,  315,  315,  315,  315,  315,  417,
      315,  418,  821,  822,  316,  316,  618,  318,  316,  808,

      215,  419,  613, 2661,  405,  776,  776,  776,  776,  776,
      318,  318, 2379, 2024,  318, 2667,  417,  315,  418,  315,
      822,  825,  824,  614,  215,  324,  619,  316,  419,  613,
      406,  397,  397,  397,  813,  620,  215,  215,  324,  324,
      777,  398,  324,  318,  315,  215,  315,  814,  825,  824,
      614,  325, 1780,  619,  316,  215,  621,  400,  215,  420,
      832,  813,  620,  622,  325,  325,  215,  315,  325,  315,
      318,  324,  692,  421,  814,  215,  422,  316,  315,  423,
      315,  215,  623,  621, 1845,  424,  420,  832,  316,  315,
      622,  315,  315,  318,  315, 2574, 2492,  325,  324,  316,

      421,  856,  316,  422,  318,  215,  423,  826,  624,  623,
      847,  406,  397,  397,  397,  318,  685,  823,  318,  215,
      684,  324,  398,  819,  325,  215,  215,  820,  856,  315,
      215,  315,  324,  626,  826,  624,  625,  847,  400,  316,
      863,  627,  610,  324,  823,  215,  324,  325,  427,  215,
      819,  315,  827,  315,  820,  318,  609,  428,  325,  215,
      626,  316,  429,  625,  779, 2493,  405,  863,  627,  325,
      838,  608,  325,  312,  399,  427,  315,  318,  315,  827,
      594, 2411,  215,  324,  428,  315,  316,  315,  399,  429,
      783,  689,  406,  399,  399,  316,  773,  838,  433,  296,

      405,  399,  318, 2378,  787,  324,  434,  399,  628,  325,
      435,  318,  315,  399,  315,  399,  281,  783,  689,  405,
      399,  399,  316,  773, 2847,  433,  315,  629,  315,  281,
      324,  325,  580,  434,  399,  628,  316,  435,  318,  324,
      399,  397,  397,  397,  277,  315,  828,  315,  833, 2412,
     2079,  398,  318,  215,  629,  316,  325,  215,  630,  791,
      791,  791,  791,  791,  215,  325,  324,  400,  215,  439,
      834,  318, 2024,  828,  215,  833,  631,  440,  835,  215,
      324,  315,  871,  315,  315,  630,  315,  632,  441,  837,
      215,  316,  325,  215,  316,  405,  439,  834,  795,  324,

      839,  841,  215,  631,  440,  835,  325,  318, 2701,  871,
      318,  215,  803,  803,  632,  441,  837,  633,  215,  842,
      840,  406,  252,  634,  215,  325,  215,  839,  841,  315,
      215,  315,  397,  397,  397,  324,  843, 2847,  324,  316,
      734,  215,  398,  215,  633,  442,  842,  840,  864,  215,
      634,  804,  443,  444,  399,  318,  215,  399,  400,  445,
      735,  325,  446,  843,  325,  399,  405,  734,  315,  447,
      315,  405,  442,  513,  635,  864,  788,  901,  316,  443,
      444,  399,  477,  324,  399,  476,  445,  735,  277,  446,
     1505,  901,  399,  315,  318,  315,  447,  397,  397,  397,

      844,  635,  792,  316,  315,  848,  315,  398,  793,  325,
      636,  215,  406,  850,  316,  315,  797,  315,  215,  318,
     1579,  966,  324,  400,  475,  316,  215,  844,  448,  792,
      318, 1779,  848,  449,  637,  793,  450,  636,  451,  854,
      850,  318, 2847,  452, 2847,  866,  215,  324,  325,  849,
      299,  405, 2847,  278,  315,  448,  315,  189,  324,  190,
      449,  637,  191,  450,  316,  451,  854,  845, 2847,  324,
      452,  215,  866,  325,  638,  278,  849,  406,  399,  846,
      318, 2492,  455,  456,  325,  215,  399,  281,  399,  457,
      882, 2411,  851,  458,  845,  325, 2847,  315,  277,  315,

     1780,  638,  315,  852,  315,  399,  846,  316,  324,  455,
      456,  278,  316,  399,  215,  399,  457,  882,  853,  851,
      458,  220, 2847,  318,  278,  215,  215,  315,  318,  315,
      852,  215,  209,  315,  325,  315, 2713,  316,  639,  208,
      641,  855,  857,  316,  221,  853,  881,  884,  870,  640,
     2493,  324,  222,  318,  215,  215,  324,  859,  223,  318,
     2079,  224,  462,  225,  861,  639,  226,  641,  855,  857,
      215,  221,  215,  881,  884,  870,  640,  325,  296,  222,
      215,  324,  325,  215,  859,  223,  205,  324,  224,  462,
      225,  861,  204,  226,  468,  469,  469,  469,  469,  469,

      469,  469,  469,  469,  862,  966,  860,  325,  865,  869,
      872,  470,  203,  325,  315,  471,  315,  879,  399,  399,
      472,  215,  814,  886,  316,  399,  473,  215, 1844,  399,
      215,  862,  215,  860,  474,  865,  869,  872,  470,  873,
      318,  202,  471,  277,  879,  399,  399,  472,  878,  814,
      886,  215,  399,  473,  487,  642,  399,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  873,  194,  324,  887,
      296,  489,  888,  489,  889,  878,  193,  315,  315,  315,
      315,  489,  642,  296,  184,  192,  185,  316,  316,  186,
      754,  754,  489,  489,  325, 2514,  887, 1845,  489,  888,

      489,  889, 2847,  318,  318, 1950, 1950, 1950,  489,   84,
      644,  805,  805,  805,  805,  805,  805,  805,  643,  489,
      489,  195,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  324,  324,  315,  315,  315,  315,  644,  197,  890,
     1779,  891,  198,  316,  316,  643,  315,  199,  315,   84,
      806,  178,  315,  200,  315, 2649,  316,  325,  325,  318,
      318,  201,  316,  892, 2515,  197,  890, 1022,  891,  198,
      178,  315,  318,  315,  199,  645,  312,  646,  318,  215,
      200,  316,  315, 2847,  315, 1029, 2847,  324,  324, 2847,
      892,  647,  316,  315, 1022,  315, 2847,  318,  758,  758,

      324, 1050,  645,  316,  646,  315,  324,  315,  318, 1780,
      650, 2847, 1029,  325,  325,  316,  312, 2847,  647,  318,
      315, 2847,  315,  648, 2847,  324,  325, 1066, 1050,  649,
      316,  318,  325,  770,  770,  770,  324,  650,  315,  315,
      315,  315,  315,  315,  315,  315,  318,  324,  316,  316,
      648,  325,  316,  316, 1066, 1069,  649, 2596, 2514,  324,
     2847,  651,  325, 1081,  318,  318, 1051,  215,  318,  318,
      215,  874,  775,  325,  324, 2847, 2847, 1080, 2847,  315,
      652,  315, 1069, 2847,  843,  325, 2847, 1052,  651,  316,
     1081,  215,  324,  324, 1096,  215,  324,  324,  874, 2847,

      325,  215, 2847, 2847, 1080,  318, 2847,  652,  658,  399,
      399,  843, 2847, 1137, 1052,  315,  693,  315,  325,  325,
      399, 1096,  325,  325,  315,  316,  315, 2515,  779,  315,
     2847,  315, 2847,  324,  316,  658,  399,  399, 2847,  316,
     1137,  318, 2492,  693, 2155, 2155, 2155,  399,  659, 2847,
      318,  315,  653,  315,  783,  318, 2847,  654,  664,  325,
      773,  316,  315,  315,  315,  315,  277,  655,  787,  324,
      656,  657,  316,  316, 2847,  659, 1083,  318,  324,  653,
      315,  783,  315,  324,  654,  664, 1084,  773,  318,  318,
      316,  315,  660,  315,  655,  325, 2847,  656,  657,  215,

      315,  316,  315, 1083,  325,  324,  318,  215,  665,  325,
      316, 2493,  661, 1084, 1098, 2847,  324,  318,  315,  660,
      315,  662, 2847,  666, 1100,  663,  318,  315,  316,  315,
      798,  325,  215, 2847,  324,  665,  315,  316,  315,  661,
      667, 1098,  325,  325,  318,  324,  316,  215,  662,  668,
      666, 1100,  663,  318,  324,  669,  800,  802,  802,  315,
      325,  315,  318,  315, 1078,  315,  215,  667, 2847,  316,
     1065,  325,  324,  316, 2847,  670,  668, 2847, 1095,  671,
      325,  324,  669,  800,  315,  318,  315, 2847, 1097,  318,
      324, 1078, 1105, 1779,  316,  672, 1099, 2847,  325,  315,

      215,  315,  670, 2847,  673, 1095,  671,  325,  215,  316,
      318,  215, 2847,  324, 1104, 1097,  325,  324,  215, 1105,
      674, 2847,  672, 1099,  315,  318,  315, 1101, 1030, 1030,
      315,  673,  315, 2847,  316,  315, 2847,  315,  324,  325,
      316, 1104, 2847,  325, 2847,  316,  675,  674, 1334, 1334,
      318, 2847, 2847,  324, 1101,  315,  318,  315, 1120, 1125,
      676,  318, 1780, 2847,  325,  316,  315,  315,  315,  315,
      315,  678,  315,  675,  215,  677,  316,  316,  324,  325,
      316,  318,  215, 2847,  324, 1120, 1125,  676, 2847,  324,
     1058,  679,  318,  318, 2847, 2847,  318,  315,  678,  315,

     2847,  315,  677,  315,  325, 1779, 1119,  316, 2847,  324,
      325,  316,  681,  680, 1109,  325,  772,  682,  679,  215,
      324,  324,  773,  318,  324,  399,  399,  318, 2847, 1102,
      787, 2847,  399, 1119,  215,  325,  399,  686,  215,  681,
      680, 1109,  683,  772,  682, 2847,  325,  325, 2847,  773,
      325,  324,  399,  399, 2847,  324, 1102,  687, 1107,  399,
     2847,  399,  399,  399,  686,  397,  397,  397,  399,  683,
     2847, 1108,  399, 1106, 2024,  398,  215,  325,  688,  215,
      215,  325, 1122, 1145,  687, 1107,  399,  399,  399,  399,
      215,  400,  215,  399, 1165,  399, 1134,  695, 1108,  399,

     1106,  776,  776,  776,  776,  688, 2847, 2847, 2847, 1122,
     1145, 2847,  694,  399,  399, 2847, 2847, 1168,  215,  405,
      399, 1165, 2847, 1134,  695, 2847,  782,  782,  782,  782,
      782, 1135, 2847,  397,  397,  397,  397,  397,  397,  694,
      778,  399,  399,  398, 1168,  406,  398,  296,  399,  215,
      399,  399,  399, 2847,  397,  397,  397,  700, 1135,  400,
     2847,  399,  400, 2492,  398,  785, 2847, 2847,  399,  399,
     1167,  397,  397,  397,  696,  399, 2847,  399,  399,  399,
      400,  398, 1143,  697,  700, 1169, 2847,  405,  399,  315,
      405,  315,  397,  397,  397,  698, 1123,  400, 2847,  316,

      215,  696,  398,  215,  397,  397,  397, 2847,  405, 1143,
      697, 2847, 1169,  406,  398,  318,  406, 2847,  400,  397,
      397,  397,  698, 1123, 2847,  405,  399,  399, 2847,  398,
      400, 2650, 2493,  399,  406, 1124,  699,  701, 1138, 2548,
     2548, 2548,  215,  324,  702,  400,  405, 1170,  399,  399,
     2847,  406, 2514,  399,  399,  703, 1136, 2847,  405,  399,
      399, 1126, 1124,  699,  701, 1138,  399,  704,  215,  325,
     2847,  702,  406,  399, 1170,  399,  399,  399, 2847,  397,
      397,  397,  703, 1136,  406, 2847,  399, 2847, 1126,  398,
      277, 2847, 1166,  399,  704, 2847,  397,  397,  397,  406,

      399,  399,  399, 1844,  399,  400,  398,  277,  707, 2704,
     1779, 2847,  399,  791,  791,  791,  791,  791,  705, 1166,
     2549, 2515,  400,  776,  776,  776,  776,  776,  399,  399,
      397,  397,  397,  405, 1175,  707,  397,  397,  397,  399,
      398,  706, 2847,  788,  296,  705,  398,  397,  397,  397,
      405, 1148,  795,  399,  710, 1176,  400,  398,  777,  406,
      399, 1175,  400, 2847,  399,  711,  215, 2847,  706,  792,
     1144,  708, 1845,  400, 1844,  793,  406,  215, 1148, 2705,
      399,  710, 1176,  797,  405, 1177, 2847,  399,  712, 2668,
      405,  399,  711,  397,  397,  397,  792, 1144,  708, 1146,

     2847,  405,  793,  398, 1178, 1147,  399,  399,  215, 2847,
      406, 1179, 1177,  714,  215,  712,  406,  399, 2847,  400,
      397,  397,  397, 1180, 2847,  713, 1146,  406, 1844, 1156,
      398, 1178, 1147,  399,  399,  397,  397,  397, 1179, 1157,
      714, 1332, 1333, 1845,  399,  398,  400,  405, 2847, 2847,
     1180,  715,  713,  397,  397,  397, 1156,  397,  397,  397,
     2847,  400, 2847,  398,  312, 1342, 1157,  398, 1332, 1333,
      397,  397,  397,  406,  405,  312,  716, 2514,  715,  400,
      398, 2847,  717,  400,  397,  397,  397, 1370, 2847,  405,
     1378,  792,  718,  210,  398, 2847,  400, 2079,  210,  210,

      406,  399,  399,  716, 1062, 1344, 2847,  405,  719,  717,
      400,  405,  399, 1372, 2847,  406, 2847, 1378,  792,  718,
      210,  397,  397,  397,  405,  210,  210, 1373,  399,  399,
      792,  398, 2847,  406, 2847,  719,  773,  406,  405,  399,
     1372,  397,  397,  397,  797, 2669, 2515,  400, 2847, 2847,
      406,  398, 2847, 2847,  726, 2716, 1844,  792, 2847,  397,
      397,  397, 1377,  773,  406,  720,  210,  400, 2847,  398,
      721, 2847,  399,  399, 2847,  405,  397,  397,  397,  399,
      722,  726,  727,  723,  724,  400,  398, 2847, 1194, 1377,
     1194,  728,  720,  210, 2847,  405, 2847,  721, 1195,  399,

      399,  406,  400, 2847,  729,  210,  399,  722,  731,  727,
      723,  724, 2847,  405, 1196,  399,  399, 2847,  728, 2847,
     1140,  406,  399, 1141, 2847, 2717,  730, 1400, 2847, 2847,
      405,  729,  210, 1142,  210,  731,  397,  397,  397,  406,
     2847, 2847,  399,  399,  399,  737,  398, 1140, 1382,  399,
     1141,  399,  210,  730, 1400,  399,  406,  397,  397,  397,
     1142,  210,  400,  397,  397,  397,  210,  398, 1197,  618,
     2847,  399,  737,  398,  210, 1382,  732, 1384,  399,  210,
      399,  739,  399,  400,  397,  397,  397,  399,  733,  400,
      405,  399, 2847,  210,  398,  397,  397,  397, 2439, 2439,

     2439,  210, 2440,  732, 1384,  398,  736,  399,  739, 2847,
      400,  405,  399,  741,  399,  733,  406,  405,  399,  399,
      210,  400, 2847,  399, 1416,  738,  805,  805,  805,  805,
      805,  805,  805,  736,  397,  397,  397,  406,  405,  399,
      741, 2847,  740,  406,  398, 2847,  399,  210, 2847,  405,
      399, 1416,  738, 2847, 1417,  399,  743,  210,  210, 1386,
      400, 2847,  399, 2847,  406,  806,  399,  399,  744,  740,
      397,  397,  397, 2847,  399,  406, 2847, 2847,  399,  742,
      398, 1417,  399,  743,  210,  210, 1386, 2847,  405,  399,
     1269, 1269, 1269,  399,  399,  744,  400,  397,  397,  397,

     1270,  399,  397,  397,  397,  399,  742,  398,  397,  397,
      397, 2847,  398, 2847,  406, 2847, 1271,  745,  398,  397,
      397,  397, 2847,  400,  405, 2847, 1058, 2847,  400,  398,
     2680, 2680, 2680, 2847,  400,  805,  805,  805,  805,  805,
      805,  805,  746, 2847,  745,  400, 2847, 1329, 1391,  747,
      406,  405,  772,  748, 1357, 2847,  405, 1330,  773,  210,
      773, 2847,  405, 2439, 2439, 2439,  787, 2440, 1358,  746,
     1272,  692, 2847,  405, 1329, 1391,  747,  406, 2847,  772,
      748, 1357,  406, 2847, 1330,  773,  210,  773,  406,  751,
      751,  751,  751,  751,  751,  751,  751,  751, 2847,  406,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  497,  498,  499,
      500,  500,  500,  500,  500,  500,  502,  503,  503,  503,
      503,  504,  504,  504,  504,  798, 2847, 2847,  757,  759,
      759,  759,  759,  759,  759,  759,  759,  759, 1351, 1351,
     1351, 1351, 1351,  210, 1414,  760,  761,  210,  210,  762,
     2847,  800, 2847,  315,  763,  315, 2847,  315, 2847,  315,
      764, 2847, 2847,  316, 2847, 1344, 2847,  316,  765, 2847,
      210, 1414,  760,  761,  210,  210,  762, 1354,  800,  318,

     2847,  763, 2847,  318, 2847,  899, 2847,  764,  766,  767,
      768,  769,  770,  770,  770,  770,  770,  770,  506,  507,
      507,  507,  507,  508,  508,  508,  508,  898, 1406,  771,
     2847,  324,  899,  210,  772, 1402, 2847,  315,  210,  315,
      773, 2847, 2847, 2548, 2548, 2548, 2847,  316,  774, 2727,
     2727, 2727, 2847,  325, 2847, 1406,  771,  325, 2847, 2847,
      210,  772, 1402,  318, 2847,  210, 2847,  773,  779,  780,
      781,  781,  781,  781,  782,  782,  782,  782,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  315,  210,  315,
     2847,  324, 2847,  315,  783,  315, 2847,  316, 2847, 2847,

      773, 2847, 2847,  316, 2847, 2847, 2847, 2847,  784, 2847,
     2847, 2847,  315,  318,  315,  210,  315,  325,  315,  318,
     2847,  783,  316,  896, 2549,  903,  316,  773,  788,  789,
      790,  790,  790,  790,  791,  791,  791,  791,  318, 2847,
     2847,  324,  318, 2847, 1403, 2847,  315,  324,  315, 2847,
      896, 1404,  903,  897,  792,  902,  316, 2847, 2847,  315,
      793,  315,  210, 2847, 2847, 2847,  324,  325,  794,  316,
      324, 1403,  318,  325, 2847, 2847,  904, 2847, 1404, 2847,
      897,  792,  902, 2847,  315,  318,  315,  793,  315,  210,
      315,  905,  325, 2847,  316,  315,  325,  315,  316,  315,

      324,  315,  315,  904,  315,  316,  315,  210,  315,  316,
      318, 2847,  316,  324,  318, 2847,  316,  906,  905, 2847,
      908,  318, 2847, 2847, 2847,  318,  325, 1385,  318, 2847,
      907, 2847,  318, 2847,  210,  910, 1407, 2847,  324,  325,
      210, 2847,  324, 2847,  906,  210,  909,  908,  315,  324,
      315,  911, 2847,  324, 1385, 2847,  324,  907,  316,  315,
      324,  315,  910, 1407,  325, 1452, 2847,  210,  325,  316,
     1451, 2847,  210,  909,  318,  325, 2847, 2847,  911,  325,
      912, 2847,  325, 1383,  913,  318,  325, 2847,  315,  315,
      315,  315, 1452,  315,  315,  315,  315, 1451,  316,  316,

      210, 2847,  324,  316,  316, 2847,  315,  912,  315, 2847,
     1383,  913,  277,  914,  318,  318,  316,  277, 2847,  318,
      318, 2847, 2847,  315,  315,  315,  315,  210,  325,  210,
     2847, 1415,  318,  316,  316,  315,  915,  315, 2847,  325,
      916, 2847,  324,  324,  315,  316,  315,  324,  324,  318,
      318, 2847, 2847,  918,  316,  315,  210,  315, 1415, 2847,
      324,  318, 2847,  915,  917,  316,  919,  916,  325,  325,
      318, 2847, 1394,  325,  325, 2847, 2847,  324,  324, 1379,
      918,  318,  315, 1380,  315, 2847,  325,  210, 2847,  324,
     2847,  917,  316,  919, 2847,  315,  210,  315,  324, 1394,

     2847, 1381,  920,  325,  325,  316, 1379,  210,  318,  324,
     1380,  210,  921, 1440,  210,  325, 2847,  315, 2847,  315,
      315,  318,  315,  210,  325, 2847, 2847,  316, 1381,  920,
      316,  315, 2847,  315,  210,  325,  324, 2847,  210,  921,
     1440,  316,  922,  318, 2847,  923,  318, 2847, 2847,  324,
      315,  315,  315,  315,  315, 1418,  315,  318, 2847,  210,
      316,  316,  325, 2847,  316,  924, 1401, 2847,  315,  922,
      315,  324,  923, 2847,  324,  325,  318,  318,  316,  210,
      318,  315, 1418,  315, 1062,  324,  210, 2847,  315, 2847,
      315,  316,  924, 1401,  318, 2847, 2847,  325,  316,  315,

      325,  315, 2847, 2847,  324,  925,  210,  318,  324,  316,
      792,  325, 2847,  315,  318,  315,  773, 1399, 1454,  928,
      926, 2847,  324,  316,  797,  318,  315,  929,  315,  210,
      325,  325, 2847,  927,  325,  324,  316,  792, 2847,  318,
     2847, 2847,  324,  773, 1399, 1454,  928,  926,  325,  315,
     1455,  315,  318,  324,  929,  315,  210,  315,  931,  316,
      927,  325,  315, 2847,  315,  316, 2847,  930,  325, 2339,
     2339, 2339,  316, 2340, 2847,  318, 2847, 1455, 1456,  325,
      324,  318, 2847, 2847, 1392,  931,  936, 2847,  318, 2847,
      933,  932,  934,  325,  315, 2847,  315,  315,  315,  315,

      315,  210, 2847,  324,  316, 1456,  325,  316,  316,  324,
      935, 1392,  315,  936,  315, 2847,  324,  933,  932,  934,
      318, 2847,  316,  318,  318, 2847,  937, 2847,  210,  325,
     2847, 1470, 2847, 2847, 2847,  325, 1431,  935,  318, 2847,
     2847,  939,  325, 1405,  938,  210, 2847,  315,  324,  315,
      277,  324,  324,  937,  315, 1471,  315,  316, 1470,  315,
      210,  315, 2847, 1431,  316,  315,  324,  315,  939,  316,
     1405,  938,  210,  318,  325,  316, 2847,  325,  325, 2847,
      318, 2847, 1471,  940, 1171,  318, 2847,  210,  315, 1172,
      315,  318,  325, 2847, 1472,  941, 1408,  942,  316, 1173,

     2847,  324,  315, 1174,  315,  315,  943,  315,  324,  210,
      940, 1171,  316,  324,  318,  316, 1172, 1473, 2847,  324,
      944, 1472,  941, 1408,  942, 2847, 1173,  325,  318, 2847,
     1174,  318, 2847,  943,  325, 2847,  210, 2847,  315,  325,
      315, 2847,  324, 2847, 1473,  325,  945,  944,  316, 2847,
     2847,  315,  315,  315,  315,  315,  324,  315, 2847,  324,
     2847,  316,  316, 1409,  318,  316, 2847, 1474,  325, 2847,
      946, 1387, 1388,  945,  315, 2847,  315,  318,  318, 2847,
      210,  318,  325,  947,  316,  325,  315, 1439,  315, 1389,
     1409, 2847,  324,  948, 1474, 2847,  316,  946,  210, 2847,

      318, 2847,  949, 1390, 2847,  324,  324,  210, 2847,  324,
      947,  315,  318,  315, 1439,  950, 1389,  315,  325,  315,
      948,  316,  951, 2847,  315,  210,  315,  316,  324,  949,
     1390,  325,  325, 2847,  316,  325,  315,  318,  315, 2847,
      324, 2847,  950,  318, 2847, 1475,  316, 1453, 2847,  951,
      318,  315,  952,  315,  325,  954, 2847,  315,  315,  315,
      315,  316,  318, 2847, 2847,  324,  325,  316,  316, 1348,
     2847,  953, 1475, 2847, 1453,  955, 2847,  318,  324,  952,
     2847, 2847,  954,  318,  318, 2847,  956, 1442,  957,  277,
      324,  325, 2847,  792, 1476, 1352,  210,  325,  315, 1368,

      315,  773,  955,  958,  325,  324, 2847, 1369,  316,  787,
     2847,  324,  324,  956, 1442,  957,  325,  397,  397,  397,
      792, 1476, 1352,  210,  318, 2847, 1368,  398,  773, 1477,
      958,  325,  397,  397,  397, 2847, 2847,  325,  325,  959,
     2847, 2847,  398,  400,  397,  397,  397,  397,  397,  397,
     2847, 2847,  324,  962,  398, 2847, 1477,  398,  400, 2847,
     1478, 2847,  397,  397,  397, 1457,  959,  397,  397,  397,
      400,  405,  398,  400, 2847,  964,  210,  398,  325, 2847,
      962,  397,  397,  397, 2847, 1359,  405, 1478,  400, 2847,
     2847,  398, 1457,  400,  397,  397,  397,  406,  963, 2847,

     2847,  405,  964,  210,  398, 2847,  967,  400,  397,  397,
      397,  792,  406,  968, 2847, 2847,  978, 1363,  398, 1481,
      400,  405, 1411, 2847,  406,  797,  969,  406, 1362, 1362,
     1362, 1362, 1362,  967,  400,  405, 2847, 2847,  792,  210,
      968,  970,  406, 2847, 1363, 1410, 1481,  406,  405, 1411,
      397,  397,  397,  969,  971, 1167, 1479, 2847,  210, 2847,
      398,  406,  405,  397,  397,  397,  210, 1365,  970,  397,
      397,  397, 1410,  398,  406, 2847,  400, 2847, 1483,  398,
     1419,  971,  972, 1479, 1420,  210, 1430,  210,  406,  400,
      397,  397,  397,  210, 1421,  400,  397,  397,  397,  210,

      398, 2847,  974, 2847,  405, 1483,  398, 1419,  296,  972,
      973, 1420, 2847, 1430,  210, 2847,  400,  405, 2847, 1393,
      210, 1421,  400,  405, 2847, 2847,  210, 1443,  976,  974,
      406, 2847,  977, 1484, 2847,  975,  210,  973,  397,  397,
      397, 1485,  210,  406,  405, 2847, 1393, 2847,  398,  406,
      405,  397,  397,  397, 1443,  976,  397,  397,  397,  977,
     1484,  398,  975,  210,  400, 2847,  398, 2847, 1485,  210,
      406, 2847, 2847,  397,  397,  397,  406,  400,  397,  397,
      397, 2847,  400,  398, 2847, 2847, 2847, 2847,  398, 2847,
      210, 2847,  405,  397,  397,  397, 1445, 2847,  979,  400,

     2847, 1446,  980,  398,  400,  405, 2847,  210,  982, 2847,
      405,  397,  397,  397,  397,  397,  397,  210,  406,  400,
     2847,  398, 2847, 1445,  398,  979, 2847,  405, 1446,  980,
     1480,  406,  405,  981,  210,  982,  406,  400, 2847, 1449,
      400, 2847,  983, 2847,  397,  397,  397,  405, 2847,  397,
      397,  397,  210,  406,  398, 2847, 2847, 1480,  406,  398,
      981,  984, 1486, 2847, 2847,  405, 1449, 2847,  405,  983,
      400, 2847,  296,  406, 2847,  400,  397,  397,  397,  210,
      397,  397,  397,  397,  397,  397,  398, 1462,  984, 1486,
      398,  406, 1438,  398,  406,  210,  985, 2847,  405, 2847,

      210, 1426,  400,  405,  986,  210,  400, 2847, 1487,  400,
      397,  397,  397, 2847, 1462, 2847,  397,  397,  397, 1438,
      398, 2847,  210,  985,  406,  987,  398,  210, 1426,  406,
      405,  986,  210, 2847,  405, 1487,  400,  405, 2847,  397,
      397,  397,  400,  397,  397,  397, 2847, 2847, 1427,  398,
     2847, 2847,  987,  398, 1488, 2847,  406, 1428, 2847, 2847,
      406, 2847, 1429,  406,  988,  400,  397,  397,  397,  400,
      405, 2847,  397,  397,  397, 1427,  398,  990,  989, 2847,
     2847, 1488,  398, 2847, 1428, 1397, 1458, 1463,  210, 1429,
      406, 1398,  400,  405, 1489,  210,  406,  405,  400,  397,

      397,  397,  210,  991,  990,  989,  397,  397,  397,  398,
     1395,  992, 1397, 1458, 1463,  210,  398, 2847, 1398,  406,
      993, 1489,  210,  406, 1396,  400,  405,  210, 1422,  210,
      991,  994,  400,  397,  397,  397, 1423, 1395,  992,  397,
      397,  397, 2847,  398, 1469,  210,  406, 1424,  995,  398,
     1425, 1396,  406,  405,  210, 1422, 2847,  210,  994,  400,
      405,  996, 2847, 1423, 2847,  400,  397,  397,  397, 1447,
      998, 1469,  210,  210, 1424,  995,  398, 1425, 2847,  406,
     1444,  997, 1441,  210,  210,  210,  406,  405,  996,  397,
      397,  397,  400,  405, 2847, 2847, 1447,  998,  999,  398,

      210,  397,  397,  397,  397,  397,  397, 1444,  997, 1441,
      210,  398,  210,  406,  398,  400,  397,  397,  397,  406,
      405,  397,  397,  397, 1459,  999,  398,  400, 2847, 1450,
      400,  398, 2847,  210, 1641, 1643, 1000, 2847, 2847, 2847,
     1002,  210,  400,  405, 1001,  210,  406,  400, 2847, 1460,
      210, 1459, 1003, 1448, 2847,  405, 1450, 2847,  405, 1004,
      210, 1641, 1643, 1000,  397,  397,  397, 1002,  210,  406,
      405, 1001,  210, 2847,  398,  405, 1460,  210, 2847, 1003,
     1448,  406, 2847,  315,  406,  315, 1004,  397,  397,  397,
      400, 2847, 2847,  316, 2847, 2847,  406,  398,  397,  397,

      397,  406,  397,  397,  397, 1005, 2847, 2847,  398,  318,
     2847, 2847,  398,  400, 2847, 2847, 1663, 2847,  405, 1006,
     2847,  397,  397,  397,  400,  397,  397,  397,  400, 2847,
     1412,  398, 1005,  210, 1008,  398, 2847,  324, 1413, 1007,
     2847,  405, 2847, 1663,  406, 2847, 1006,  400,  397,  397,
      397,  400,  405, 1009, 1490, 2847,  405, 1412,  398, 2847,
      210, 1008, 2847,  325, 1432, 1413, 1007,  406, 1461, 2847,
     1433, 2847, 1011,  210,  400,  405, 2847,  210,  406,  405,
     1009, 1490,  406,  397,  397,  397,  397,  397,  397, 1010,
     2847, 1432, 2847,  398, 1467, 1461,  398, 1433,  210, 1011,

      210,  406,  405, 1482,  210,  406,  312, 2847, 2847,  400,
     2847, 2847,  400,  397,  397,  397, 1010,  397,  397,  397,
      210, 1467, 1013,  398, 1012,  210, 1464,  398,  406,  210,
     1482,  397,  397,  397,  397,  397,  397,  405, 1491,  400,
      405,  398, 2847,  400,  398,  210, 2847,  210, 1468, 1013,
     1642, 1012,  210, 1464, 1014, 2847,  210,  400, 2847,  210,
      400, 2847, 1016,  406, 1668, 1491,  406,  405,  397,  397,
      397, 1015,  210, 1017, 2847, 1468, 2847, 1642,  398,  210,
      312, 1014,  397,  397,  397,  405,  210, 2847,  405, 1016,
     2847, 1668,  398,  406,  400, 2847, 2847,  406, 1342,  315,

     1017,  315,  315, 1018,  315,  397,  397,  397,  400,  316,
     2847,  406,  316, 1019,  406,  398,  397,  397,  397, 1674,
     1675, 2847,  405, 1370,  792,  318,  398, 2847,  318, 2847,
     1018,  400, 2847,  210, 2847,  315,  405,  315, 1466, 1465,
     1019, 1183,  400, 2847,  210,  316, 1674, 1675,  406, 1372,
     1020,  792, 2847,  324, 1192, 2847,  324, 2847, 2847,  405,
      210,  318,  406, 1662, 2847, 1466, 1465, 2847, 1183, 2847,
      405,  210, 2625, 2625, 2625, 2847, 1372, 1020, 2847,  325,
     1676, 1192,  325, 2847, 1348,  406, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 2847,  406, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1434, 1676, 2847, 2847,
     1352, 1435, 1357, 1024, 1436,  325,  773, 1025,  773, 1678,
      210, 1437, 1026,  210,  787, 1194, 1358, 1194, 1027, 2847,
     2847, 2847, 2847, 1434, 2847, 1195, 1028, 1352, 1435, 1357,
     1024, 1436, 2847,  773, 1025,  773, 1678,  210, 1437, 1026,
      210, 1196, 2847, 2626, 2847, 1027, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 2847, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1036, 2847, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037,  757,  759,  759,  759,  759,

      759,  759,  759,  759,  759, 1197, 1502, 1351, 1351, 1351,
     1351, 1351,  760,  761, 1035, 1683,  762, 2847,  397,  397,
      397,  763,  210, 2847, 1269, 1269, 1269,  764,  398, 2847,
     2625, 2625, 2625, 2847, 1270,  765, 2847, 2847, 2847,  760,
      761, 2847, 1683,  762,  400, 2847, 1354, 2847,  763,  210,
     1271, 2847, 2847, 2847,  764, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043,  759,  759,  759,  759,  759,  759,  759,  759,
      759, 2847, 2847, 2847, 1039, 1041, 2847, 2847,  406, 2847,

     2847, 2847, 2847, 1042, 1272, 1576, 1362, 1362, 1362, 1362,
     1362, 2626, 1044, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1041,  766,  767,  768,  769,  770,  770,  770,
      770,  770,  770, 1046, 1047, 1047, 1047, 1047, 1048, 1048,
     1048, 1048,  772, 1671,  771, 1365,  792, 1397,  773,  772,
      210, 1692, 1368, 1640,  210,  773, 1659, 2847, 2847, 2847,
     1369, 2847, 2847,  774, 2847, 2847, 2847, 2847, 2847,  772,
     1671,  771, 1049,  792, 1397,  773,  772,  210, 1692, 1368,
     1640,  210,  773, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,

     1043,  767,  768,  769,  770,  770,  770,  770,  770,  770,
     2847, 2847, 2847, 2847, 1050, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 1042, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 1044,  770,  770,  770,  770,  770,  770,  770,  770,
      770, 1050,  770,  770,  770,  770,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  779,
      780,  781,  781,  781,  781,  782,  782,  782,  782, 1054,
     1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056,  399,  210,
     1681, 2847,  792,  399, 1669,  783, 1635,  210,  773, 1666,

      210,  773, 1667,  399,  210,  210, 1665,  210, 1677,  784,
     1050, 2847, 2847, 2847, 2847,  399,  210, 1681, 1057,  792,
      399, 1669,  783, 1635,  210,  773, 1666,  210,  773, 1667,
      399,  210,  210, 2847,  210, 1677, 2847, 1050,  780,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  786,  786,  786,  786,
      786,  786,  786,  786,  786, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059,  788,  789,  790,  790,  790,  790,
      791,  791,  791,  791, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060,  210, 1672, 1670, 2847, 1679, 1699,  210,

      792,  210,  210, 1691, 1680,  210,  793, 2847, 2847, 2847,
     2847, 2847, 2847, 2847,  794, 2847, 2847, 2847, 2847, 2847,
      210, 1672, 1670, 1061, 1679, 1699,  210,  792,  210,  210,
     1691, 1680,  210,  793,  789,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  796,  796,  796,  796,  796,  796,  796,  796,
      796, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
      799,  799,  799,  799,  799,  799,  799,  799,  799, 1070,
     1682, 1071, 1072, 1673,  210, 1684, 1073, 1697, 1695,  210,
     1074, 1075,  210, 2847,  210, 1076, 1077, 2847, 1685, 2847,

      210,  210, 2847, 1690, 2847, 2847, 1070, 1682, 1071, 1072,
     1673,  210, 1684, 1073, 1697, 1695,  210, 1074, 1075,  210,
      210,  210, 1076, 1077, 1085, 1685, 1086,  210,  210, 1087,
     1690, 1693, 1088, 2847,  315, 2847,  315,  210,  210, 1089,
      210, 1090, 1091, 1092,  316, 1093, 1094,  210, 2847, 2847,
     2847, 1085,  315, 1086,  315, 2847, 1087, 1079, 1693, 1088,
      318, 2847,  316, 2847,  210,  210, 1089,  210, 1090, 1091,
     1092, 2847, 1093, 1094, 1110,  210, 1111, 1696,  318, 2847,
     1686, 1112,  210, 1687, 1113,  210, 2847,  315,  324,  315,
     1114, 1115, 1116, 1117, 2847, 1118, 2847,  316, 1359,  215,

     2847, 1110,  210, 1111, 1696, 2847,  324, 1686, 1112,  210,
     1687, 1113,  210,  318,  325, 2847, 2847, 1114, 1115, 1116,
     1117, 1688, 1118, 1127,  792, 1128, 2847, 1129, 1198, 1130,
     1363, 1131,  325,  315, 1689,  315, 1694, 1132,  797,  210,
     2847,  324, 1133,  316,  210, 2847,  210, 2847, 1688, 2847,
     1127,  792, 1128, 1700, 1129, 1198, 1130, 1363, 1131,  318,
     2847, 1689, 2847, 1694, 1132,  210,  210,  325,  210, 1133,
     1149,  210, 1150,  210, 1151, 2847, 1152, 1718, 1153, 1701,
     1700,  315,  210,  315, 1154,  210, 2847,  324,  315, 1155,
      315,  316,  210,  210, 2847,  210, 2847, 1149,  316, 1150,

      315, 1151,  315, 1152, 1718, 1153, 1701,  318, 2847,  210,
      316, 1154,  210,  325,  318, 2847, 1155, 1158, 1698, 1159,
      210, 1160,  210, 1161, 1199, 1162,  318,  315, 1200,  315,
      210, 1163, 1702, 2847, 2847,  324, 1164,  316,  210, 2847,
     1703, 2847,  324, 2847, 1158, 1698, 1159, 2847, 1160,  210,
     1161, 1199, 1162,  318, 1201, 1200, 1733,  210, 1163, 1702,
      315,  325,  315, 1164, 2847,  210, 2847, 1703,  325, 2847,
      316, 1708, 1704, 2847, 2847,  315,  210,  315, 2847, 2847,
      325,  324, 2847, 1733,  210,  316,  318,  315, 2847,  315,
     2847, 2847,  210, 1184, 1706, 1185, 1186,  316, 1708, 1704,

     1187,  318, 2847,  210, 1188, 1189, 1202,  325, 1734, 1190,
     1191,  210, 1705,  318,  324,  210, 2847, 2847, 2847,  210,
     1184, 1706, 1185, 1186,  315, 2847,  315, 1187,  315,  324,
      315, 1188, 1189, 1202,  316, 1734, 1190, 1191,  316, 1705,
      325,  324,  210,  315, 2847,  315,  315, 2847,  315, 1709,
      318, 2847,  210,  316,  318,  325,  316, 1203, 2847, 2847,
      315, 1735,  315,  315,  315,  315,  315,  325, 2847,  318,
      316, 1713,  318,  316,  316, 1214, 1709, 2847,  324,  210,
     2847, 2847,  324, 2847, 1203,  210,  318, 2847, 1735,  318,
      318, 2847, 2847,  315, 1216,  315, 2847,  324, 1713, 2847,

      324,  210, 1214,  316,  325, 2847, 2847, 2847,  325, 2847,
     1215, 2847,  210, 2847,  324, 2847, 2847,  324,  324,  318,
      315, 1216,  315,  325, 2847, 2847,  325, 2847,  210, 1217,
      316, 2847,  315, 1204,  315, 1205, 1724, 1215, 1206,  210,
      325, 1207,  316,  325,  325, 2847,  318,  324, 1208, 1721,
     1209, 1210, 1211, 2847, 1212, 1213, 1217, 1730,  318, 2847,
     1204, 1218, 1205, 1724,  210, 1206,  210, 2847, 1207, 2847,
      315, 1219,  315,  325,  324, 1208, 1721, 1209, 1210, 1211,
      316, 1212, 1213, 1749, 1730, 2847,  324, 2847, 1218, 2847,
      277,  210,  315,  315,  315,  315,  318, 2847, 1219, 1710,

      325, 1220,  316,  316,  315, 2847,  315,  315, 1750,  315,
     1749, 2847,  325, 2847,  316, 1731,  210,  316,  318,  318,
     2847, 1707, 1739, 2847,  324,  210, 1710, 2847, 1220, 2847,
      318, 2847, 1221,  318,  315, 1750,  315, 2847, 1222,  210,
     2847, 2847, 1731,  210,  316, 2847,  324,  324, 1707, 1739,
      325, 2847,  210, 2847,  315, 2847,  315,  277, 1223, 1221,
      318,  324, 1225, 2847,  316, 1222,  210, 2847,  315,  315,
      315,  315,  325,  325, 1224, 2847, 1714, 2847,  316,  316,
      318, 2847, 1711, 2847,  325,  210,  210,  325,  324, 1225,
      315, 1751,  315, 1712,  318,  318, 2847, 1716,  210, 2847,

      316, 1224, 1226, 1714, 1227, 2847,  210, 2847,  324, 1711,
     1228, 1715,  210,  210,  325,  210,  318,  315, 1751,  315,
     1712, 2847,  324,  324, 1716,  210,  315,  316,  315, 1226,
      315, 1227,  315,  210,  325, 1229,  316, 1228, 1715, 2847,
      316, 2847,  210,  318,  324,  210,  399, 1720,  325,  325,
     2847, 1230,  318,  315, 1620,  315,  318, 2847, 2847,  315,
     2847,  315, 1229,  316, 1719,  399, 1717, 2847,  399,  316,
      325,  324,  210,  399, 1720,  210,  210, 1732, 1230,  318,
      324, 1620, 2847, 2847,  324,  318,  315,  210,  315, 1241,
     1736, 1719,  399, 1717, 1240,  399,  316,  325,  315,  315,

      315,  315,  210,  210, 1732, 2847,  325,  324,  316,  316,
      325, 1722,  318,  324,  210,  210, 1241, 1736, 2847, 2847,
      210, 1240, 1723, 1752,  318,  318,  277, 1231, 2847, 1232,
     2847, 2847, 1737,  325, 1233,  210, 1753, 1234, 1722,  325,
      324, 2847,  210, 1235, 1236, 1237, 1238,  210, 1239, 1723,
     1752, 2847,  324,  324, 1231,  315, 1232,  315,  315, 1737,
      315, 1233,  210, 1753, 1234,  316,  325,  315,  316,  315,
     1235, 1236, 1237, 1238, 2847, 1239, 2847,  316,  325,  325,
      315,  318,  315, 2847,  318,  315, 2847,  315, 2847,  315,
      316,  315, 1754,  318, 2847,  316, 1728, 2847,  315,  316,

      315,  210, 2847,  315, 1243,  315,  318, 2847,  316, 1242,
     1742,  318,  324,  316,  210,  318,  315, 1757,  315, 1754,
      315,  324,  315, 1728,  318, 2847,  316, 2847,  210,  318,
      316, 1243, 1244, 2847,  324,  325, 2847, 1742,  325,  324,
     1755,  210,  318,  324, 1757, 1245,  318,  325, 1758, 2847,
     1247, 1756,  324, 2847,  315, 1246,  315,  324, 1761, 1244,
      325,  315, 2847,  315,  316,  325,  315, 1755,  315,  325,
      324,  316, 1245, 2847,  324, 1758,  316, 1247,  325, 1741,
      318, 2847, 1246,  325, 2847, 1761, 1255,  318,  315,  210,
      315, 1727,  318, 2847,  210, 2847,  325, 2847,  316, 2847,

      325, 1725, 2847,  210, 2847, 2847, 1741, 2847,  324,  315,
     2847,  315, 1726, 1255,  318,  324,  210, 2847, 1727,  316,
      324,  210,  315, 2847,  315, 1248, 1729, 1249, 1725, 1250,
      210, 1251,  316, 1252,  325,  318, 2847,  210, 1738, 1253,
     2847,  325,  324,  210, 1254, 1256,  325, 2847,  318, 2847,
     2847, 2847, 1248, 1729, 1249,  210, 1250, 1740, 1251, 2847,
     1252, 2847, 2847,  324,  210, 1738, 1253, 1759,  325, 2847,
      210, 1254, 1256,  397,  397,  397,  324, 2847,  397,  397,
      397, 1762,  210,  398, 1740,  397,  397,  397,  398,  325,
     1079,  397,  397,  397, 1759,  398,  397,  397,  397,  400,

     2847,  398,  325, 2847,  400, 2847,  398, 2847, 1762,  296,
     1744,  400, 2847,  210,  210, 1258, 1743,  400, 2847, 1748,
     2847,  315,  400,  315,  210, 1760, 2847,  405, 2847, 2847,
     1267,  316,  405, 2847,  397,  397,  397, 1744, 2847,  405,
      210,  210, 1258, 1743,  398,  405, 1748,  318, 2847, 2847,
      405,  210, 1760,  406, 2847, 2847, 2847, 1267,  406, 2847,
      400, 2847, 1492, 2847, 2847,  406, 2847, 2847, 2847, 1763,
     1273,  406, 2847, 2847,  296,  324,  406,  397,  397,  397,
     2847, 2847, 1745, 1259,  210, 1260, 1261,  398,  405, 1492,
     1262, 2847, 2847, 1746, 1263, 1264, 1763, 1273, 2847, 1265,

     1266,  325, 1764,  400, 2847, 1765, 2847, 2847, 2847, 1745,
     1259,  210, 1260, 1261,  406, 1766, 1902, 1262,  397,  397,
      397, 1263, 1264,  315, 1274,  315, 1265, 1266,  398, 1764,
     2847,  405, 1765,  316, 2847,  397,  397,  397,  397,  397,
      397, 2847, 1766, 1902,  400,  398, 1767, 1768,  398,  318,
     2847, 1274,  397,  397,  397, 1500, 2847,  406,  397,  397,
      397,  400,  398, 2847,  400,  397,  397,  397,  398,  397,
      397,  397, 1275, 1767, 1768,  398, 2847,  324,  400,  398,
      210,  210, 1500, 1276,  400, 2847, 1899, 2847,  312,  405,
      210,  400,  405,  210, 1900,  400,  312,  210,  406,  397,

      397,  397, 1277,  325, 2847, 2847,  405,  210,  210,  398,
     1276, 2847,  405, 1899,  210,  406, 1747,  210,  406,  405,
      210, 1900, 2847,  405,  210,  400, 2847, 1930, 2847, 1277,
     2847, 1288,  406, 2847,  210, 1931, 1901, 1932,  406, 2847,
     2847,  210, 2847, 1747, 2847,  406, 2847, 2847, 2847,  406,
     2847, 2847, 2847,  405, 1930,  397,  397,  397, 1288, 2847,
     2847,  210, 1931, 1901, 1932,  398, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  315, 2847,  315, 1278,  406,
     1279,  400, 2847, 1280,  210,  316, 1281, 1926, 2847, 2847,
     2847, 1941,  210, 1282,  210, 1283, 1284, 1285, 2847, 1286,

     1287,  318, 2847, 2847, 2847, 1278, 2847, 1279, 2847,  405,
     1280,  210, 2847, 1281, 1926,  397,  397,  397, 1941,  210,
     1282,  210, 1283, 1284, 1285,  398, 1286, 1287, 2847,  324,
     2847, 1918,  397,  397,  397,  406, 2847,  397,  397,  397,
      210,  400,  398, 2847,  397,  397,  397,  398, 2847,  397,
      397,  397, 1370, 2847,  398,  325, 2847, 1920,  400,  398,
     2847, 2847, 1289,  400, 2847, 2847, 1290,  210, 2847,  405,
      400, 1921, 1958, 1291, 1924,  400, 2847, 1928, 1372, 2847,
      397,  397,  397,  210, 1920, 2847,  405,  210, 1292, 1289,
      398,  405, 1344, 1290, 2847,  406, 2847, 2847,  405, 1958,

     1291, 1924, 2847,  405, 1928, 1372,  400, 2847, 2847,  210,
      210, 1293,  406, 2847,  210, 1292, 1961,  406, 2847, 2847,
     2847,  397,  397,  397,  406,  397,  397,  397, 2847,  406,
     2847,  398, 1934, 2847,  405,  398,  210, 2847, 1293,  397,
      397,  397,  399, 1961, 2847, 2847,  210,  400, 2847,  398,
      399,  400,  397,  397,  397, 2847, 2847, 2847, 2847, 1934,
      406, 1629,  398, 1294,  399,  400, 2847, 2847, 2847,  399,
     1295, 2847, 2847,  210, 2847,  405, 2847,  399,  400,  405,
     2847, 2847, 2847, 2847, 2847,  397,  397,  397, 1629, 2847,
     1294,  399, 2847, 1296,  315,  398,  315, 1295, 2847, 2847,

     2847,  406, 2847, 1297,  316,  406,  405,  397,  397,  397,
     2847,  400, 2847, 1298,  210,  210, 1933,  398, 2847,  406,
      318,  397,  397,  397,  397,  397,  397,  397,  397,  397,
     1297,  398,  406,  400,  398, 2847, 2847,  398, 2847,  405,
     1298,  210,  210, 1933,  397,  397,  397,  400,  324, 2847,
      400, 2847, 2847,  400,  398, 1299,  210, 1300, 2847, 2847,
     2847,  405,  397,  397,  397,  406,  397,  397,  397, 1301,
      400, 2847,  398, 2847,  325,  405,  398, 2847,  405, 1906,
     2847,  405, 1299,  210, 1300,  773, 1925,  406,  400,  397,
      397,  397,  400, 1907, 1983,  210, 1301, 2847,  405,  398,

     1302,  406, 2847, 1312,  406, 1929, 1906,  406,  397,  397,
      397, 2847,  773, 1925,  210,  400,  405,  792,  398, 2847,
      405, 1983,  210, 1916,  406, 1927, 2847, 1302, 2847,  210,
     1312, 1917, 1929, 2847,  400,  397,  397,  397, 1313, 1984,
     1985,  210,  406,  405,  792,  398,  406,  397,  397,  397,
     1916, 2847, 1927,  397,  397,  397,  210,  398,  397,  397,
      397,  400,  405,  398, 1939, 1313, 1984, 1985,  398,  406,
     2847, 2847, 1986,  400, 2847,  210, 1303, 2847, 1304,  400,
      397,  397,  397, 1305,  400, 2847, 1306, 1935,  406,  405,
      398, 1939, 1307, 1308, 1309, 1310,  210, 1311, 1981, 1986,

     2847,  405,  210, 1303, 1315, 1304,  400, 1314, 2847, 2847,
     1305, 2847,  405, 1306, 1935,  406,  397,  397,  397, 1307,
     1308, 1309, 1310,  210, 1311, 1981,  398,  406, 1942,  210,
      210, 1315, 1943,  406,  405,  397,  397,  397,  406,  397,
      397,  397,  400, 2847, 2847,  398, 2847,  277,  315,  398,
      315, 2847,  397,  397,  397, 1942,  210,  210,  316, 1943,
      406,  400,  398, 1949, 2847,  400,  397,  397,  397, 2847,
      405,  397,  397,  397,  318, 2847,  398, 2847,  400, 2847,
      210,  398, 1316, 2847, 2847,  397,  397,  397, 2847,  405,
     1949,  210,  400,  405, 2847,  398,  406,  400, 2847, 1317,

     1948, 2847,  324, 2847, 1908, 2847,  405,  210, 1946, 1316,
     1318,  400, 2847, 1319,  210,  406, 1936, 2847,  210,  406,
      405,  397,  397,  397, 2847,  405, 1317, 2847,  325,  210,
      792,  398,  406, 1937,  210, 1946, 1912, 1318, 2847,  405,
     1319,  210, 2847, 1936,  797,  210,  406,  400,  397,  397,
      397,  406, 2847, 2847, 2847, 2847,  210,  792,  398, 2847,
     1937,  210, 2847, 1912, 2847,  406,  397,  397,  397,  315,
     2847,  315,  210, 1998,  400,  405,  398,  772, 2847,  316,
     1320, 1944, 1321,  773, 1322,  210, 1323,  210, 1324, 1957,
     2847, 1659,  400, 2847, 1325,  318, 2847, 1498, 1327, 1326,

     1998,  406,  405, 2847,  772, 2847, 2847, 1320, 1944, 1321,
      773, 1322,  210, 1323,  210, 1324, 1957,  397,  397,  397,
      405, 1325, 2847,  324, 1498, 1327, 1326,  398,  406, 1950,
     1950, 1950, 2847, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335,  315,  400,  315, 2847,  406, 2847, 1938,  325,
     1969, 2847,  316, 1328, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337,  210,  210,  210, 2847, 1959,  318, 2847,
     2847,  405, 1336, 2847,  210, 1938, 2847, 1969, 1493, 2847,
     1328, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
      210,  210,  210, 1338, 1959, 2847,  324,  406,  210,  210,

      210,  210,  210, 1940,  210, 1493,  210,  792, 1970,  315,
     2847,  315,  210,  773, 2847, 1331,  210,  210, 2847,  316,
     1338, 1665,  325, 2847,  215,  210,  210,  210, 2847,  210,
     1940,  210, 2847,  210,  792,  318, 2847, 1494, 2847,  210,
      773, 1495, 1331,  210,  210, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1911, 1911, 1911, 1911, 1911, 1945,
     1952, 1024, 2847,  324, 1494, 1025, 2847, 1947, 1495,  210,
     1026,  210,  210, 1999, 2847,  315, 1027,  315, 2847, 2847,
     2847, 2847, 2847, 2847, 1028,  316, 1945, 1952, 1024,  325,
     2847, 2847, 1025, 1914, 1947, 2847,  210, 1026,  210,  210,

     1999,  318, 2847, 1027, 1051,  776,  776,  776,  776,  776,
      776,  776,  776,  776, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1499, 2000, 1052, 1951, 1954, 2847,  324,
      772, 1965,  210,  210, 2001,  210,  773, 2847, 2847, 2847,
     2847, 2847, 2847, 2847,  778, 2847, 2847, 2847, 2847, 2847,
     1499, 2000, 1052, 1951, 1954,  325, 2847,  772, 1965,  210,
      210, 2001,  210,  773, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 2847,
     2847, 2847, 1341, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1046, 1047, 1047, 1047, 1047, 1048, 1048, 1048,
     1048, 1962,  210, 1346, 1963, 2002, 1967,  210,  772,  210,
      210, 1966, 2847,  315,  773,  315, 2847, 2847, 2847, 2847,
     2847, 2847, 1347,  316, 2847, 2847, 2847, 2847, 1962,  210,
     1346, 1963, 2002, 1967,  210,  772,  210,  210, 1966,  318,
     2847,  773, 1348, 1349, 1350, 1350, 1350, 1350, 1351, 1351,
     1351, 1351, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 2847, 2339, 2339, 2339, 1968, 2340,  324, 1352,  210,

      210, 1980, 2003, 1976,  773, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 1353, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1968,  325, 2847, 1352,  210,  210, 1980, 2003,
     1976,  773, 1054, 1055, 1055, 1055, 1055, 1056, 1056, 1056,
     1056, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     2847,  277, 1039, 1359, 1360, 1361, 1361, 1361, 1361, 1362,
     1362, 1362, 1362, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 2847,  277, 2847, 2847, 1978, 1977,  210,  792,
      210, 1979, 1996,  210,  210, 1363, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 1364, 1374, 1374, 1374, 1374, 1374, 1374,

     1374, 1374, 1374, 1978, 1977,  210,  792,  210, 1979, 1996,
      210,  210, 1363, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064,  315,  315,  315,  315,  315, 2847,  315,  800, 2847,
     2847,  316,  316, 2847, 2004,  316, 2847, 1953, 2847,  315,
     2847,  315, 1376,  315, 2847,  315, 2847,  318,  318,  316,
      210,  318, 2847,  316, 2847,  800,  315,  315,  315,  315,
     1496, 2004, 2847, 1497, 1953,  318,  316,  316, 1955,  318,
     2847, 1507, 1501, 1506, 2847,  324,  324,  210, 2847,  324,
     1508,  210,  318,  318, 2847, 2847, 1509, 1496, 2847, 2847,

     1497, 2847, 2847,  324, 2005, 1955, 2847,  324, 1507, 1501,
     1506,  325,  325, 1960, 2847,  325, 2847, 1508,  210, 2847,
      324,  324,  315, 1509,  315,  315,  315,  315,  315,  325,
      210, 2005,  316,  325, 2006,  316,  316, 2847, 2847,  315,
     1960,  315, 2847,  315, 2847,  315,  325,  325,  318,  316,
     1510,  318,  318,  316, 2847, 2847,  315,  210,  315, 1514,
     2007, 2006, 1971, 2847, 1511,  318,  316, 1512, 1956,  318,
     2847,  210, 2847, 1513, 2847, 2847,  324, 1510, 2847,  324,
      324,  210,  318, 2847, 1515, 2847, 1514, 2007, 1516, 1971,
     1517, 1511, 2847,  324, 1512, 1956, 2847,  324,  210,  315,

     1513,  315,  325,  210, 2847,  325,  325, 2847,  210,  316,
      324, 1515,  315, 2847,  315, 1516, 2847, 1517, 2010,  325,
     2847, 1988,  316,  325, 2847,  318, 2847,  210, 2847,  315,
      210,  315,  315,  315,  315,  315,  325, 2847,  318,  316,
     1520, 2847,  316,  316, 1518, 2010, 2847,  315, 1988,  315,
      315, 1519,  315,  324,  210,  318, 2847,  316,  318,  318,
      316, 1524, 2011, 2847, 1521, 2847,  324, 1520, 1522, 2847,
      315, 1518,  315,  318, 2847, 2847,  318, 2847, 1519,  325,
      316, 2847, 2847,  324, 2847, 2847,  324,  324, 1524, 2011,
     1987, 1521,  325, 2008,  210, 1522,  318, 2847, 2847, 2847,

     2847,  324, 1523, 2847,  324,  315,  315,  315,  315,  325,
     2847,  210,  325,  325, 1994,  316,  316, 1987, 2847, 2847,
     2008,  210, 2847, 2847,  324, 2847,  315,  325,  315, 1523,
      325,  318,  318, 2847, 1526, 1964,  316, 1525,  210, 2847,
     2847, 1994,  296,  315,  315,  315,  315, 2012,  210, 2847,
      325, 1975,  318,  316,  316, 2847,  315, 2013,  315,  324,
      324, 1526, 1964, 2847, 1525, 1527,  316,  210, 1529,  318,
      318, 2847, 2847, 1528, 2012,  210, 2847, 2847, 1975, 2847,
      324,  315,  318,  315, 2013,  325,  325, 2130, 2137, 1531,
     1530,  316, 1527, 2015,  210, 1529, 2847,  324,  324,  315,

     1528,  315,  315, 2847,  315, 1972,  325,  318, 2847,  316,
      324,  315,  316,  315, 2130, 2137, 1531, 1530,  210, 2847,
     2015,  316, 1532,  325,  325,  318, 2847, 2847,  318, 2847,
     2847,  315, 1972,  315, 2847,  324,  325,  318, 2847,  210,
     1533,  316,  312, 1534, 1535,  210, 1989,  210,  210, 1532,
     1973, 2847, 2847,  324, 1536, 2847,  324,  318,  315, 2847,
      315,  325,  210, 2847, 2847,  324,  210, 1533,  316, 2142,
     1534, 1535, 1541, 1989,  210,  210, 1991, 1973,  317,  325,
     2847, 1536,  325, 2847,  318,  324, 1542, 2847,  210,  210,
     1545,  325,  315, 2847,  315, 1543, 2142,  317, 2847, 1541,

     1544, 2847,  316, 1991,  315,  317,  315, 1997, 2847,  210,
     1993,  325,  324, 1542,  316,  210, 2143, 1545,  318,  315,
     1537,  315, 1543,  315,  317,  315,  210, 1544, 1538,  316,
      318, 2847, 2847,  316, 1997, 1974,  210, 1993,  325, 1539,
     1546, 2847, 1540, 2143, 2847,  318,  324, 1537,  210,  318,
     2847, 2847, 2847,  210,  315, 1538,  315, 2847,  324, 1547,
     2128, 1553, 1974,  210,  316, 1548, 1539, 1546,  315, 1540,
      315,  210,  325,  324, 2847,  210, 2847,  324,  316,  315,
      318,  315, 2847, 2847,  325, 2847, 1547, 2128, 1553,  316,
      210, 2140, 1548, 2847,  318, 2847, 2847, 2847,  210,  325,

      210, 1555, 1554,  325,  315,  318,  315, 2847,  324, 2847,
      315, 1990,  315, 2847,  316, 1557, 2847,  210, 2140,  210,
      316,  315,  324,  315,  210, 1556, 2129,  210, 1555, 1554,
      318,  316, 2847,  324,  325, 1549,  318, 2847, 1990,  315,
     1550,  315, 1557, 1551,  210, 2127,  210,  318,  325,  316,
     1552,  210, 1556, 2129, 2847, 2149, 2847, 2847,  324,  325,
      210, 2847, 1549, 2847,  324,  318,  315, 1550,  315,  315,
     1551,  315, 2127, 2847, 2847,  324,  316, 1552, 2847,  316,
     2847,  315, 2149,  315,  325, 2847,  315,  210,  315,  210,
      325,  316,  318,  324, 2144,  318,  316, 2847,  315, 1558,

      315,  325, 2847,  315,  210,  315, 1995,  318,  316,  210,
     2847,  210,  318,  316, 2847,  315,  210,  315, 2847,  325,
      324, 2144, 2847,  324,  318,  316, 1558, 2847, 1559,  318,
     2847,  210, 1560, 1995, 2847,  324,  210, 1561,  210, 2847,
      324,  318, 2847, 2847, 1562,  210,  325, 2847,  315,  325,
      315, 2847,  324, 2847, 2145, 1559, 1918,  324,  316, 1560,
      315,  325,  315, 1563, 1561,  315,  325,  315, 2847,  324,
      316, 1562,  210, 2847,  318,  316, 2847, 2847,  325, 2847,
     1564, 2847, 1920,  325, 2847, 2847,  318,  397,  397,  397,
     1563,  318, 2847, 2847,  210,  325, 2136,  398,  397,  397,

      397, 2847,  324, 1992, 2139,  210, 1565, 1564,  398, 1920,
      397,  397,  397,  400,  324, 2847,  210,  210, 2847,  324,
      398,  210, 2847, 1567,  400, 2847, 2847, 2847,  325, 2847,
     1992, 2139,  210, 1565, 2847, 2847,  400, 2847, 1568, 1566,
      325,  405, 1569,  210,  210,  325,  397,  397,  397,  315,
     1567,  315,  405,  397,  397,  397,  398, 2847, 2847,  316,
      397,  397,  397,  398,  405, 1568, 1566,  406,  210, 1569,
      398, 2847,  400, 2847, 2146,  318, 2847,  210,  406,  400,
     2847, 2847,  397,  397,  397, 1570,  400, 2847, 1572,  210,
      406, 2163,  398, 2138, 1571,  210,  397,  397,  397, 2847,

      405, 2146, 2847,  324,  210,  210,  398,  405,  400,  397,
      397,  397, 1570, 2161,  405, 1572,  210, 2847, 2163,  398,
     2138, 1571,  400, 2847, 2847, 2847,  406, 2847, 1574,  325,
     1573, 2847,  210,  406,  210,  400,  405, 2847, 2847, 2847,
      406,  397,  397,  397,  397,  397,  397, 2847, 2141, 2847,
      405,  398,  210,  210,  398, 1574, 1575, 1573,  397,  397,
      397,  210,  406,  405, 2847, 2847, 2847,  400,  398, 2847,
      400,  397,  397,  397, 2847, 2141,  406, 2847, 1580,  210,
      210,  398, 1906, 1575,  400, 2847, 1581, 2847,  773,  406,
     2847, 2847, 1582,  210, 2847,  405, 1907,  400,  405, 2847,

      397,  397,  397,  210, 2153, 1580,  397,  397,  397, 1906,
      398, 2847,  405, 1581, 2147,  773,  398, 2847, 2847, 1582,
      210,  406, 2847,  210,  406,  405,  400,  397,  397,  397,
      210, 2153,  400,  397,  397,  397, 1583,  398,  406, 2847,
      210, 2147, 2847,  398, 2847, 2847,  397,  397,  397,  399,
      210,  406, 2847,  400,  405, 1584,  398, 1631,  210,  400,
      405, 2847, 2150, 1583,  792, 2159, 1588,  210,  399, 1585,
     1916,  399,  400,  397,  397,  397,  399, 2847, 1917,  210,
      406,  405, 1584,  398, 1631,  210,  406,  405, 1586, 2150,
     2847,  792, 2159, 1588, 1587,  399, 1585, 1916,  399,  400,

      405, 2847,  397,  397,  397, 2847,  210,  406, 2847,  397,
      397,  397,  398,  406,  210, 1586, 2148,  210, 1589,  398,
     2151, 1587,  397,  397,  397, 2152,  406,  405,  400,  397,
      397,  397,  398, 2154, 1590,  400, 2847, 1594,  210,  398,
      210,  210, 2847, 2148,  210, 1589,  210, 2151,  400,  397,
      397,  397, 2152,  406, 2847,  400,  405, 2847, 2847,  398,
     2154, 1590, 2847,  405, 1594,  210,  210,  210, 2160, 1591,
      210,  210, 2167,  210, 1592,  400,  405, 2847,  397,  397,
      397, 1593,  406,  405, 1595, 2155, 2155, 2155,  398,  406,
      397,  397,  397,  210, 2174, 2160, 1591,  210,  210, 2167,

      398, 1592,  406,  405,  400,  397,  397,  397, 1593,  406,
     2847, 1595,  397,  397,  397,  398,  400,  397,  397,  397,
     2847, 2174,  398,  397,  397,  397, 1596,  398,  210,  406,
      210,  400,  405,  398, 2847, 2847,  210, 1597,  400, 2156,
     1598,  210, 2157,  400,  405, 2162,  397,  397,  397,  400,
     2847, 2847, 2158, 1596, 2847,  210,  398,  210,  406,  405,
      210,  210, 2168,  210, 1597, 2847,  405, 1598,  210, 2157,
      406,  405,  400,  397,  397,  397, 2847,  405, 1599, 2158,
     2847, 2847, 2847,  398, 2847,  406, 2847,  210,  210, 2168,
     2847, 2847,  406, 2847,  397,  397,  397,  406, 2847,  400,

      405, 1600, 2179,  406,  398, 1599, 2847,  397,  397,  397,
     2847,  397,  397,  397,  397,  397,  397,  398, 2165, 2164,
      400,  398, 1601, 2182,  398,  210,  406,  405, 1600, 2179,
     1602, 2183,  210,  400, 2847,  210, 1603,  400, 2847, 2847,
      400, 2847, 2847, 2847, 2166, 2165, 2164, 2847,  405, 1601,
     2182,  277,  210,  406, 1604, 1606, 1605, 1602, 2183,  210,
     2847,  405,  210, 1603, 2847,  405, 2181, 2847,  405,  397,
      397,  397,  210, 2172,  406,  397,  397,  397, 2184,  398,
     2847, 1604, 1606, 1605,  210,  398, 2169,  406,  397,  397,
      397,  406, 2847, 2181,  406,  400, 2847, 2847,  398,  210,

     2172,  400, 2847, 2847,  210, 2184, 2847, 1608, 2847, 2847,
     1607,  210, 2847, 2169,  400, 2847,  399,  277,  397,  397,
      397, 2847, 2847,  405, 1616, 2170,  210, 2173,  398,  405,
     1609,  210, 2847, 1617, 1608,  399,  210, 1607, 1618,  210,
     1610, 2847,  405,  399,  400, 2847, 2189, 2847, 2847,  406,
      210, 1616, 2170,  210, 2173,  406, 2847, 1609, 2847, 1615,
     1617, 2847,  399,  210, 2847, 1618,  210, 1610,  406,  397,
      397,  397,  405, 2189,  397,  397,  397,  210, 2847,  398,
      399,  210, 2171, 2176,  398,  210, 1615, 2175, 1621, 2847,
     2847,  397,  397,  397, 1622,  400, 2847, 1611,  406,  399,

      400,  398,  399, 2185,  210, 1612, 1619,  399,  210, 2171,
     2176, 2847,  210, 2847, 2175, 1621, 1613,  400, 2847, 1614,
      210, 1622, 2847,  405, 1611, 1628,  399, 2847,  405,  399,
     2185,  210, 1612, 1619,  397,  397,  397, 2847, 2847, 2847,
     2847, 2847, 2847, 1613,  398,  405, 1614,  210, 2847,  406,
     2847, 2847, 1628, 2847,  406,  399,  210, 2194, 1623, 2177,
      400, 2847, 2190, 1624, 2847, 2847, 1625, 2847,  397,  397,
      397,  406,  210, 1626,  399, 2178, 1627,  399,  398,  210,
     1630, 2195,  399,  210, 2194, 1623, 2177, 2847,  405, 2190,
     1624, 2847, 2847, 1625,  400,  397,  397,  397, 2847,  210,

     1626,  399, 2178, 1627,  399,  398,  210, 1630, 2195,  397,
      397,  397, 2847, 2196,  406,  397,  397,  397, 2847,  398,
     2847,  400,  405,  210, 2187,  398,  397,  397,  397, 2847,
      210, 2847,  397,  397,  397,  400,  398, 2197, 2198, 2186,
     2196,  400,  398, 2847, 2847,  397,  397,  397,  406,  405,
      210, 2187,  400, 2847, 2199,  398, 1632,  210,  400, 2847,
     2200, 2188, 2847,  405, 2197, 2198,  397,  397,  397,  405,
      210,  400, 2847, 2201, 1633,  406,  398, 2847, 2847, 2847,
      405, 2199, 2847, 1632, 2847, 2847,  405, 2200, 2188,  406,
     2847, 2847,  400, 2847, 2202,  406, 1634,  210, 2847,  405,

     2201, 1633, 2847,  397,  397,  397,  406, 1636, 2847,  397,
      397,  397,  406,  398, 2847, 2847,  397,  397,  397,  398,
      405, 2202, 2204, 1634, 2847,  406,  398, 2205, 2206,  400,
      397,  397,  397, 2207, 1636,  400, 2847,  210, 2208, 2191,
      398, 1638,  400, 2847, 2847,  210,  406,  210, 2192, 2204,
     2193, 1637, 2209, 2295, 2205, 2206,  400,  405, 2211,  210,
     2207, 2294, 2847,  405,  210, 2208, 2191,  210, 1638, 2847,
      405, 1639,  210,  296,  210, 2192, 2847, 2193, 1637, 2209,
     2295, 2296, 2847,  406,  405, 2211,  210, 2847, 2294,  406,
     2847, 2847, 2847, 2847,  210, 2847,  406, 2847, 1639, 1644,

     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 2296,  312,
      406, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1336, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 2310, 2318, 1338,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1338, 2847,
     2847, 2847, 2847, 2847, 2310, 2318, 2847, 1341, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1345, 1345, 1345,

     1345, 1345, 1345, 1345, 1345, 1345, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 2847, 1194, 1346, 1194,  210,
     2847, 2216,  772, 2216,  210,  210, 1195, 2308,  773, 2847,
     2847, 2217, 2847,  895, 2847, 2847, 1347, 2847, 2847, 2847,
     2847, 2847, 1196, 2847, 1346, 1039,  210, 2218, 2847,  772,
     2847,  210,  210, 2847, 2308,  773, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1348, 1349, 1350, 1350, 1350, 1350,
     1351, 1351, 1351, 1351, 1649, 1650, 1650, 1650, 1650, 1651,
     1651, 1651, 1651, 2847,  210,  210, 1197, 1502, 2306,  792,

     1352, 2219, 1269, 1269, 1269, 2298,  773, 2847, 2257, 2257,
     2257,  210, 1270, 2299, 1353, 1050, 2847, 2847, 2258, 2847,
      961,  210,  210, 1652, 2847, 2306,  792, 1352, 1271, 2847,
     2847, 2847, 2298,  773, 2259, 2847, 2847, 2847,  210, 2847,
     2847, 2847, 1050, 1349, 1350, 1350, 1350, 1350, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 2309,
     2307, 1052, 1272, 1576,  210,  210,  772, 2311, 2260,  210,
      210, 2312,  773, 2313,  210, 2323, 2317,  210, 2847,  210,

     1654, 1050, 2847, 2847, 2847, 2847, 2309, 2307, 1052, 1042,
     2847,  210,  210,  772, 2311, 2847,  210,  210, 2312,  773,
     2313,  210, 2323, 2317,  210, 2847,  210, 2847, 1050, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1655, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1359, 1360, 1361,
     1361, 1361, 1361, 1362, 1362, 1362, 1362, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 2314, 2315,  210, 2847,
     2319,  210,  210,  792, 2322,  210,  210,  210,  210, 1363,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 1364, 2847, 2847,
     2847, 2847, 2847, 2314, 2315,  210, 1657, 2319,  210,  210,

      792, 2322,  210,  210,  210,  210, 1363, 1360, 1361, 1361,
     1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 2847, 2300, 2847, 1044, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375,  315,  315,  315,  315,  315, 2302,  315,
      800,  210, 2847,  316,  316, 2847,  315,  316,  315, 2324,

     2847, 2847, 2303, 2847, 1376, 2847,  316, 1918, 2847,  318,
      318, 2847,  210,  318,  315, 2302,  315,  800,  210,  315,
     2847,  315,  318, 2847,  316,  315, 2324,  315, 1772,  316,
     1769, 1770, 1771, 1920, 2847,  316, 2847,  324,  324,  210,
      318,  324,  210, 2333,  210,  318,  315, 1344,  315, 2847,
      324,  318,  315, 1774,  315, 1772,  316, 1769, 1770, 1771,
     1920, 1773,  316,  325,  325, 1775, 2847,  325,  324,  210,
     2333,  210,  318,  324, 1776,  210,  325, 2337,  318,  324,
     1774,  315, 2341,  315, 2847, 2847, 2847, 2847, 1773, 2343,
     2336,  316, 1775,  315,  325,  315,  210, 1777, 2316,  325,

      324, 1776,  210,  316, 2337,  325,  324,  318,  315, 2341,
      315,  315,  315,  315,  315,  210, 2343, 2336,  316,  318,
     2847,  316,  316,  210, 1777, 2316,  325, 2847,  210, 1781,
     2338, 2847,  325,  277,  318,  324, 2344,  318,  318, 2847,
     1784, 2320,  210,  315,  315,  315,  315,  324, 2330, 1782,
      210,  210, 1783,  316,  316,  210, 1781, 2338, 1785, 2345,
     2847,  325,  324, 2344, 2847,  324,  324, 1784, 2320,  318,
      318, 2847, 2847,  325, 2847, 2330, 1782,  210,  210, 1783,
      315, 2847,  315, 2847, 1786, 1785, 2345, 2847,  325, 1787,
      316,  325,  325,  315, 2847,  315, 2847,  324,  324,  315,

      315,  315,  315,  316, 2332, 2847,  318, 2847,  210,  316,
      316, 1786,  315, 2329,  315, 2847, 1787, 2342, 2847,  318,
     2847, 1788,  316,  325,  325,  318,  318, 2847, 2847, 2847,
      210, 2332, 1792, 2847,  324,  210, 2847,  210,  318, 2847,
     2329, 1789,  210, 2348, 2342, 1793, 2847,  324, 1788, 2847,
     2354, 2847, 2847,  324,  324, 1790,  277,  210, 1791, 1792,
      325,  315, 2847,  315,  210,  315,  324,  315, 1789,  210,
     2348,  316, 1793,  325, 2847,  316,  315, 2354,  315,  325,
      325, 2847, 1790, 2847, 2847, 1791,  316,  318,  315, 1794,
      315,  318,  325, 2847, 2847, 2335, 2331, 2847,  316,  210,

     2847,  315,  318,  315, 2355, 2847, 2847,  315, 1795,  315,
      315,  316,  315,  210,  318,  324, 1794,  316, 2847,  324,
      316, 1796, 2335, 2331, 1797, 2847,  210,  318, 2847, 2847,
      324, 2355, 2351,  318, 2847, 1795,  318,  315,  210,  315,
      210,  325,  324, 1798, 2356,  325, 2847,  316, 1796, 1799,
     2847, 1797,  315, 2357,  315,  324,  325, 2847, 2358, 2351,
     2847,  324,  316,  318,  324,  210, 2847,  315,  325,  315,
     1798, 2356,  315,  315,  315,  315, 1799,  316,  318, 2847,
     2357,  325,  316,  316, 1800, 2358,  315,  325,  315, 2359,
      325,  324, 1801,  318, 2847, 2847,  316, 2350,  318,  318,

     2847,  210, 2847,  315, 2334,  315,  324,  210, 1802, 2346,
     2360, 1800,  318,  316, 2847,  210, 2359,  325, 1803, 1801,
      315,  324,  315, 2361, 2350, 2847,  324,  324,  210,  318,
      316, 2334,  325, 1804,  210, 1802, 2346, 2360, 2847,  315,
      324,  315,  210, 2847, 2847, 1803,  318,  325, 2364,  316,
     2361, 2847,  325,  325,  315, 2847,  315,  324, 2847,  315,
     1804,  315, 2365, 2366,  316,  318,  325, 2847,  315,  316,
      315,  315, 2847,  315,  324, 2364, 2847,  315,  316,  315,
      318,  316,  210,  325, 2352,  318,  315,  316,  315, 2365,
     2366, 2847, 2847,  324,  318, 2847,  316,  318, 2847, 2349,

      325, 1805, 2362,  318,  315, 2363,  315, 2847,  324,  210,
      210, 2352,  318,  324,  316, 1806, 2847, 2847, 1807,  325,
     2367, 2847,  324, 2325, 2326,  324, 2349, 1808, 1805, 2362,
      318,  324, 2363,  315,  325,  315, 2368,  210, 2847,  325,
      324, 2327, 1806,  316,  296, 1807, 1809, 2367,  325, 2847,
      315,  325,  315,  296, 1808, 2328, 2444,  325,  324,  318,
      316, 2847,  315, 2368,  315, 2321,  325, 2847, 2327,  315,
      210,  315,  316, 1809, 2847, 2847,  318, 2847, 2369,  316,
     1810,  210, 2328, 2444,  325,  210, 2847,  324,  318, 2847,
     2847, 1811, 2321, 2370, 1812,  318,  315,  210,  315,  315,

      315,  315,  315, 2847,  324, 2369,  316, 1810,  210,  316,
      316, 1813,  210,  325, 2847, 2300,  324,  315, 1811,  315,
     2370, 1812,  318,  324, 1814,  318,  318,  316, 2847,  312,
      325, 1817,  312, 2847,  315,  210,  315,  315, 1813,  315,
     1815, 2302,  325,  318,  316, 2847, 2847,  316, 2847,  325,
      324, 1814, 2847,  324,  324, 2443, 2437, 1816, 1817,  315,
      318,  315,  210,  318, 2847,  210,  210, 1815, 2302,  316,
     2847,  324,  315, 1818,  315, 1819,  325, 2847, 2847,  325,
      325, 2847,  316, 2437, 1816,  318, 2847, 2847,  324, 2438,
     2847,  324,  210,  210,  315, 1820,  315,  325,  318,  315,

     1818,  315, 1819, 2847,  316,  315,  210,  315, 1821,  316,
     2847, 2847, 2847,  324,  325,  316, 2438,  325, 2847,  315,
      318,  315, 1820, 2445, 2847,  318,  324, 2847,  315,  316,
      315,  318,  315,  210,  315, 1821, 2456,  210,  316,  325,
     2847,  315,  316,  315, 1822,  318, 2847, 2847,  324,  210,
     2445,  316,  325,  324,  318,  315, 2847,  315,  318,  324,
      210, 1823, 1825, 2456,  210,  316, 1824,  318,  315, 2847,
      315, 1822, 2847,  324,  325, 2448,  210, 2847,  316,  325,
      210,  318,  324, 1828,  210,  325,  324,  210, 1823, 1825,
      315, 2847,  315, 1824,  318,  324, 1826, 2847, 2457,  325,

      316, 2847, 2448,  315,  315,  315,  315,  210,  325,  324,
     1828,  210,  325,  316,  316, 1827,  318,  397,  397,  397,
     2458,  325,  324, 1826, 2347, 2457,  315,  398,  315,  318,
      318, 2847,  210, 1829, 2353,  325,  316, 2459, 1833, 2847,
      210,  210, 1827,  400, 1830, 2847, 2847, 2458,  325, 2847,
     1831, 2347,  318,  397,  397,  397, 2847,  324,  324,  210,
     1829, 2353, 2847,  398, 2459, 1833, 1832,  210,  210,  210,
      325,  405,  397,  397,  397, 2847, 2847, 1831,  210,  400,
      324, 2447,  398,  325,  325,  397,  397,  397, 2847,  397,
      397,  397, 2847, 1832, 2847,  398,  210,  406,  400,  398,

     1834, 2847,  397,  397,  397,  210,  325,  405, 2447, 2847,
     2847,  400,  398, 2847, 2847,  400, 2847, 2847,  792, 1835,
      210, 1837, 2847, 2847, 2298, 2847,  405, 1834,  400, 2847,
     1836, 2455, 2299,  406,  397,  397,  397,  210, 2847,  405,
      397,  397,  397,  405,  398,  792, 1835,  210, 1837, 1838,
      398, 2298,  406, 2847, 2847, 2847,  405, 1836, 2455, 2847,
      400,  397,  397,  397,  210,  406,  400, 2847, 1839,  406,
     2847,  398, 2847,  397,  397,  397, 1838, 2847,  210, 2847,
     1840, 2449,  406,  398,  210, 2847, 2446,  400,  405, 1841,
      210, 2847,  210, 2847,  405, 1839,  397,  397,  397,  400,

     2847, 2847,  397,  397,  397,  210,  398, 1840, 2449, 2847,
     2847,  210,  398, 2446,  406,  405, 1841,  210, 1842,  210,
      406, 2847,  400,  397,  397,  397, 2847,  405,  400, 2847,
      210, 2847, 2847,  398,  210, 2847,  397,  397,  397,  210,
      210,  406, 2450, 1847, 1846, 1842,  398, 2461, 2451,  400,
      405,  210, 2847,  406, 2847, 2847,  405,  210,  397,  397,
      397,  210,  400, 2847, 1848, 2847,  210,  210,  398, 2450,
     1847, 1846, 2847, 2847, 2461, 2451,  406,  405,  210,  397,
      397,  397,  406, 1849,  400,  397,  397,  397, 2847,  398,
      405, 1848,  397,  397,  397,  398,  397,  397,  397,  397,

      397,  397,  398,  406, 1850,  400,  398, 2847, 2847,  398,
     1849,  400,  405, 2453, 2847, 2460,  406, 2847,  400, 2847,
     1851, 2468,  400, 2847, 2469,  400, 2847,  210,  210, 2847,
     1852, 1850, 2847,  405,  397,  397,  397, 1853,  406,  405,
     2453, 1854, 2460, 2470,  398, 2847,  405, 1851, 2468, 2847,
      405, 2469, 2847,  405,  210,  210,  315, 1852,  315,  406,
      400,  397,  397,  397, 1853,  406,  316, 2462, 1854, 2847,
     2470,  398,  406,  397,  397,  397,  406, 1855, 2847,  406,
     1856, 2452,  318,  398,  210,  210,  210,  400,  405, 2847,
      397,  397,  397, 1857, 2462,  397,  397,  397, 2466,  400,

      398, 1859, 2847, 2847, 1855,  398, 1858, 1856, 2452, 2847,
      324,  210,  210,  210,  406,  405,  400, 2847, 2847,  210,
     1857,  400,  397,  397,  397, 2466, 2847,  405, 1859,  397,
      397,  397,  398, 1858, 2467, 1861,  325,  277, 1860,  398,
      315,  406,  315, 2847,  405,  210,  210, 2454,  400,  405,
      316, 2847, 2847,  406, 2472,  400, 2847, 2847, 1862,  210,
      210, 2467, 1861, 2847, 2847, 1860,  318,  397,  397,  397,
      406, 1863,  210,  210, 2454,  406,  405,  398,  397,  397,
      397, 2472, 2847,  405,  277, 1862,  210,  210,  398,  397,
      397,  397,  210,  400,  324, 2847, 2847, 2847, 1863,  398,

      210, 2847,  406, 2474,  400, 2847, 2847, 2475, 2476,  406,
     2847, 2847,  397,  397,  397,  400, 2847, 1864, 2477,  210,
      325,  405,  398,  397,  397,  397, 2847,  397,  397,  397,
     2474, 2847,  405,  398, 2475, 2476, 1865,  398,  400, 2847,
     2478, 2479, 2847,  405, 1864, 2477, 2471,  406, 2847,  400,
     2847, 2480, 1866,  400, 2847,  210, 2481,  296,  406, 2847,
      397,  397,  397, 1865, 1867, 2847,  405, 2478, 2479,  406,
      398, 2482, 1868, 2471,  397,  397,  397,  405, 2480, 1866,
     2300,  405,  210, 2481,  398, 2473,  400,  397,  397,  397,
      296, 1867,  406, 2847,  397,  397,  397,  398, 2482, 1868,

      400, 2847,  210,  406,  398,  210, 2302,  406,  397,  397,
      397, 2483, 2473,  400,  405, 2537, 2484, 1869,  398, 2847,
      400,  397,  397,  397,  210, 2543, 2544, 2847,  405,  210,
     2847,  398,  210, 2302,  400,  397,  397,  397, 2483, 2847,
      406,  405, 2537, 2484, 1869,  398, 2529,  400,  405,  210,
      312,  210, 2543, 2544,  406,  397,  397,  397,  397,  397,
      397,  400,  405, 2847, 2847,  398,  312,  406,  398,  397,
      397,  397, 2534, 2529,  406,  405,  210, 1870, 2847,  398,
      210,  400, 2847, 2847,  400, 2847,  210,  210,  406,  405,
      397,  397,  397, 2847, 2847,  400, 2546, 2847, 2847, 2534,

      398,  406, 1871, 2847, 1870, 1872, 2554,  210, 2847,  405,
     1873, 2847,  405,  210,  210,  406,  400,  397,  397,  397,
      397,  397,  397,  405,  397,  397,  397,  398, 2847, 1871,
      398, 2530, 1872, 2554,  398,  406,  210, 1873,  406, 2535,
     2847, 2538,  210,  400,  405,  210,  400, 2847, 2540,  406,
      400,  397,  397,  397,  397,  397,  397,  210, 2530, 1874,
     2555,  398, 2847,  210,  398, 1876, 2535, 1875, 2538,  210,
      406,  405,  210, 2847,  405, 2540, 2541,  400,  405,  210,
      400, 2847, 2533, 1877,  210, 2847, 1874, 2555,  397,  397,
      397, 2847, 1876, 2847, 1875, 2559, 1878,  406,  398,  210,

      406, 2847, 2560, 2541,  406,  405,  210, 2847,  405, 2533,
     1877,  397,  397,  397,  400, 2216, 1879, 2216,  397,  397,
      397,  398, 2559, 1878, 2847, 2217,  210,  895,  398, 2560,
     2536,  406, 2847, 2552,  406,  210, 2563,  400,  397,  397,
      397, 2218,  405, 1879,  400,  397,  397,  397,  398,  397,
      397,  397, 1880, 2539, 2847,  398, 2847, 2536, 1881,  398,
     2552, 2847,  210, 2563,  400,  405,  210, 2547,  406, 1882,
     2847,  400,  405,  210, 2561,  400,  397,  397,  397, 1880,
     2539, 1883, 2847,  277, 2847, 1881,  398,  397,  397,  397,
     1884,  406,  405,  210, 2547, 2219, 1882,  398,  406,  405,

      210, 2561,  400,  405, 2847,  397,  397,  397, 1883,  397,
      397,  397, 1885,  400, 2847,  398, 2847, 1884,  406,  398,
     2847, 2847, 2847, 1886,  296,  406,  397,  397,  397,  406,
      405,  400,  397,  397,  397,  400,  398, 2545, 2847, 1885,
     2847,  405,  398,  397,  397,  397, 2847,  397,  397,  397,
     1886,  210,  400,  398, 1887, 2558,  406,  398,  400,  405,
     2564,  210, 2847,  405, 2545, 1888, 2847,  406, 2847,  400,
     2847, 2565,  210,  400,  397,  397,  397, 1890,  210, 2847,
      405, 1887, 2558, 2847,  398,  406,  405, 2564,  210,  406,
     1889, 2847, 1888,  397,  397,  397, 2847,  405, 2565,  210,

      400,  405, 2613,  398, 1890, 2847,  406, 2847,  397,  397,
      397,  210,  406, 2847, 2847, 1891, 2553, 1889,  398,  400,
      397,  397,  397,  406, 2542, 2847,  210,  406,  405, 2613,
      398,  397,  397,  397,  400,  397,  397,  397,  210,  210,
     1892,  398, 1891, 2553, 2566,  398,  400,  405, 2618, 2556,
     1893, 2542,  210,  210,  406, 2847, 2847,  400,  397,  397,
      397,  400,  405, 1894, 2847,  277,  210, 1892,  398, 2557,
     2617, 2566,  210,  406, 1895, 1897, 2556, 1893, 1896,  210,
     2847, 2257, 2257, 2257,  400,  405,  210,  210,  406,  405,
     1894, 2258, 1898,  961,  312, 2847, 2557, 2617, 2847,  210,

      406, 2847, 1897, 2847, 2847, 1896, 2847, 2259, 2847, 2847,
     2847,  406,  405,  210,  210,  406, 2847, 2847, 2847, 1898,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,  406, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1903, 1903,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 2614, 2621, 1336,
     2847, 2260, 2847, 2847, 2847, 2847, 2847, 2847, 1336, 2847,
      210, 2562, 2567,  792, 2847, 2847, 2847, 2847, 1338, 2847,
     2847, 2847, 2847, 2847, 2614, 2621, 2847, 1904, 1649, 1650,
     1650, 1650, 1650, 1651, 1651, 1651, 1651,  210, 2562, 2567,

      792, 1908, 1909, 1910, 1910, 1910, 1910, 1911, 1911, 1911,
     1911, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
      296,  312, 2847, 2847, 2622, 2847,  315,  792,  315,  315,
      315,  315,  315, 1912, 2847, 2847,  316, 2847, 2847,  316,
      316, 1913, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 2622,  318, 2847,  792,  318,  318, 2847, 2017, 2847,
     1912, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 2847,
      324, 1052, 2847,  324,  324, 2017,  772, 2847,  315, 2847,
      315,  210,  773, 2847, 2847, 2847, 2847, 2847,  316, 2847,

     1654, 2847, 2847, 2847, 2847, 2847,  325, 2847, 1052,  325,
      325, 2629, 2612,  772,  318, 2847,  210,  210,  210,  773,
     1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 2629, 2612,
     2847, 2847,  324,  210,  210, 1372, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664,  315,  315,  315,  315, 1923,
      315,  315,  315,  315, 2847,  316,  316,  315,  325,  315,
      316,  316, 1372, 2847, 2847, 2619, 2847,  316,  210, 2847,
     2615,  318,  318, 2847,  210, 2616,  318,  318, 2847, 2847,
      210, 2018, 2637,  318, 2847,  210, 2019, 2627,  210, 2623,

     2021, 2020, 2619, 2022, 2678,  210,  315, 2615,  315,  324,
      324,  210, 2616, 2847,  324,  324,  316,  210, 2018, 2637,
     2847,  324,  210, 2019, 2627,  210, 2847, 2021, 2020,  315,
     2022,  315,  318, 2847, 2847,  325,  325, 2847,  210,  316,
      325,  325,  315,  315,  315,  315,  277,  325,  315, 2847,
      315, 2025,  316,  316,  210,  318, 2847, 2847,  316, 2847,
      324,  315,  315,  315,  315,  210, 2847, 2847,  318,  318,
     2847,  316,  316, 2027,  318, 2847, 2026, 2685, 2025, 2028,
     2029,  210, 2847,  324, 2620, 2847,  325,  318,  318, 2847,
     2847,  315, 2031,  315, 2030, 2847,  324,  324, 2847,  210,

     2027,  316,  324, 2026, 2685, 2690, 2028, 2029,  315,  325,
      315, 2620, 2634, 2847, 2847,  324,  324,  318,  316, 2031,
     2847, 2030,  325,  325, 2847, 2032,  210,  315,  325,  315,
     2847, 2847, 2690,  315,  318,  315, 2847,  316, 2691, 2634,
     2033,  325,  325,  316,  315,  324,  315,  315,  315,  315,
      315, 2631, 2032,  318,  316,  210, 2847,  316,  316,  318,
     2847,  296,  324, 2638, 2847, 2691, 2847, 2033, 2689, 2034,
      318,  325, 2847,  318,  318, 2847, 2035, 2624, 2631, 2038,
     2847,  324,  210,  315,  315,  315,  315,  324,  325, 2037,
     2638,  210, 2036,  316,  316, 2689, 2034, 2847,  324, 2632,

     2847,  324,  324, 2035, 2624, 2847, 2038,  325, 2847,  318,
      318, 2847,  312,  325,  210,  277, 2037, 2847,  210, 2036,
     2847,  315, 2039,  315,  325, 2040, 2632,  325,  325, 2847,
      315,  316,  315,  315,  315,  315,  315,  324,  324, 2847,
      316,  210,  210,  316,  316, 2847, 2847,  318, 2847, 2039,
     2847,  315, 2040,  315, 2847,  315,  318,  315, 2042,  318,
      318,  316, 2693,  325,  325,  316,  315, 2847,  315,  210,
      315, 2847,  315, 2043, 2847, 2041,  316,  318, 2847, 2847,
      316,  318, 2847, 2847,  324, 2042, 2847,  324,  324, 2693,
     2046, 2044,  318,  315, 2695,  315,  318,  315, 2045,  315,

     2043,  325, 2047,  316, 2847,  324,  315,  316,  315,  324,
      325, 2847, 2696,  325,  325, 2847,  316, 2046, 2044,  318,
      324, 2695, 2697,  318,  324, 2045,  315,  210,  315, 2047,
      210,  325,  318, 2847, 2679,  325,  316, 2847, 2048, 2696,
     2049,  296, 2050, 2847, 2847, 2847,  325,  324, 2847, 2697,
      325,  324,  318,  315,  210,  315,  315,  210,  315, 2847,
      324, 2679,  315,  316,  315, 2048,  316, 2049,  315, 2050,
      315, 2682,  316,  325, 2847, 2687, 2699,  325,  316,  318,
      324,  210,  318,  315, 2052,  315,  325,  210,  318, 2847,
     2847, 2730,  210,  316,  318,  315, 2847,  315, 2682, 2847,

     2051, 2054, 2687, 2699, 2847,  316,  325,  324,  210,  318,
      324, 2052, 2847, 2053,  210,  315,  324,  315, 2730,  210,
     2847,  318,  324,  312,  315,  316,  315, 2051, 2054,  315,
     2055,  315, 2732,  325,  316, 2847,  325,  324,  277,  316,
     2053,  318,  325, 2847,  315, 2847,  315, 2056,  325,  324,
      318, 2570, 2847, 2570,  316,  318,  315, 2055,  315, 2732,
     2847, 2571,  315,  325,  315, 2057,  316, 2726, 2847,  324,
      318, 2847,  316,  210, 2056,  325, 2058, 2572,  324,  315,
     2847,  315,  318,  324,  210, 2059, 2681, 2061,  318,  316,
     2847,  315, 2057,  315, 2726,  325, 2847,  315,  324,  315,

      210,  316, 2847, 2058,  325,  318, 2847,  316, 2847,  325,
      324,  210, 2059, 2681, 2061, 2847, 2062,  318, 2847, 2731,
     2060, 2847, 2847,  318,  325, 2847, 2683, 2063, 2684, 2064,
      210, 2573,  618,  324, 2733,  210,  325, 2847,  315,  315,
      315,  315,  325, 2847, 2847,  324, 2731, 2060,  316,  316,
      315,  324,  315, 2683, 2063, 2684, 2064,  210, 2847,  325,
      316, 2733,  210, 2847,  318,  318, 2847, 2847,  277, 2725,
     2066,  325, 2065,  210,  210, 2686,  318,  325,  210, 2067,
     2847,  315, 2847,  315, 2847,  315, 2847,  315,  315, 2847,
      315,  316,  324,  324, 2847,  316, 2725, 2066,  316, 2065,

      210,  210, 2686, 2847,  324,  210, 2067,  318, 2847, 2692,
     2847,  318, 2847,  210,  318,  315,  210,  315,  325,  325,
     2729, 2847,  397,  397,  397,  316, 2069, 2847, 2070, 2068,
      325, 2071,  398, 2734, 2847,  324, 2692, 2847, 2847,  324,
      210,  318,  324,  210,  397,  397,  397, 2729,  400,  397,
      397,  397, 2736, 2069,  398, 2070, 2068, 2847, 2071,  398,
     2734,  325, 2847, 2847, 2847,  325, 2847, 2735,  325,  324,
      400, 2847, 2847, 2737, 2847,  400,  405,  210, 2738, 2736,
     2073, 2072, 2847,  397,  397,  397,  397,  397,  397,  397,
      397,  397, 2847,  398, 2735,  325,  398, 2847,  405,  398,

     2737,  296,  406,  405,  210, 2738, 2751, 2073, 2072,  400,
     2847,  210,  400, 2847,  296,  400,  397,  397,  397, 2680,
     2680, 2680, 2847, 2074,  406,  312,  398, 2847, 2847,  406,
     2075, 2739, 2847, 2751,  397,  397,  397,  405,  210, 2216,
      405, 2216,  400,  405,  398,  397,  397,  397, 2847, 2217,
     2074,  895,  397,  397,  397,  398, 2847, 2075, 2739, 2728,
      400, 2847,  398,  406,  210, 2218,  406, 2847,  210,  406,
      405,  400, 2847, 2076, 2847,  397,  397,  397,  400, 2847,
      312, 2077, 2752, 2748, 2847,  398, 2728, 2847,  405,  210,
     2753,  210,  397,  397,  397,  210,  406, 2080, 2847,  405,

     2076,  400,  398, 2847, 2847, 2847,  405, 2847, 2077, 2752,
     2748,  397,  397,  397,  406, 2754,  210, 2753,  400, 2219,
     2847,  398, 2081, 2082, 2080,  406,  397,  397,  397,  405,
      277,  277,  406,  397,  397,  397,  398,  400,  397,  397,
      397, 2847, 2754,  398, 2755, 2847,  405, 2083,  398, 2081,
     2082, 2749,  400, 2847,  210,  406, 2756, 2759, 2084,  400,
      397,  397,  397, 2847,  400,  405, 2085, 2727, 2727, 2727,
      398, 2755,  406, 2847, 2083, 2847, 2758, 2847, 2749, 2847,
      405,  210, 2757, 2756, 2759, 2084,  400,  405, 2774, 2847,
     2086,  406,  405, 2085,  397,  397,  397,  397,  397,  397,

      397,  397,  397, 2758,  398, 2761,  406,  398, 2847, 2757,
      398, 2847,  210,  406,  405, 2774,  296, 2086,  406, 2847,
      400, 2847, 2760,  400, 2847, 2724,  400, 2847, 2087, 2088,
     2772,  296, 2761,  397,  397,  397,  397,  397,  397,  210,
      406,  210, 2089,  398, 2847,  312,  398, 2847,  405, 2760,
     2847,  405, 2724, 2847,  405, 2087, 2088, 2772, 2750,  400,
     2847,  210,  400,  397,  397,  397, 2847, 2847,  210, 2089,
      277,  312, 2847,  398,  406, 2847, 2090,  406, 2847, 2773,
      406,  397,  397,  397, 2091, 2750, 2847,  405,  210,  400,
      405,  398,  397,  397,  397,  397,  397,  397, 2847,  397,

      397,  397,  398, 2090, 2092,  398, 2773,  400, 2847,  398,
     2769, 2091, 2775,  406,  210, 2847,  406,  405,  400, 2847,
     2768,  400, 2847,  210, 2093,  400, 2847, 2847,  277, 2847,
     2776, 2092,  397,  397,  397,  405, 2095, 2769, 2094, 2775,
     2847,  210,  398,  406, 2779, 2847,  405, 2768, 2847,  405,
      210, 2093, 2847,  405,  397,  397,  397, 2776,  400, 2847,
     2847,  406, 2847, 2095,  398, 2094,  397,  397,  397, 2770,
     2847, 2779,  406,  210,  210,  406,  398, 2847, 2847,  406,
      400, 2847, 2097, 2792,  210, 2847, 2096,  397,  397,  397,
     2778, 2777,  400,  397,  397,  397, 2770,  398, 2780, 2847,

      210,  210, 2847,  398,  397,  397,  397, 2847,  405, 2097,
     2792,  210,  406,  400,  398, 2847, 2847, 2778, 2777,  400,
      405, 2847,  397,  397,  397, 2780, 2098, 2793, 2789, 2099,
      400,  296,  398, 2781,  406,  210, 2100, 2847,  312,  296,
     2847,  405,  397,  397,  397, 2847,  406,  405,  400,  397,
      397,  397,  398, 2098, 2793, 2789, 2099, 2847,  405,  398,
     2781, 2101,  210, 2100, 2771, 2796, 2847,  406,  400,  397,
      397,  397, 2788,  406, 2102,  400,  405,  210, 2847,  398,
     2847, 2103,  312, 2847,  406, 2791, 2801,  210, 2101, 2847,
     2847, 2771, 2796,  210, 2847,  400,  405,  210, 2803, 2788,

     2847, 2102,  406,  405,  210,  397,  397,  397, 2103,  397,
      397,  397, 2791, 2801,  210,  398, 2104, 2795, 2847,  398,
      210,  277,  406,  405,  210, 2803,  397,  397,  397,  406,
     2790,  400,  397,  397,  397,  400,  398, 2847,  397,  397,
      397, 2847,  398, 2104, 2795,  397,  397,  397,  398,  406,
     2105,  277,  400,  296,  210,  398, 2847, 2790,  400,  405,
     2107, 2847, 2847,  405,  400,  397,  397,  397,  397,  397,
      397,  400, 2847, 2106, 2794,  398, 2847, 2105,  398,  277,
      405,  210, 2847, 2108, 2109,  406,  405, 2107, 2570,  406,
     2570,  400,  405, 2840,  400, 2847, 2847, 2111, 2571,  405,

     2106, 2794, 2847,  397,  397,  397,  406,  397,  397,  397,
     2108, 2109,  406,  398, 2572, 2110, 2847,  398,  406,  405,
     2840, 2847,  405,  296, 2111,  406,  397,  397,  397,  400,
      397,  397,  397,  400, 2847, 2805,  398,  397,  397,  397,
      398, 2847, 2110, 2797, 2847,  406, 2798,  398,  406,  397,
      397,  397,  400, 2847, 2113, 2847,  400,  405, 2821,  398,
     2847,  405, 2805,  400,  397,  397,  397, 2112, 2573,  618,
     2797, 2114, 2847, 2798,  398,  400, 2847, 2847, 2115, 2847,
      405, 2113,  312,  406,  405, 2821, 2847,  406,  296, 2847,
      400,  405,  312, 2827, 2112, 2116, 2802,  277, 2114,  397,

      397,  397, 2847, 2117, 2809, 2115,  406, 2807, 2847,  398,
      406,  397,  397,  397,  397,  397,  397,  406,  405, 2804,
     2827,  398, 2116, 2802,  398,  400,  397,  397,  397,  406,
     2806, 2809,  277,  277, 2807, 2118,  398,  400,  277, 2847,
      400, 2847, 2847, 2119,  406, 2847, 2804, 2120, 2847,  397,
      397,  397,  400,  405, 2847,  296, 2808, 2806, 2121,  398,
      312, 2847, 2118, 2823, 2847,  405,  312,  315,  405,  315,
     2119,  397,  397,  397, 2120,  400, 2847,  316, 2122,  406,
      405,  398, 2847, 2808, 2842, 2121, 2847, 2847, 2847, 2847,
     2823,  406, 2847,  318,  406, 2810, 2847,  400,  397,  397,

      397, 2847,  296,  405, 2847, 2122,  406, 2847,  398,  277,
     2847, 2842, 2847,  397,  397,  397,  397,  397,  397, 2123,
     2847,  324, 2810,  398,  400,  405,  398, 2812, 2124,  406,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,  400,
     2847, 2125,  400, 2847, 2843, 2811, 2123,  325,  296, 2844,
     2815,  406,  405, 2847, 2812, 2124, 2126, 1905, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 2847,  405, 2125, 2847,
      405, 2843, 2811, 2847, 2847, 2847, 2844, 2815,  406,  296,
      312, 2817, 2847, 2126, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1903,  406, 2813,  277,  406, 2814, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 2845, 2817,  792,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2131, 2847,
     2847, 2813, 2847, 1904, 2814, 2847,  296, 2847,  312, 1050,
     2847,  277, 2847, 2847, 2845, 2847,  792, 1042, 2132, 2132,
     2132, 2132, 2132, 2132, 2132, 2132, 2132, 1909, 1910, 1910,
     1910, 1910, 1911, 1911, 1911, 1911, 1050, 1911, 1911, 1911,
     1911, 1911, 1911, 1911, 1911, 1911, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 2847, 2847, 2133, 1915, 1915,
     1915, 1915, 1915, 1915, 1915, 1915, 1915, 2134, 2134, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 1919, 1919, 1919, 1919,

     1919, 1919, 1919, 1919, 1919, 1044, 1922, 1922, 1922, 1922,
     1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
     1922, 1922, 1922, 1922,  315,  315,  315,  315,  315, 2816,
      315, 1372, 2847, 2818,  316,  316, 2847, 2847,  316,  315,
     2847,  315,  315, 2819,  315, 1923, 2847, 2825, 2846,  316,
      318,  318,  316, 2820,  318, 2847, 2816, 2213, 1372,  315,
     2818,  315, 2847,  296, 2214,  318, 2847,  312,  318,  316,
     2819, 2847, 2847, 2212, 2825, 2846, 2847, 2847,  324,  324,
     2820, 2847,  324, 2215, 2213,  318,  312, 2220,  312, 2829,
     2847, 2214,  315,  324,  315, 2847,  324,  315,  277,  315,

     2212,  315,  316,  315,  325,  325, 2847,  316,  325, 2831,
     2215,  316, 2847,  324, 2220,  315, 2829,  315,  318,  325,
     2822, 2824,  325,  318,  315,  316,  315,  318,  315,  296,
      315, 2847, 2847, 2847,  316,  315, 2831,  315,  316,  325,
     2847,  318,  315, 2222,  315,  316,  324, 2822, 2824,  312,
      318, 2221,  316, 2847,  318,  324, 2847,  315, 2847,  315,
     2223,  318, 2847, 2847, 2826,  296,  312,  316,  318,  324,
     2222, 2828,  325, 2847,  315, 2224,  315,  325,  324, 2830,
     2225,  325,  324,  318,  316, 2226, 2832, 2223, 2847,  324,
     2227, 2826, 2847, 2834, 2847,  325,  324, 2847, 2828,  315,

      318,  315, 2224,  277,  325, 2847, 2830, 2225,  325,  316,
      296,  324, 2226, 2832,  315,  325,  315, 2227,  312, 2847,
     2834,  315,  325,  315,  316,  318,  277, 2847,  324, 2228,
     2847,  316,  315,  296,  315, 2847,  315,  325,  315, 2847,
      318, 2847,  316, 2847, 2847, 2847,  316,  318, 2847, 2847,
     2847, 2847, 2847,  324,  325, 2836, 2228, 2847,  318, 2847,
     2229, 2847,  318,  315, 2230,  315, 2847, 2847,  324, 2847,
      315, 2847,  315,  316,  315,  324,  315, 2847, 2847,  325,
      316, 2847, 2836, 2847,  316, 2847,  324, 2229, 2847,  318,
     2231, 2230, 2847, 2847,  325,  312,  318, 2847, 2847, 2233,

      318,  325, 2847, 2232, 2847,  315, 2847,  315,  315, 2847,
      315, 2847,  325, 2161, 2847,  316,  325,  324,  316, 2847,
     2847, 2235, 2234, 2847,  324,  315, 2233,  315,  324, 2847,
     2232,  318, 2847, 2847,  318,  316, 2847, 2847, 2847, 2847,
     2847, 2847,  315,  325,  315,  315, 2847,  315, 2235, 2234,
      325,  318,  316, 2847,  325,  316,  315, 2847,  315,  324,
     2847, 2847,  324,  315, 2847,  315,  316,  315,  318,  315,
     2847,  318, 2847,  316, 2847, 2847,  315,  316,  315,  324,
     2847, 2847,  318, 2847, 2847,  325,  316, 2237,  325,  318,
      315, 2847,  315,  318, 2847, 2847, 2236, 2847, 2847,  324,

      316,  315,  318,  315, 2847,  325, 2238, 2239, 2847, 2847,
      324,  316, 2847,  315, 2237,  315,  318,  324, 2847, 2847,
     2847,  324,  325,  316, 2847,  325, 2847,  318, 2847, 2847,
      324, 2847, 2847, 2238, 2239,  315,  325,  315,  315,  318,
      315, 2847, 2847,  325,  324,  316, 2847,  325,  316,  315,
      315,  315,  315, 2847, 2847,  324,  325, 2847, 2847,  316,
      316,  318, 2847, 2847,  318, 2847, 2847, 2240, 2847, 2847,
      325, 2847, 2847, 2847, 2847,  318,  318, 2847, 2847, 2847,
     2847,  325, 2241, 2847,  315, 2847,  315, 2847,  315,  324,
      315, 2847,  324,  325,  316, 2847, 2242, 2243,  316, 2847,

     2847, 2847, 2847,  324,  324, 2847, 2847, 2847, 2847, 2241,
      318, 2847, 2847, 2847,  318,  325, 2244, 2847,  325, 2847,
     2847, 2847, 2847, 2242, 2243,  315,  315,  315,  315,  325,
      325,  315, 2847,  315, 2246,  316,  316, 2847,  324, 2847,
     2847,  316,  324, 2244,  315, 2847,  315, 2847,  315, 2847,
      315,  318,  318, 2847,  316, 2847, 2847,  318,  316, 2847,
     2847, 2246, 2247, 2847,  325, 2847, 2847, 2245,  325, 2847,
      318,  315, 2249,  315,  318, 2847, 2248, 2847, 2847,  324,
      324,  316,  315, 2847,  315,  324,  315, 2847,  315, 2247,
     2847, 2847,  316, 2847, 2245, 2250,  316,  318,  324, 2249,

     2847, 2847,  324, 2248, 2847,  325,  325, 2847,  318, 2847,
     2847,  325,  318,  397,  397,  397,  397,  397,  397, 2251,
     2847, 2847, 2250,  398,  325,  324,  398, 2847,  325, 2847,
     2252, 2847, 2847, 2847, 2847, 2847,  324, 2847, 2847,  400,
      324, 2847,  400,  397,  397,  397, 2251, 2847, 2847, 2847,
     2847,  325, 2847,  398,  397,  397,  397, 2252,  397,  397,
      397, 2847,  325, 2847,  398, 2253,  325,  405,  398,  400,
      405, 2847,  397,  397,  397, 2254, 2847,  397,  397,  397,
      400, 2847,  398, 2847,  400, 2847, 2847,  398, 2847, 2847,
     2255, 2847, 2253,  406, 2847, 2847,  406,  405,  400,  397,

      397,  397, 2254,  400, 2847, 2261, 2847, 2847,  405,  398,
     2847, 2847,  405, 2256, 2847, 2847, 2847, 2255,  397,  397,
      397, 2847, 2847,  406, 2847,  400,  405, 2847,  398, 2847,
     2847,  405, 2261, 2847,  406,  397,  397,  397,  406, 2847,
     2256,  397,  397,  397,  400,  398, 2847, 2847,  397,  397,
      397,  398,  406,  405, 2847, 2847, 2847,  406,  398, 2847,
     2847,  400, 2847, 2847, 2847, 2847, 2847,  400,  397,  397,
      397, 2847, 2262, 2847,  400, 2847, 2847, 2263,  398,  406,
      397,  397,  397, 2847, 2264, 2847, 2847, 2847, 2847,  405,
      398,  397,  397,  397,  400,  405, 2847, 2847,  406, 2847,

     2847,  398,  405, 2847, 2263, 2847,  400, 2847, 2847, 2847,
     2847, 2264, 2847, 2266, 2847,  406, 2847,  400, 2847, 2267,
     2847,  406,  405, 2847, 2847, 2847, 2847, 2265,  406,  397,
      397,  397, 2847, 2847,  405, 2847, 2847, 2847, 2847,  398,
     2266,  397,  397,  397, 2847,  405, 2267, 2847,  406, 2847,
     2847,  398, 2847, 2847, 2265,  400,  397,  397,  397, 2847,
      406, 2847,  397,  397,  397, 2847,  398,  400,  397,  397,
      397,  406,  398, 2847,  397,  397,  397, 2268,  398, 2847,
     2847, 2847,  400,  405,  398, 2847, 2269, 2847,  400,  397,
      397,  397, 2847, 2847,  400,  405, 2847, 2847, 2847,  398,

      400, 2847, 2847, 2847, 2268, 2847, 2271, 2847, 2270,  406,
      405, 2847, 2847, 2269, 2847,  400,  405, 2847, 2847, 2847,
     2847,  406,  405, 2847,  397,  397,  397, 2847,  405, 2847,
      397,  397,  397, 2271,  398, 2270,  406, 2847, 2847, 2847,
      398, 2847,  406, 2272, 2847, 2847, 2847, 2273,  406, 2847,
      400,  397,  397,  397,  406, 2847,  400,  397,  397,  397,
     2274,  398, 2847,  397,  397,  397, 2847,  398, 2161,  406,
      397,  397,  397,  398, 2273, 2847, 2847,  400,  405, 2847,
      398, 2847, 2275,  400,  405, 2847, 2847, 2274, 2847,  400,
      397,  397,  397,  397,  397,  397,  400, 2847, 2276, 2847,

      398, 2847, 2847,  398,  406,  405, 2847, 2847, 2847, 2275,
      406,  405, 2847,  397,  397,  397,  400,  405, 2847,  400,
      397,  397,  397,  398,  405, 2276,  397,  397,  397, 2847,
      398,  406,  397,  397,  397, 2847,  398,  406, 2847,  400,
     2847, 2847,  398,  406, 2277, 2847,  400,  405, 2847, 2847,
      406, 2278,  400, 2847, 2847, 2847, 2847, 2847,  400,  397,
      397,  397, 2847, 2280, 2847, 2279, 2847,  405, 2847,  398,
      406, 2847, 2847,  406,  405, 2847, 2847, 2847, 2278, 2847,
      405,  397,  397,  397, 2847,  400,  405, 2847, 2847, 2847,
     2280,  398, 2279,  406,  397,  397,  397, 2847, 2847, 2847,

      406, 2847, 2847, 2847,  398, 2847,  406,  400,  397,  397,
      397, 2847,  406,  405,  397,  397,  397, 2847,  398, 2847,
      400, 2847, 2847, 2847,  398, 2847,  397,  397,  397, 2847,
     2847,  397,  397,  397,  400,  405,  398, 2847, 2847,  406,
      400,  398, 2847,  397,  397,  397, 2847, 2847, 2281, 2847,
     2847, 2847,  400,  398, 2847, 2282, 2847,  400, 2847, 2847,
     2847,  406,  405, 2847, 2847, 2847, 2847, 2847,  405,  400,
     2847, 2847, 2847, 2283,  406, 2847, 2847, 2847, 2284, 2847,
      405, 2847, 2282, 2847, 2847,  405, 2847, 2847,  406, 2847,
     2847, 2847, 2847, 2847,  406, 2847, 2847,  405, 2847, 2847,

     2283, 2847,  397,  397,  397, 2284,  406,  397,  397,  397,
     2847,  406,  398, 2847,  315, 2847,  315,  398, 2847, 2847,
     2285, 2847, 2847,  406,  316,  397,  397,  397,  400,  397,
      397,  397, 2847,  400, 2847,  398,  397,  397,  397,  398,
      318, 2847, 2847, 2847, 2286, 2847,  398, 2285,  397,  397,
      397,  400, 2847, 2287, 2847,  400,  405, 2847,  398, 2387,
     2847,  405,  400, 2847, 2290, 2288, 2847, 2847,  324, 2847,
     2289, 2286, 2847, 2847,  400,  397,  397,  397, 2847,  405,
     2287, 2847,  406,  405, 2847,  398, 2387,  406, 2847, 2847,
      405, 2290, 2288, 2847,  325, 2291, 2847, 2289,  397,  397,

      397,  400,  405, 2847, 2847,  406, 2847, 2847,  398,  406,
      397,  397,  397, 2847, 2847, 2847,  406, 2847, 2847, 2847,
      398, 2847, 2291, 2292,  400, 2847, 2847, 2847,  406,  405,
     2847, 2847, 2847, 2847, 2847, 2847,  400, 2132, 2132, 2132,
     2132, 2132, 2132, 2132, 2132, 2132, 2293, 2847, 2847, 2575,
     2292, 2575,  405, 2847, 2847,  406, 2847, 2847, 2847, 2576,
     2847, 1779, 2847, 2847,  405, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2293, 2847, 2577, 2847, 2847,  406, 2304,
     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2847, 2847,
      406, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,

      315,  315,  315,  315, 1920, 2847, 2847, 2847, 2847, 2847,
      316,  316,  315,  315,  315,  315, 2847, 2847, 2305, 2847,
     2847, 2847,  316,  316, 2847, 2847,  318,  318, 2847, 2578,
     2024, 1920, 2371, 2847, 2847,  315, 2847,  315,  318,  318,
     2847, 2847, 2372, 2847, 2847,  316, 2374, 2847, 2847, 2847,
     2847, 2847, 2847, 2847,  324,  324, 2847, 2847, 2847, 2371,
     2373,  318,  315, 2847,  315, 2847,  324,  324, 2847, 2372,
     2847, 2847,  316, 2374, 2847, 2847, 2847, 2847, 2847, 2847,
      325,  325, 2380, 2847,  315, 2847,  315, 2373,  318,  324,
     2847, 2847,  325,  325,  316, 2381, 2847,  315,  315,  315,

      315, 2847, 2847, 2382, 2847, 2847, 2847,  316,  316, 2380,
      318,  315, 2847,  315, 2847,  325,  324,  315, 2383,  315,
     2847,  316, 2381,  318,  318, 2847, 2385,  316, 2847,  315,
     2382,  315, 2847, 2384, 2847, 2847, 2847,  318,  324,  316,
     2847, 2847,  325,  318,  315, 2383,  315,  315, 2847,  315,
     2847,  324,  324, 2385,  316,  318, 2847,  316, 2386, 2847,
     2384, 2847, 2847, 2847,  325,  324, 2847, 2847, 2847, 2847,
      318,  324, 2847,  318, 2847, 2847, 2388,  325,  325, 2847,
     2389, 2847, 2847,  324, 2847, 2386,  315, 2847,  315, 2847,
      315,  325,  315, 2847, 2391, 2847,  316,  325,  324, 2847,

      316,  324, 2847, 2388, 2847, 2847, 2847, 2389, 2390,  325,
     2847, 2847,  318,  315, 2847,  315,  318, 2847, 2847, 2847,
     2847, 2391, 2847,  316,  325, 2847,  315,  325,  315, 2847,
     2847, 2392, 2847, 2847, 2847, 2390,  316, 2847, 2847,  318,
      324, 2847, 2847, 2847,  324, 2393, 2847,  315, 2394,  315,
     2847,  315,  318,  315, 2847, 2847, 2847,  316, 2392, 2847,
     2847,  316, 2847, 2847, 2847, 2847,  325,  324, 2847, 2847,
      325, 2847, 2393,  318, 2847, 2394,  315,  318,  315, 2847,
      324,  315,  315,  315,  315, 2847,  316,  315, 2847,  315,
     2847,  316,  316,  325, 2847, 2847, 2847,  316, 2847, 2847,

     2847,  324,  318, 2847, 2847,  324,  325,  318,  318, 2847,
     2847, 2395, 2847,  318,  315, 2396,  315, 2847,  315,  315,
      315,  315, 2847, 2847,  316, 2847, 2847,  325,  316,  316,
      324,  325, 2847, 2847, 2847,  324,  324, 2847, 2395, 2847,
      318,  324, 2396, 2847,  318,  318, 2847, 2847,  315, 2847,
      315, 2847, 2847, 2399, 2847, 2397,  325, 2847,  316, 2847,
     2847,  325,  325, 2847, 2398, 2847, 2847,  325,  324,  315,
     2847,  315,  324,  324,  318,  315, 2847,  315, 2847,  316,
     2399, 2847, 2397, 2847, 2847,  316,  315, 2847,  315, 2400,
     2847, 2398, 2847, 2847,  325,  318,  316, 2847,  325,  325,

     2847,  318,  324, 2847,  315, 2847,  315, 2847, 2401, 2847,
     2847, 2847,  318, 2847,  316, 2847, 2400,  397,  397,  397,
     2847, 2847, 2644,  324, 2644, 2847, 2847,  398,  325,  324,
      318, 2847, 2645, 2402, 2847, 2401,  397,  397,  397, 2847,
      324, 2847, 2847,  400, 2847, 2847,  398, 2847, 2646,  325,
     2847, 2403, 2847, 2417, 2847,  325, 2847, 2847,  324, 2847,
     2402, 2847,  400,  397,  397,  397,  325, 2847, 2404, 2847,
     2847,  405, 2847,  398, 2847,  397,  397,  397, 2403, 2847,
     2417,  397,  397,  397,  325,  398,  397,  397,  397,  400,
      405,  398, 2847, 2847, 2847, 2404,  398,  406, 2847, 2847,

     2847,  400, 2647,  901, 2405, 2847, 2847,  400, 2847, 2847,
     2847, 2847,  400, 2847, 2847, 2407,  406,  405, 2257, 2257,
     2257, 2847, 2406, 2847, 2847, 2847, 2847, 2847, 2258,  405,
      961, 2405, 2847, 2413, 2847,  405,  397,  397,  397, 2847,
      405, 2847, 2407,  406, 2259, 2414,  398, 2847, 2847, 2406,
     2847, 2847, 2847, 2847, 2847,  406, 2847,  397,  397,  397,
     2413,  406,  400,  397,  397,  397,  406,  398, 2847,  397,
      397,  397, 2414,  398,  397,  397,  397, 2415, 2847,  398,
     2847, 2847, 2847,  400,  398, 2847,  397,  397,  397,  400,
      405, 2416, 2847, 2847, 2847,  400,  398, 2418, 2260, 2847,

      400, 2847, 2847, 2847, 2415,  397,  397,  397, 2420, 2847,
     2847,  405,  400, 2847, 2847,  398,  406,  405, 2416, 2847,
     2847, 2419, 2847,  405, 2418, 2847, 2847, 2847,  405, 2847,
     2847,  400, 2847, 2421, 2847, 2420, 2847,  406, 2847, 2847,
      405, 2422, 2847,  406, 2847,  397,  397,  397, 2419,  406,
     2847, 2847, 2847, 2847,  406,  398, 2847, 2847, 2847,  405,
     2421, 2847,  397,  397,  397, 2847,  406, 2847, 2422, 2847,
     2847,  400,  398, 2847,  397,  397,  397, 2847, 2847, 2847,
     2423, 2847, 2847, 2847,  398,  406, 2847, 2847,  400, 2847,
     2847,  397,  397,  397,  397,  397,  397, 2847, 2847,  405,

      400,  398, 2847, 2847,  398, 2847, 2847, 2423, 2847, 2424,
     2847, 2847, 2847, 2847, 2847, 2847,  405,  400, 2847, 2847,
      400, 2847, 2847, 2847, 2847,  406, 2426, 2847,  405, 2847,
     2847, 2847, 2425, 2847, 2847, 2847, 2424, 2847, 2847, 2427,
     2847, 2847,  406, 2847, 2847,  405, 2847, 2847,  405, 2847,
      397,  397,  397, 2426,  406, 2847, 2847, 2847, 2847, 2425,
      398, 2847,  397,  397,  397, 2847, 2427,  397,  397,  397,
     2847,  406,  398, 2847,  406, 2847,  400,  398, 2847, 2847,
     2847, 2847, 2847, 2847,  397,  397,  397, 2847,  400, 2847,
     2847, 2847, 2847,  400,  398, 2847, 2847,  397,  397,  397,

     2847,  397,  397,  397,  405, 2847, 2847,  398, 2847, 2847,
      400,  398, 2847, 2847, 2847, 2847,  405, 2847,  397,  397,
      397,  405, 2428,  400, 2847, 2847, 2847,  400,  398, 2847,
      406, 2847, 2847, 2847, 2847,  397,  397,  397,  405, 2847,
     2847, 2847,  406, 2847,  400,  398, 2429,  406, 2847, 2428,
     2847,  405,  397,  397,  397,  405,  397,  397,  397, 2847,
     2847,  400,  398, 2847,  406, 2847,  398, 2847, 2847,  397,
      397,  397,  405, 2429, 2847, 2847, 2430,  406,  400,  398,
     2847,  406,  400,  397,  397,  397, 2432, 2847, 2847,  405,
      397,  397,  397,  398, 2847,  400, 2847, 2847,  406, 2847,

      398, 2847, 2431, 2430, 2847, 2847,  405, 2847, 2434,  400,
      405, 2847, 2847, 2432, 2847,  406,  400,  397,  397,  397,
      397,  397,  397,  405, 2433, 2847, 2847,  398, 2847, 2431,
      398, 2847,  406, 2847, 2847, 2434,  406,  405, 2847, 2847,
     2847, 2847, 2847,  400,  405, 2847,  400, 2847, 2847,  406,
     2847, 2433, 2847, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 2847,  406, 2435, 2847, 2847, 2436, 2847, 2847,
      406,  405, 2847, 2847,  405, 2297, 2297, 2297, 2297, 2297,
     2297, 2297, 2297, 2297, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2435, 1044, 2847, 2436, 2847, 2847,  406, 2847, 2847,

      406, 2441, 2441, 2441, 2441, 2441, 2441, 2441, 2441, 2441,
     2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 2304,
     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304,
     2304, 2304, 2304, 2304, 2304, 2304, 2304,  315,  315,  315,
      315, 2847, 2847, 2847, 1920, 2847, 2847,  316,  316,  315,
      315,  315,  315, 2847, 2847, 2847, 2847, 2847, 2305,  316,
      316, 2847, 2847,  318,  318, 2847, 2847,  315, 2485,  315,
     2847, 1920,  315, 2847,  315,  318,  318,  316, 2847,  315,
     2847,  315,  316, 2847, 2847, 2486, 2847, 2847, 2847,  316,
     2847,  324,  324,  318, 2847, 2485, 2847, 2487,  318,  315,

     2847,  315, 2847,  324,  324,  318, 2847, 2847, 2494,  316,
     2847, 2847, 2486, 2847, 2847, 2495, 2847,  325,  325, 2847,
     2847,  324, 2847, 2847, 2487,  318,  324, 2847, 2847,  325,
      325, 2847, 2847,  324,  315, 2494,  315, 2847,  315, 2847,
      315, 2497, 2495, 2847,  316, 2847, 2847,  325,  316, 2847,
     2847, 2847,  325,  324, 2847, 2847, 2847, 2847, 2847,  325,
      318,  315, 2847,  315,  318,  315, 2847,  315, 2497, 2847,
      315,  316,  315, 2847,  315,  316,  315, 2847, 2498,  325,
      316, 2847, 2496, 2847,  316, 2847, 2847,  318,  324, 2847,
     2847,  318,  324, 2847, 2847, 2499,  318,  315, 2847,  315,

      318,  315, 2847,  315, 2847, 2498, 2847,  316, 2847, 2496,
     2847,  316, 2847, 2847,  325,  324, 2847, 2847,  325,  324,
     2847, 2500, 2499,  318,  324, 2847, 2847,  318,  324, 2847,
      315, 2847,  315, 2502, 2847, 2847, 2501, 2847, 2847, 2847,
      316,  325,  315, 2847,  315,  325, 2847,  315, 2500,  315,
      325,  324,  316, 2847,  325,  324,  318,  316, 2847,  315,
     2502,  315, 2847, 2501,  315, 2847,  315, 2847,  318,  316,
     2847, 2847, 2847,  318,  316, 2847,  315,  325,  315, 2847,
     2847,  325, 2847, 2847,  324,  318,  316, 2847, 2503, 2847,
      318, 2847, 2504, 2847, 2847,  315,  324,  315,  315, 2847,

      315,  324,  318, 2847, 2847,  316, 2847,  315,  316,  315,
      325, 2847, 2847,  324, 2847, 2503, 2505,  316,  324, 2504,
     2847,  318,  325, 2847,  318, 2847, 2847,  325, 2847, 2847,
      324, 2847,  315,  318,  315, 2506, 2847, 2847,  315,  325,
      315, 2847,  316, 2505,  325,  315, 2847,  315,  316,  324,
     2847, 2847,  324, 2847, 2847,  316,  325, 2847,  318, 2847,
     2847,  324, 2506, 2847,  318, 2847, 2847,  397,  397,  397,
     2847,  318,  397,  397,  397,  325, 2847,  398,  325,  397,
      397,  397,  398, 2847, 2847, 2847,  324,  325, 2847,  398,
     2847, 2847,  324,  400,  397,  397,  397, 2847,  400,  324,

     2847, 2847, 2847, 2507,  398,  400,  397,  397,  397,  397,
      397,  397,  325,  315, 2508,  315,  398, 2847,  325,  398,
      400,  405, 2847,  316, 2847,  325,  405, 2509, 2847, 2847,
     2507, 2847,  400,  405, 2847,  400,  397,  397,  397,  318,
     2847, 2508, 2516, 2847, 2847, 2517,  398,  406,  405, 2847,
     2847, 2847,  406, 2847, 2509,  397,  397,  397, 2847,  406,
      405, 2847,  400,  405, 2847,  398, 2847,  324, 2847, 2516,
     2847, 2847, 2517, 2847,  406,  397,  397,  397,  397,  397,
      397,  400,  397,  397,  397,  398,  406, 2847,  398,  406,
      405, 2847,  398,  325, 2847,  397,  397,  397, 2847, 2847,

     2847,  400, 2847, 2518,  400,  398, 2847, 2847,  400,  405,
     2847, 2847,  397,  397,  397, 2847,  406, 2519, 2520, 2847,
     2847,  400,  398, 2847, 2847, 2521, 2847, 2847, 2847,  405,
     2518, 2847,  405, 2847, 2847,  406,  405, 2847,  400, 2847,
     2847,  397,  397,  397, 2519, 2520,  397,  397,  397,  405,
     2847,  398, 2521, 2847, 2847,  406,  398, 2847,  406, 2847,
     2847, 2847,  406,  397,  397,  397,  405,  400, 2847, 2847,
     2847, 2847,  400,  398, 2847,  406,  397,  397,  397, 2847,
      397,  397,  397, 2847, 2847, 2523,  398, 2847, 2522,  400,
      398, 2847,  406, 2847, 2847,  405, 2847,  397,  397,  397,

      405, 2847,  400,  397,  397,  397,  400,  398, 2524, 2847,
     2847, 2847, 2523,  398, 2847, 2522, 2847,  405,  397,  397,
      397,  406, 2847,  400, 2847, 2847,  406, 2847,  398,  400,
      405, 2847, 2847, 2847,  405, 2524, 2526, 2847, 2525, 2847,
      397,  397,  397,  406,  400,  397,  397,  397, 2847, 2847,
      398,  405,  397,  397,  397,  398,  406,  405, 2847, 2847,
      406, 2847,  398, 2526, 2847, 2525,  400, 2847, 2847, 2847,
     2527,  400,  405, 2847,  397,  397,  397,  406,  400,  397,
      397,  397, 2847,  406,  398,  397,  397,  397, 2847,  398,
     2847,  397,  397,  397,  405,  398, 2847, 2527,  406,  405,

      400,  398, 2528, 2847, 2847,  400,  405, 2847, 2847, 2847,
     2847,  400,  315, 2847,  315, 2847, 2847,  400, 2847, 2847,
      406, 2847,  316, 2847, 2847,  406, 2847, 2847,  405, 2528,
     2847, 2847,  406,  405, 2847, 2847, 2847, 2847,  318,  405,
     2568, 2847, 2847, 2847, 2847,  405, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847,  406, 2847, 2847, 2847, 2847,  406,
     2847, 2847, 2847, 2847, 2847,  406,  324, 2568, 2847, 2847,
     2847,  406, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442,
     2847,  315,  325,  315,  315, 2847,  315, 2302, 2847, 2847,

      315,  316,  315, 2847,  316,  315,  315,  315,  315, 2847,
      316, 2532, 2847, 2847, 2847,  316,  316,  318, 2847, 2847,
      318, 2847, 2569, 2847, 2302,  315,  318,  315, 2847, 2847,
     2847,  318,  318, 2847, 2847,  316, 2579, 2847, 2847, 2847,
     2580, 2847,  315, 2847,  315,  324, 2847, 2847,  324, 2569,
     2581,  318,  316, 2847,  324,  315, 2847,  315, 2847,  324,
      324, 2847,  315, 2579,  315,  316, 2582, 2580,  318, 2847,
     2847,  325,  316, 2847,  325, 2847, 2847, 2581, 2847,  324,
      325,  318, 2847, 2847, 2585,  325,  325, 2583,  318,  315,
     2847,  315,  315, 2582,  315, 2847,  324, 2847, 2584,  316,

     2847, 2847,  316, 2847, 2847,  325, 2847, 2847, 2847,  324,
      315, 2585,  315, 2847, 2583,  318,  324, 2847,  318,  315,
      316,  315,  325, 2587, 2847, 2584, 2847, 2847,  315,  316,
      315, 2847, 2586, 2847, 2847,  325,  318, 2847,  316,  397,
      397,  397,  325,  324, 2847,  318,  324, 2847, 2847,  398,
     2587,  397,  397,  397,  318, 2847, 2847, 2847, 2847, 2586,
     2847,  398, 2847, 2847, 2588,  400, 2847, 2589, 2847,  325,
     2847, 2847,  325,  324, 2592, 2592, 2592,  400, 2847, 2590,
     2847, 2847,  324, 2847, 2593,  397,  397,  397, 2847, 2847,
      325, 2847, 2847,  405, 2589,  398, 2847, 2847, 2847,  325,

     2594, 2847, 2597, 2597, 2597,  405, 2590, 2847,  325, 2847,
     2847,  400, 2598, 2847, 1844, 2847, 2591, 2847, 2847,  406,
      397,  397,  397,  397,  397,  397, 2847, 2847, 2599, 2847,
      398,  406, 2847,  398,  397,  397,  397, 2847, 2847,  405,
      397,  397,  397, 2591,  398, 2847,  400, 2847, 2847,  400,
      398, 2847, 2847, 2847, 2595,  692, 2847, 2847, 2847, 2847,
      400, 2847, 2601, 2602, 2847,  406,  400, 2847, 2847, 2847,
      397,  397,  397, 2847,  405, 2847, 2847,  405, 2847, 2603,
      398, 2604, 2600, 2079, 2847,  397,  397,  397,  405, 2601,
     2602, 2847, 2847, 2847,  405,  398,  400,  397,  397,  397,

      406, 2847, 2847,  406, 2847, 2847, 2603,  398, 2604, 2847,
     2847,  400, 2847, 2847,  406, 2847, 2847, 2605, 2847, 2847,
      406, 2847, 2847,  400,  405, 2847,  397,  397,  397, 2847,
      397,  397,  397, 2606, 2847, 2847,  398, 2847, 2847,  405,
      398, 2847, 2847, 2847, 2605,  397,  397,  397, 2847, 2847,
      406,  405,  400, 2847, 2847,  398,  400,  397,  397,  397,
     2606, 2847,  397,  397,  397,  406, 2847,  398, 2607, 2847,
     2847,  400,  398, 2608, 2847, 2847, 2609,  406, 2847, 2847,
      405, 2847, 2847,  400,  405, 2847, 2847, 2847,  400, 2847,
     2847,  397,  397,  397, 2847, 2607, 2847, 2847, 2847,  405,

     2608,  398, 2575, 2609, 2575, 2847,  406, 2847, 2847, 2847,
      406, 2610, 2576, 2847, 1779, 2847,  405,  400, 2847, 2847,
     2847, 2847, 2847, 2847, 2847,  406, 2847, 2847, 2577, 2847,
     2611, 2847, 2847, 2847, 2847, 2847, 2847,  406, 2847, 2847,
     2847, 2847,  406, 2847, 2847,  405, 2847, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2847, 2611, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531,  315,  315,  315,
      315,  406, 2302, 2847, 2847, 2847, 2847,  316,  316, 2847,
     2847, 2847, 2578, 1780, 2847, 2847, 2532,  315, 2847,  315,
     2847, 2847, 2847,  318,  318, 2847, 2847,  316, 2847, 2302,

     2641, 2847, 2847, 2847,  315,  315,  315,  315,  315, 2847,
      315, 2847, 2640,  318,  316,  316, 2847, 2847,  316, 2847,
     2847,  324,  324, 2847, 2847, 2847, 2847, 2641, 2651, 2847,
      318,  318, 2847, 2653,  318,  315, 2652,  315, 2847, 2640,
      315,  324,  315, 2847,  315,  316,  315,  325,  325, 2847,
      316, 2847, 2847, 2847,  316, 2651, 2847, 2847,  324,  324,
     2653,  318, 2654, 2652, 2847, 2847,  318,  325, 2847,  315,
      318,  315, 2847,  315, 2656,  315, 2847, 2847, 2847,  316,
     2847, 2847, 2655,  316,  325,  325, 2847, 2847,  325,  324,
      315, 2847,  315, 2847,  324,  318, 2847, 2847,  324,  318,

      316, 2656, 2847,  397,  397,  397, 2847, 2658, 2847, 2655,
     2847, 2847, 2644,  398, 2644,  325,  318, 2847, 2847, 2847,
      325, 2847, 2645,  324,  325, 2847, 2847, 2657, 2847,  400,
     2847, 2847, 2847, 2847, 2658,  397,  397,  397, 2646, 2847,
     2592, 2592, 2592, 2847,  324,  398, 2847, 2847, 2659,  325,
     2593, 2847, 2847,  325, 2847, 2847, 2847,  405, 2663, 2663,
     2663,  400, 2597, 2597, 2597, 2847, 2594, 2660, 2664,  315,
      325,  315, 2598, 2847, 1844, 2659,  397,  397,  397,  316,
     2847, 2847, 2847,  406, 2665, 2847,  398, 2847, 2599,  405,
     2847, 2847, 2647,  901, 2660,  318,  397,  397,  397,  397,

      397,  397,  400,  397,  397,  397,  398, 2847, 2847,  398,
     2847, 2847, 2847,  398, 2847,  406, 2847, 2670, 2847, 2847,
     2595,  692,  400,  324, 2847,  400, 2847, 2672, 2671,  400,
      405, 2847, 2847, 2847, 2847,  397,  397,  397, 2666,  966,
     2847, 2847, 2600, 1845, 2670,  398, 2847, 2847, 2847,  325,
      405, 2847, 2847,  405, 2672, 2671,  406, 2673,  397,  397,
      397,  400,  397,  397,  397, 2847, 2847, 2847,  398, 2847,
     2847, 2847,  398, 2847, 2847, 2847,  406, 2847, 2847,  406,
      397,  397,  397,  406,  400,  397,  397,  397,  400,  405,
      398,  315, 2675,  315, 2847,  398, 2847, 2847, 2847, 2847,

     2674,  316, 2847,  397,  397,  397,  400, 2847, 2847, 2847,
     2847,  400,  405,  398, 2847,  406,  405,  318, 2847, 2675,
      315, 2847,  315, 2847, 2847, 2847, 2847, 2674, 2677,  400,
      316, 2847, 2847, 2847,  405, 2847, 2847, 2847,  406, 2676,
     2847, 2847,  406, 2700, 2847,  324,  318, 2847, 2847, 2847,
     2847, 2847,  315, 2847,  315, 2677,  315,  405,  315, 2847,
      406, 2847,  316, 2847, 2847,  406,  316, 2847, 2847, 2847,
     2700,  325, 2847, 2847,  324, 2847, 2847, 2847,  318,  315,
     2847,  315,  318,  406, 2847, 2847, 2847, 2847, 2707,  316,
     2847,  315,  315,  315,  315, 2847, 2847,  315, 2847,  315,

      325,  316,  316, 2706, 2847,  318,  324,  316, 2847, 2847,
      324, 2847, 2847, 2847, 2847, 2707, 2847,  318,  318, 2847,
     2708, 2847, 2847,  318, 2847, 2711, 2847, 2847, 2847, 2709,
     2706, 2847,  325,  324, 2847, 2847,  325, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847,  324,  324, 2708,  397,  397,
      397,  324, 2711,  397,  397,  397, 2709, 2847,  398,  325,
     2847, 2710, 2847,  398, 2847, 2663, 2663, 2663, 2847, 2847,
     2847,  325,  325, 2847,  400, 2664, 2847,  325, 2847,  400,
      397,  397,  397,  397,  397,  397, 2847, 2847, 2710, 2847,
      398, 2665, 2847,  398, 2847,  397,  397,  397, 2847, 2847,

     2712, 2847,  405, 2847, 2847,  398,  400,  405, 2847,  400,
     2847, 2847, 2847, 2847,  397,  397,  397, 2847, 2847, 2847,
     2847,  400, 2847, 2847,  398, 2847, 2847, 2712,  406, 2847,
     2847, 2847, 2847,  406,  405, 2847, 2847,  405, 2847, 2719,
      400, 2847, 2718, 2847, 2847, 2666,  966, 2847, 2847,  405,
     2847,  397,  397,  397, 2847, 2720, 2847,  397,  397,  397,
      406,  398, 2847,  406, 2847, 2847, 2719,  398,  405, 2718,
     2847, 2847, 2847, 2847, 2575,  406, 2575,  400, 2847, 2847,
     2847, 2847, 2720,  400, 2576, 2723, 1779, 2847, 2847, 2721,
     2847, 2847, 2847,  315,  406,  315, 2847,  315, 2847,  315,

     2577, 2847, 2847,  316,  315,  405,  315,  316,  315, 2847,
      315,  405, 2723, 2847,  316, 2847, 2721, 2722,  316,  318,
     2847, 2847, 2847,  318, 2847, 2847, 2847, 2847, 2847, 2740,
      318,  406, 2847,  315,  318,  315, 2741,  406,  315, 2847,
      315, 2847, 2847,  316, 2722, 2847, 2847,  324,  316, 2847,
     2847,  324, 2847, 2847, 2578, 1780, 2740, 2847,  324,  318,
     2847, 2847,  324, 2741,  318,  397,  397,  397, 2847, 2742,
     2847, 2847, 2847,  325, 2847,  398, 2847,  325, 2847,  397,
      397,  397, 2847, 2847,  325, 2847, 2847,  324,  325,  398,
     2743,  400,  324, 2847, 2847, 2847, 2742, 2597, 2597, 2597,

      397,  397,  397, 2847, 2847,  400, 2847, 2598, 2847, 1844,
      398, 2847, 2847,  325,  315, 2744,  315, 2743,  325,  405,
      397,  397,  397, 2599,  316, 2847,  400,  397,  397,  397,
      398, 2847, 2847,  405,  397,  397,  397,  398, 2847, 2745,
      318, 2847, 2744, 2847,  398,  406,  400,  397,  397,  397,
     2847, 2847, 2847,  400,  405, 2847, 2762,  398, 2847,  406,
      400,  315, 2847,  315, 2847,  315, 2745,  315,  324, 2847,
     2746,  316, 2847,  400,  405,  316, 2847, 2600, 1845, 2847,
      406,  405,  315, 2762,  315, 2847, 2847,  318,  405, 2847,
     2847,  318,  316, 2847,  325, 2847, 2847, 2746, 2847, 2747,

      406,  405, 2847, 2763, 2847, 2764, 2847,  406,  318, 2847,
     2847,  397,  397,  397,  406,  324, 2847, 2847, 2847,  324,
     2847,  398, 2847, 2847, 2847, 2847, 2747,  406, 2847, 2847,
     2763, 2847, 2764,  397,  397,  397,  324,  400,  397,  397,
      397,  325, 2847,  398,  315,  325,  315, 2847,  398, 2847,
      397,  397,  397, 2765,  316, 2847,  315, 2847,  315,  400,
      398, 2847,  325, 2847,  400,  405,  316, 2847, 2847,  315,
      318,  315, 2847, 2847, 2847, 2766,  400, 2847, 2767,  316,
     2765, 2847,  318, 2847, 2847, 2782, 2847,  405, 2784, 2847,
     2847,  406,  405, 2847, 2847,  318, 2847, 2847,  324, 2783,

     2847, 2847, 2766, 2847,  405, 2767,  397,  397,  397, 2847,
      324, 2847, 2782,  406, 2847, 2784,  398, 2847,  406, 2847,
     2847, 2847, 2847,  324,  325, 2847, 2783,  397,  397,  397,
      406, 2847,  400,  397,  397,  397,  325,  398, 2847, 2847,
      315, 2847,  315,  398,  315, 2847,  315, 2785, 2847,  325,
      316, 2847, 2847,  400,  316, 2847, 2847, 2786, 2847,  400,
      405, 2847,  315, 2847,  315, 2787,  318,  397,  397,  397,
      318, 2847,  316, 2847, 2785, 2847, 2847,  398, 2847, 2847,
     2847,  405, 2799, 2847, 2786, 2847,  406,  405,  318,  397,
      397,  397, 2787,  400,  324, 2847, 2847, 2847,  324,  398,

     2847, 2847,  397,  397,  397, 2847, 2847,  406,  315, 2799,
      315, 2847,  398,  406, 2847,  400,  324, 2847,  316, 2847,
      325,  405, 2847, 2847,  325, 2847, 2847, 2800,  400,  397,
      397,  397, 2847, 2847,  318, 2847, 2847, 2847, 2847,  398,
     2847, 2847,  325,  405, 2847, 2847, 2847,  406, 2847, 2847,
     2847, 2847, 2847, 2847, 2800,  400,  405, 2847, 2847, 2847,
     2847, 2847,  324, 2847, 2847, 2847, 2847, 2847, 2847,  406,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847,  406,  405, 2847, 2847, 2847, 2847,  325, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,  406,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      210,  210,  210,  210,  210,  210,  210,  271,  271,  271,
      271,  271,  271,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  280,
      280,  280,  280,  280,  280,  280,  282,  282,  282,  282,
      282,  282,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  317, 2847,  317, 2847, 2847, 2847,
     2847, 2847,  317,  317,  317,  317,  317,  317,  317,  396,
      396,  396,  396,  396,  396,  399,  399,  399, 2847, 2847,
     2847, 2847, 2847,  399,  399,  399,  399,  399,  399,  399,
      460,  460,  460,  460,  460,  460,  478,  478,  478,  478,

      478, 2847,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  481,  481, 2847, 2847,  481,
      481, 2847,  481,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  490,  490, 2847,  490,
      490, 2847,  490,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  280,  280,  280,  280,  280,
      280,  280,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  317, 2847,  317, 2847,
     2847, 2847, 2847, 2847,  317,  317,  317,  317,  317,  317,
      317,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  755,  755, 2847,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  786,  786, 2847, 2847, 2847,  786,  786,  786,
      796,  796, 2847, 2847, 2847,  796,  796,  796,  799,  799,
     2847, 2847, 2847,  799, 2847,  799,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  317, 2847,  317, 2847,
     2847, 2847, 2847, 2847,  317,  317,  317,  317,  317,  317,
      317,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  399,
      399,  399, 2847, 2847, 2847, 2847, 2847,  399,  399,  399,
      399,  399,  399,  399,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  755,  755, 2847,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  786,  786, 2847, 2847, 2847,
      786,  786,  786,  796,  796, 2847, 2847, 2847,  796,  796,
      796, 1064, 1064, 2847, 2847, 2847, 1064, 2847, 1064, 1067,
     1067, 2847, 2847, 2847, 2847, 1067,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  317, 2847,

      317, 2847, 2847, 2847, 2847, 2847,  317,  317,  317,  317,
      317,  317,  317,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  399,  399,  399, 2847, 2847, 2847, 2847, 2847,  399,
      399,  399,  399,  399,  399,  399,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,  755,  755,
     2847,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  786,  786, 2847, 2847, 2847,  786,
      786,  786,  796,  796, 2847, 2847, 2847,  796,  796,  796,
     1343, 1343, 2847, 2847, 2847, 1343, 2847, 1343, 1356, 2847,
     2847, 2847, 1356, 1356, 1356, 1367, 2847, 2847, 2847, 1367,
     1367, 1367, 1371, 1371, 2847, 2847, 2847, 1371, 2847, 1371,
     1067, 1067, 2847, 2847, 2847, 2847, 1067,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  867,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  317, 2847,  317, 2847, 2847, 2847, 2847,
     2847,  317,  317,  317,  317,  317,  317,  317, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      399,  399,  399, 2847, 2847, 2847, 2847, 2847,  399,  399,
      399,  399,  399,  399,  399, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      755,  755, 2847,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  786,  786, 2847, 2847,

     2847,  786,  786,  786, 1356, 2847, 2847, 2847, 1356, 1356,
     1356,  796,  796, 2847, 2847, 2847,  796,  796,  796, 1658,
     2847, 2847, 2847, 1658, 1658, 1658, 1367, 2847, 2847, 2847,
     1367, 1367, 1367, 1661, 1661, 2847, 2847, 2847, 1661, 2847,
     1661, 1664, 2847, 2847, 2847, 1664, 1664, 1664,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  317, 2847,  317, 2847, 2847, 2847, 2847, 2847,
      317,  317,  317,  317,  317,  317,  317, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  399,  399,  399, 2847, 2847,
     2847, 2847, 2847,  399,  399,  399,  399,  399,  399,  399,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  755,  755,
     2847,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755, 1905, 2847, 2847, 2847, 1905, 1905,
     1905, 1915, 2847, 2847, 2847, 1915, 1915, 1915, 1919, 1919,
     2847, 2847, 2847, 1919, 2847, 1919, 1658, 2847, 2847, 2847,
     1658, 1658, 1658, 1343, 1343, 2847, 2847, 2847, 1343, 2847,
     1343, 1664, 2847, 2847, 2847, 1664, 1664, 1664,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
     2135, 2135, 2847, 2847, 2847, 2135, 2847, 2135, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960, 2297, 2847, 2847, 2847, 2297, 2297, 2297, 2301,
     2301, 2847, 2847, 2847, 2301, 2847, 2301, 2377, 2377, 2377,
     2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377,
     2377, 2377, 2377, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2442,
     2442, 2847, 2847, 2847, 2442, 2847, 2442, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
     2463, 2463, 2463, 2488, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2491,
     2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,

     2491, 2491, 2491, 2491, 2491, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513,
     2513, 2513, 2513, 2513, 2513, 2513, 2513, 2550, 2550, 2550,
     2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550,
     2550, 2550, 2550,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965, 2703,
     2703, 2703, 2703, 2703, 2703, 2703, 2703, 2703, 2703, 2703,
     2703, 2703, 2703, 2703, 2703, 2715, 2715, 2715, 2715, 2715,
     2715, 2715, 2715, 2715, 2715, 2715, 2715, 2715, 2715, 2715,
     2715,   39, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847
    } ;

static yyconst flex_int16_t yy_chk[22266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,   31,   32,   37,   38, 2836,
       37,   38,   55,   55,   31,   32,   31,   32,   41,   41,

       41,   42,   42,   42,   67,    3,    4,   43,   46,   43,
       46, 2834,   43,   46,  203,  203,   67,   97,   97,   97,
      104,  104,  104,  114, 2832,  114,  181,  181,  181,  325,
      325,   67,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    8,   44,    7,    8,   59,   44,
     2831,   60,   62,   44,   62,   82,    7,    8,   59,   70,
       59,   99,  100,  107,   62,   60, 2829,   62,   70,    5,
        7,    8,   44,    7,    8,   59,   44,   60,   60,   62,

       44,   62,   82,    7,    8,   59,   70,  181,   99,  100,
      107,   62,   60,    7,    8,    5,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    9,   10,   65,    9,
       10, 2827,    9,   10,   77,   68,   65, 2340,  109,    9,
       10,   68,    9,   10, 1732,   11,   77,   68,   11,   65,
      406,  406,    6,    9,   10,   65,    9,   10,   11,    9,
       10,   77,   68,   65,   11,  109,    9,   10,   68,    9,
       10,   12,   11, 2714,   12,   11,    9,   10,    6,    6,

      313,  111,  313, 2702,   12,   11,   13,   13,   13, 2662,
       12,   11,   14,   14,   14,   11,   13, 2643,   12,   75,
       71,   12,   14,   15,  110,   15,   15,   16,  111,   16,
       16,   12,  110,   75, 2340,  112,   15,   12,   13,   90,
       16,   12,   71, 1732,   14,   75,   75,   71,   90,   93,
       15,  110,   15,   15,   16,   13,   16,   16,   93,  110,
       75,   14,  112,   15, 2218,   13,   90,   16,  804,  804,
       88,   14,   23,   15,   23,   23,   93,   16,   24, 2218,
       24,   24,   13,  116,   88,   23,   13, 1760,   14,   58,
     2563,   24,   14,   17,   17,   17,   88,   88, 2559,   23,

       58,   23,   23,   17,   58,   24,   58,   24,   24, 2555,
      116,   88,   23,   58,  108, 2463,   58,   17,   24,  810,
       63,   66,   23,   17,  108,   17,   17,   58,   24,   17,
       66,   58, 2550,   58,   63,   66,  229,   63,   17,   66,
       63,  108,  211,   17,   91,   91,   63,   63,   66,  211,
       17,  108,   17,   17,  229,  166,   17,   66,   27,   27,
       27,   63,   66,  229,   63,   17, 1760,   63,  810,  211,
       17,   91,   91,   17,   18,   18,   18,  166,   69,  895,
      895,   92,  166, 2510,   18,  216,   69, 2488,   27,   92,
       69,   27, 2463,   91,   91,   72, 2465,  216,   18,   69,

      258,   27,   92,   72,   18,   69,   18,   18,   92,   95,
       18,  258,  216,   69,   72,   27,   92,   69,   27,   18,
      164,   72,   72,   95,   18,  230,  164,  258,   27, 2409,
       72,   18,  164,   18,   18,   95,   95,   18,   27, 2376,
      230,   72,  182,  182,  182, 2258,   18,  164,  961,  961,
       95,   18,  230,  164,   18,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   25,   25, 2217,   25,   28,   28,   28, 1766,  163,
       25, 1579,   25,  168,   25,  213,   25,   25,  163,  159,
      159, 1578,  168,  163,  213, 1576,  159,  163,   25,   25,
      159,   25, 1505,   79, 2259,   28,  163,   25,   28,   25,
      168,   25,  213,   25,   25,  163,  159,  159,   28, 2259,
      163,   25,   29,  159,  101,  101,   29,  159, 1195,   79,
       79,  224,   28, 1197, 1197,   28,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   28,   30,  298,  298,  298,

       30,  101,  101,  224,  234,   28,   79,   79,  224, 1504,
       30,   30,   30,   30,   30,   30,   30,   30,   30, 1196,
      124,  219,  124,  101,  101,   29,  234, 1502,   79,   79,
      124,  234, 1481,  183,  219,  183,  113,  113,  183,  186,
      188,  186,  188, 1768,  186,  188,  124, 1195,  219,   30,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       74, 1268,  217,  113,  113,   74, 1193,   50,   74,  217,
       74,   50, 1181, 1196,  124,   74,   50,   76,   76,  279,
      290,  291,   50,   74,   76,  113,  113,   74,   76,  217,
       50,  126,   74,  126,   50,   74,   76,   74,   50,   89,

      124,  126,   74,   50,   76,   76,  279,  290,  291,   50,
       61,   76,  226,   89, 1981,   76,   89,  126,  189,   89,
      189,  212, 1768,  189,  226,   89,   89,  482, 1167,  482,
       94,  126,  482,   61,  165,  165, 1272, 1272,   94,  226,
       89,   61,  212,   89,  212,  126,   89,   61,  212,   94,
       61,  102,   61,  102,  218,   61,   94,   94,  126,   61,
       61, 1139,  218,  102,  165,   94,  102, 1068,   61,  212,
      483,  126,  483,  165,   61,  483,   94,   61,  102,   61,
      102,  218,   61,   73,  118, 1067,  118,  965,  222,  221,
      102,  165, 1270, 1981,  118,  123,  221,  123,  146,  146,

      146,  222,  125,  960,  125,  123,   73,  232,  146,  900,
      118, 1271,  125,   73,   73,  222,  221,  227,  894,  232,
       73,  123, 1503,   73,  146,  227,  118,  123,  125,  128,
       73,  128,   73,   73,  232,  125,  118, 1577,  118,  128,
       73,   73,  123,  125,  227,  238,  233,   73,  893,  123,
       73,  880,  146,  118,  123,  128,  125,   73,  117,  233,
      117, 1270,  125,  118,  118, 1271,  237,  238,  117,  123,
      125,  128,  238,  233, 1778,  123,  867,  128,  146,  237,
      514,  514,  125,  128,  117, 1779, 1779,  231,  117,  117,
      228, 1503,  130,  237,  130,  161,  231,  161,  128,  117,

      862,  228,  130,  117,  128,  117, 1577,  161,  239,  128,
      161,  861,  117,  228,  231,  117,  117,  228,  130,  514,
      239,  129,  161,  129,  161,  130,  117,  240,  228,  859,
      117,  129,  117,  130,  161,  239,  854,  130,  117,  119,
      484,  119,  484, 1778,  242,  484,  130,  129,  852,  119,
      240,  851,  130,  129,  240, 1779,  153,  153,  153,  242,
      130,  849, 1780,  129,  130,  119,  153,  119,  236,  129,
      119,  242,  130,  848,  136,  129,  136,  246,  119,  236,
      129,  119,  153, 1843,  136,  241,  236,  119,  153,  246,
      129,  241,  847,  119,  119,  236,  129,  119,  241,  248,

      136,  129,  136,  844,  246,  119,  236,  132,  119,  132,
      153,  296,  241,  254,  119,  153,  136,  132,  241,  119,
      120,  248,  120,  132,  249,  120,  248, 1845,  136,  136,
      120, 1780,  131,  132,  131,  254,  153,  250,  296,  132,
      254,  253,  131,  136,  260,  249,  120,  843,  120,  253,
      250,  249, 1843,  256,  136,  255,  120,  260,  131, 1844,
     1844,  132,  120, 2377,  250,  120,  132,  120,  253,  255,
      120,  260,  259,  835,  120,  120,  256,  131,  834,  131,
      256,  131,  255,  120, 2375, 2375,  131,  132,  262,  120,
      259,  267,  120,  273,  120,  262, 1845,  120,  267,  259,

      120,  121,  190,  121,  131,  190,  131,  138,  131,  138,
     2008,  121,  131, 2408, 2408,  262, 2015,  138,  267,  264,
      273,  141,  141,  141,  147,  147,  147,  121,  264, 1844,
      832,  141, 2377,  138,  147,  190,  828,  190,  273,  190,
      121,  190,  121,  190,  824,  121,  264,  141, 2379,  138,
      147,  822,  121,  269,  819,  121,  261,  147,  817,  263,
      269,  138,  190,  141,  190,  147,  190,  121,  190,  121,
      190,  257,  121,  141,  261,  141,  138,  263,  147,  121,
      269,  121,  122,  261,  147,  122,  263,  138,  816, 2008,
      141,  257,  147,  122,  268, 2015,  122,  257,  257,  122,

      141,  141,  122,  268,  147,  142,  142,  142,  122,  122,
      265,  815,  122,  274,  812,  142,  266, 2379,  257,  811,
      122,  268,  150,  122,  152,  802,  122,  300,  265,  122,
      127,  142,  749,  142,  266,  301,  150,  265,  152,  150,
      274,  152,  150,  266,  152,  691,  270,  142,  150,  150,
      152,  152,  285,  127,  300,  270,  127,  127,  274,  142,
      142,  127,  301,  150,  285,  152,  150,  127,  152,  150,
      127,  152,  127,  270,  142,  127,  690,  275,  684,  285,
      127,  157,  617,  127,  127,  142, 2378, 2378,  127, 2553,
      149,  149,  149,  251,  127,  157,  283,  127,  157,  127,

      149,  157,  127,  133,  275,  133,  251,  157,  157,  283,
      616,  284,  609,  133,  288,  251,  149,  275,  608,  133,
      251,  289,  157,  283,  284,  157,  607,  288,  157,  133,
      289,  133,  149,  251,  167,  294,  286,  167,  284,  133,
     2562,  288,  167, 2410,  149,  167,  302,  286,  289,  287,
      133,  133,  303,  167,  286,  287, 2378,  133,  133,  149,
      167,  167,  294,  286,  167,  598,  133,  287, 2553,  167,
      149,  596,  167,  302,  286,  294,  287,  133,  133,  303,
      167,  305,  287,  133,  134,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  307,  593,  293, 2567,  134,  305,  309,
      424,  485, 2410,  485,  134,  134,  485,  297,  306, 2562,
      247,  134,  306,  590,  134,  247,  134,  589,  297,  134,
      307,  134,  293,  197,  134,  247,  309,  424,  247,  247,
      297,  134,  134,  310,  297,  306,  247,  247,  134,  306,
      293,  134,  247,  134,  309,  297,  134, 2412,  134,  135,
      588,  315,  247,  315,  135,  247,  247,  135,  581,  135,
      310,  315,  135,  438,  135,  472,  486,  477,  486,  135,
     2572,  486,  317,  310,  317, 2567,  135,  315,  185, 2627,
      185,  135,  317,  319,  135,  319,  135,  526,  580,  135,

      438,  135,  472,  319,  477,  579,  135,  137,  317,  137,
      204,  204,  204,  204,  204,  204,  204,  137,  526,  319,
      498,  498,  498,  185,  526,  185, 2412,  185,  461,  185,
      491,  185,  491,  137, 2572,  491,  317,  399,  399,  461,
      319,  315,  137,  137,  399, 2411, 2411,  319,  399,  137,
      185,  461,  185,  137,  185,  461,  185, 2594,  185,  498,
      575,  137,  317, 2491,  399,  399,  461,  319, 2627,  137,
      137,  399,  492,  319,  492,  399,  137,  492, 2513,  493,
      137,  493, 2646,  322,  493,  322, 2634,  137,  140,  140,
      140, 2573, 2573,  322,  569,  479,  479,  479,  140,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  494,  322,
      494, 2594, 2665,  494,  140, 2411,  520, 2638,  140,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  322,  140,
      516,  520, 2491,  140,  467,  140, 2646,  322,  198,  495,
      467,  495,  140,  520,  495,  140,  519, 2513,  516,  320,
      199,  320,  467, 2595, 2595,  322,  140,  516,  199,  320,
      140,  467,  140,  322,  511, 2634, 2665,  467,  140,  143,
      143,  143,  519,  519,  143,  320,  479,  199,  560,  143,
      320,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      511,  500,  500,  500,  500,  143, 2638,  143,  548,  323,

      324,  323,  324,  320,  511,  143,  544,  320,  543,  323,
      324,  143,  527,  542,  143,  525,  143,  511,  521,  143,
      200,  527,  525,  143,  143,  323,  324, 2571,  538,  320,
      500,  540,  143,  503,  503,  503,  503,  503,  143,  527,
      521,  143,  525,  143, 2219,  521,  143,  541,  522,  143,
      144,  144,  144,  323,  324,  524,  541,  540,  540,  533,
      144,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      522,  321,  503,  321,  541,  522,  144,  524,  530,  323,
      324,  321,  524, 2576,  326,  329,  326,  329,  327,  144,
      327,  144,  529,  531,  326,  329, 2571,  321,  327,  518,

      531,  144,  321, 2593,  144,  499,  499,  499,  499,  499,
      326,  329, 2219, 2219,  327, 2598,  144,  328,  144,  328,
      531,  535,  534,  321,  517,  321,  326,  328,  144,  321,
      144,  145,  145,  145,  523,  327,  534,  466,  326,  329,
      499,  145,  327,  328,  330,  535,  330,  523,  535,  534,
      321,  321, 2576,  326,  330,  523,  328,  145,  465,  145,
      545,  523,  327,  328,  326,  329,  464,  331,  327,  331,
      330,  328, 2593,  145,  523,  545,  145,  331,  332,  145,
      332,  463,  330,  328, 2598,  145,  145,  545,  332,  333,
      328,  333,  334,  331,  334, 2492, 2492,  328,  330,  333,

      145,  567,  334,  145,  332,  462,  145,  536,  331,  330,
      557,  145,  148,  148,  148,  333,  400,  532,  334,  567,
      398,  331,  148,  528,  330,  532,  557,  528,  567,  335,
      536,  335,  332,  334,  536,  331,  333,  557,  148,  335,
      574,  334,  318,  333,  532,  528,  334,  331,  148,  574,
      528,  337,  537,  337,  528,  335,  316,  148,  332,  537,
      334,  337,  148,  333,  504, 2492,  148,  574,  334,  333,
      550,  311,  334,  308,  403,  148,  336,  337,  336,  537,
      295, 2260,  550,  335,  148,  338,  336,  338,  403,  148,
      504,  403,  148,  151,  403,  338,  504,  550,  151,  292,

      403,  403,  336, 2642,  504,  337,  151,  151,  336,  335,
      151,  338,  339,  151,  339,  403,  282,  504,  403,  151,
      151,  403,  339,  504,  281,  151,  341,  338,  341,  280,
      336,  337,  276,  151,  151,  336,  341,  151,  339,  338,
      151,  154,  154,  154,  272,  340,  539,  340,  546, 2260,
     2260,  154,  341,  539,  338,  340,  336,  271,  339,  507,
      507,  507,  507,  507,  245,  338,  339,  154,  546,  154,
      547,  340, 2642,  539,  244,  546,  340,  154,  547,  243,
      341,  342,  584,  342,  343,  339,  343,  340,  154,  549,
      235,  342,  339,  547,  343,  154,  154,  547,  507,  340,

      551,  552,  584,  340,  154,  547,  341,  342, 2645,  584,
      343,  549,  803,  803,  340,  154,  549,  342,  225,  553,
      551,  154,  155,  343,  552,  340,  551,  551,  552,  344,
      223,  344,  397,  397,  397,  342,  554,  215,  343,  344,
      446,  553,  397,  554,  342,  155,  553,  551,  576,  214,
      343,  803,  155,  155,  446,  344,  210,  446,  397,  155,
      446,  342,  155,  554,  343,  155,  446,  446,  345,  155,
      345,  155,  155,  202,  344,  576,  508, 2645,  345,  155,
      155,  446,  178,  344,  446,  177,  155,  446,  576,  155,
     2647, 2647,  155,  346,  345,  346,  155,  156,  156,  156,

      555,  344,  508,  346,  348,  558,  348,  156,  508,  344,
      345,  555,  397,  561,  348,  349,  508,  349,  558,  346,
     2666, 2666,  345,  156,  176,  349,  561,  555,  156,  508,
      348, 2649,  558,  156,  346,  508,  156,  345,  156,  565,
      561,  349,  347,  156,  347,  578,  565,  346,  345,  559,
      106,  156,  347,  105,  350,  156,  350,  758,  348,  758,
      156,  346,  758,  156,  350,  156,  565,  556,  347,  349,
      156,  559,  578,  346,  347,   98,  559,  156,  158,  556,
      350, 2650,  158,  158,  348,  556,  158,   86,  158,  158,
      595, 2661,  562,  158,  556,  349,  347,  352,  578,  352,

     2649,  347,  351,  563,  351,  158,  556,  352,  350,  158,
      158,   85,  351,  158,  562,  158,  158,  595,  564,  562,
      158,  162,  347,  352,   81,  563,   64,  354,  351,  354,
      563,  564,   57,  357,  350,  357, 2664,  354,  351,   56,
      352,  566,  568,  357,  162,  564,  594,  597,  583,  351,
     2650,  352,  162,  354,  566,  568,  351,  570,  162,  357,
     2661,  162,  162,  162,  572,  351,  162,  352,  566,  568,
      162,  162,  583,  594,  597,  583,  351,  352,  594,  162,
      570,  354,  351,  572,  570,  162,   54,  357,  162,  162,
      162,  572,   53,  162,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  573, 2664,  571,  354,  577,  582,
      585,  172,   52,  357,  353,  172,  353,  592,  404,  404,
      172,  571,  582,  599,  353,  404,  172,  573, 2668,  404,
      582,  573,  585,  571,  172,  577,  582,  585,  172,  586,
      353,   51,  172,  577,  592,  404,  404,  172,  591,  582,
      599,  586,  404,  172,  187,  353,  404,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  586,   49,  353,  601,
      592,  187,  602,  187,  603,  591,   48,  355,  356,  355,
      356,  187,  353,  591, 1334,   47, 1334,  355,  356, 1334,
     2885, 2885,  187,  187,  353, 2669,  601, 2668,  187,  602,

      187,  603,   39,  355,  356, 1950, 1950, 1950,  187,   36,
      356,  515,  515,  515,  515,  515,  515,  515,  355,  187,
      187,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  355,  356,  358,  361,  358,  361,  356,  196,  604,
     2577,  605,  196,  358,  361,  355,  359,  196,  359,   35,
      515,   34,  360,  196,  360, 2577,  359,  355,  356,  358,
      361,  196,  360,  606, 2669,  196,  604,  750,  605,  196,
       33,  363,  359,  363,  196,  358,  605,  359,  360,  750,
      196,  363,  362,    0,  362,  753,    0,  358,  361,    0,
      606,  360,  362,  364,  750,  364,    0,  363, 2887, 2887,

      359,  792,  358,  364,  359,  365,  360,  365,  362, 2577,
      363,    0,  753,  358,  361,  365,  606,    0,  360,  364,
      366,    0,  366,  362,    0,  363,  359,  800,  792,  362,
      366,  365,  360,  768,  768,  768,  362,  363,  367,  368,
      367,  368,  369,  370,  369,  370,  366,  364,  367,  368,
      362,  363,  369,  370,  800,  807,  362, 2514, 2514,  365,
        0,  366,  362,  814,  367,  368,  776,  807,  369,  370,
      814,  587,  768,  364,  366,    0,  372,  813,  372,  373,
      367,  373,  807,    0,  587,  365,  372,  776,  366,  373,
      814,  587,  367,  368,  825,  813,  369,  370,  587,    0,

      366,  825,  372,    0,  813,  373,    0,  367,  372,  407,
      407,  587,    0,  865,  776,  374,  407,  374,  367,  368,
      407,  825,  369,  370,  371,  374,  371, 2514,  782,  377,
      372,  377,    0,  373,  371,  372,  407,  407,    0,  377,
      865,  374, 2701,  407, 2155, 2155, 2155,  407,  374,    0,
      371,  375,  371,  375,  782,  377,  372,  371,  377,  373,
      782,  375,  378,  618,  378,  618,  865,  371,  782,  374,
      371,  371,  378,  618,    0,  374,  818,  375,  371,  371,
      376,  782,  376,  377,  371,  377,  820,  782,  378,  618,
      376,  379,  375,  379,  371,  374,    0,  371,  371,  818,

      380,  379,  380,  818,  371,  375,  376,  820,  378,  377,
      380, 2701,  376,  820,  827,    0,  378,  379,  381,  375,
      381,  376,    0,  379,  830,  376,  380,  382,  381,  382,
      799,  375,  827,    0,  376,  378,  383,  382,  383,  376,
      380,  827,  378,  618,  381,  379,  383,  830,  376,  381,
      379,  830,  376,  382,  380,  382,  799, 2892, 2892,  384,
      376,  384,  383,  385,  809,  385,  809,  380,    0,  384,
      799,  379,  381,  385,    0,  382,  381,    0,  823,  383,
      380,  382,  382,  799,  386,  384,  386,    0,  826,  385,
      383,  809,  837, 2703,  386,  384,  829,    0,  381,  387,

      823,  387,  382,    0,  385,  823,  383,  382,  826,  387,
      386,  829,    0,  384,  836,  826,  383,  385,  837,  837,
      386,  836,  384,  829,  388,  387,  388,  831, 2910, 2910,
      389,  385,  389,    0,  388,  390,  831,  390,  386,  384,
      389,  836,    0,  385,    0,  390,  387,  386, 2931, 2931,
      388,    0,    0,  387,  831,  391,  389,  391,  846,  856,
      388,  390, 2703,    0,  386,  391,  392,  393,  392,  393,
      394,  390,  394,  387,  856,  389,  392,  393,  388,  387,
      394,  391,  846,    0,  389,  846,  856,  388,    0,  390,
      786,  391,  392,  393,    0,    0,  394,  395,  390,  395,

        0,  396,  389,  396,  388, 2705,  845,  395,    0,  391,
      389,  396,  393,  392,  841,  390,  786,  394,  391,  845,
      392,  393,  786,  395,  394,  401,  401,  396,    0,  833,
      786,    0,  401,  845,  841,  391,  401,  401,  833,  393,
      392,  841,  395,  786,  394,    0,  392,  393,    0,  786,
      394,  395,  401,  401,    0,  396,  833,  402,  839,  401,
        0,  402,  402,  401,  401,  408,  408,  408,  402,  395,
        0,  840,  402,  838, 2705,  408,  839,  395,  402,  838,
      840,  396,  850,  871,  402,  839,  409,  409,  402,  402,
      850,  408,  871,  409,  878,  402,  860,  409,  840,  402,

      838,  770,  770,  770,  770,  402,  405,  405,  405,  850,
      871,    0,  408,  409,  409,    0,  405,  881,  860,  408,
      409,  878,    0,  860,  409,    0,  781,  781,  781,  781,
      781,  863,  405,  410,  410,  410,  411,  411,  411,  408,
      770,  405,  405,  410,  881,  408,  411,  878,  405,  863,
      416,  416,  405,    0,  412,  412,  412,  416,  863,  410,
      405,  416,  411, 2578,  412,  781,    0,    0,  405,  405,
      881,  413,  413,  413,  410,  405,    0,  416,  416,  405,
      412,  413,  869,  411,  416,  882,  405,  410,  416,  612,
      411,  612,  415,  415,  415,  412,  853,  413,    0,  612,

      869,  410,  415,  853,  414,  414,  414,    0,  412,  869,
      411,    0,  882,  410,  414,  612,  411,    0,  415,  692,
      692,  692,  412,  853,    0,  413,  417,  417,    0,  692,
      414, 2578, 2578,  417,  412,  855,  414,  417,  866, 2464,
     2464, 2464,  855,  612,  418,  692,  415,  883,  418,  418,
        0,  413, 2713,  417,  417,  418,  864,    0,  414,  418,
      417,  857,  855,  414,  417,  866,  419,  419,  857,  612,
        0,  418,  415,  419,  883,  418,  418,  419,    0,  420,
      420,  420,  418,  864,  414,    0,  418,    0,  857,  420,
      866,    0,  879,  419,  419,    0,  421,  421,  421,  692,

      419,  422,  422, 2715,  419,  420,  421,  864,  422, 2648,
     2648,    0,  422,  790,  790,  790,  790,  790,  420,  879,
     2464, 2713,  421,  769,  769,  769,  769,  769,  422,  422,
      423,  423,  423,  420,  887,  422,  425,  425,  425,  422,
      423,  421,    0,  791,  879,  420,  425,  427,  427,  427,
      421,  874,  790,  426,  426,  888,  423,  427,  769,  420,
      426,  887,  425,    0,  426,  426,  874,    0,  421,  791,
      870,  423, 2715,  427, 2599,  791,  421,  870,  874, 2648,
      426,  426,  888,  791,  423,  889,    0,  426,  427, 2599,
      425,  426,  426,  428,  428,  428,  791,  870,  423,  872,

        0,  427,  791,  428,  890,  873,  429,  429,  872,    0,
      423,  891,  889,  429,  873,  427,  425,  429,    0,  428,
      430,  430,  430,  892,    0,  428,  872,  427, 2717,  876,
      430,  890,  873,  429,  429,  431,  431,  431,  891,  876,
      429, 1026, 1029, 2599,  429,  431,  430,  428,    0,    0,
      892,  430,  428,  432,  432,  432,  876,  433,  433,  433,
        0,  431,    0,  432,  891, 1043,  876,  433, 1026, 1029,
      434,  434,  434,  428,  430,  892,  431, 2600,  430,  432,
      434,    0,  431,  433,  435,  435,  435, 1060,    0,  431,
     1070, 1043,  432, 1078,  435,    0,  434, 2717, 1083, 1070,

      430,  436,  436,  431,  796, 1043,    0,  432,  436,  431,
      435,  433,  436, 1060,    0,  431,    0, 1070, 1043,  432,
     1078,  439,  439,  439,  434, 1083, 1070, 1060,  436,  436,
      796,  439,    0,  432,    0,  436,  796,  433,  435,  436,
     1060,  440,  440,  440,  796, 2600, 2600,  439,    0,    0,
      434,  440,    0,    0,  439, 2667, 2667,  796,    0,  441,
      441,  441, 1069,  796,  435,  437, 1069,  440,    0,  441,
      437,    0,  437,  437,    0,  439,  443,  443,  443,  437,
      437,  439,  440,  437,  437,  441,  443,    0,  901, 1069,
      901,  441,  437, 1069,    0,  440,    0,  437,  901,  437,

      437,  439,  443,    0,  441, 1084,  437,  437,  443,  440,
      437,  437,    0,  441,  901,  442,  442,    0,  441,    0,
      868,  440,  442,  868,    0, 2667,  442, 1089,    0,    0,
      443,  441, 1084,  868, 1095,  443,  444,  444,  444,  441,
        0,    0,  442,  442,  448,  448,  444,  868, 1073,  442,
      868,  448, 1073,  442, 1089,  448,  443,  445,  445,  445,
      868, 1095,  444,  447,  447,  447, 1099,  445,  901,  901,
        0,  448,  448,  447, 1075, 1073,  444, 1075,  448, 1073,
      450,  450,  448,  445,  449,  449,  449,  450,  445,  447,
      444,  450,    0, 1099,  449,  451,  451,  451, 2296, 2296,

     2296, 1075, 2296,  444, 1075,  451,  447,  450,  450,    0,
      449,  445,  452,  452,  450,  445,  444,  447,  450,  452,
     1100,  451,    0,  452, 1106,  449,  805,  805,  805,  805,
      805,  805,  805,  447,  453,  453,  453,  445,  449,  452,
      452,    0,  451,  447,  453,    0,  452, 1100,    0,  451,
      452, 1106,  449,    0, 1107,  454,  454, 1077, 1107, 1077,
      453,    0,  454,    0,  449,  805,  454,  455,  455,  451,
      456,  456,  456,    0,  455,  451,    0,    0,  455,  453,
      456, 1107,  454,  454, 1077, 1107, 1077,    0,  453,  454,
      966,  966,  966,  454,  455,  455,  456,  457,  457,  457,

      966,  455,  458,  458,  458,  455,  453,  457,  459,  459,
      459,    0,  458,    0,  453,    0,  966,  456,  459,  460,
      460,  460,    0,  457,  456,    0, 1038,    0,  458,  460,
     2680, 2680, 2680,    0,  459,  806,  806,  806,  806,  806,
      806,  806,  457,    0,  456,  460,    0, 1021, 1080,  458,
      456,  457, 1038,  459, 1053,    0,  458, 1021, 1038, 1080,
     1053,    0,  459, 2439, 2439, 2439, 1038, 2439, 1053,  457,
      966,  966,    0,  460, 1021, 1080,  458,  457,    0, 1038,
      459, 1053,  458,    0, 1021, 1038, 1080, 1053,  459,  468,
      468,  468,  468,  468,  468,  468,  468,  468,    0,  460,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  505,  505,  505,  505,
      505,  505,  505,  505,  505, 1064,    0,    0,  488,  496,
      496,  496,  496,  496,  496,  496,  496,  496, 1047, 1047,
     1047, 1047, 1047, 1123, 1104,  496,  496, 1104, 1124,  496,
        0, 1064,    0,  614,  496,  614,    0,  615,    0,  615,
      496,    0,    0,  614,    0, 1064,    0,  615,  496,    0,
     1123, 1104,  496,  496, 1104, 1124,  496, 1047, 1064,  614,

        0,  496,    0,  615,    0,  615,    0,  496,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  614, 1094,  497,
        0,  615,  615, 1091,  497, 1091,    0,  623, 1094,  623,
      497,    0,    0, 2548, 2548, 2548,    0,  623,  497, 2727,
     2727, 2727,    0,  614,    0, 1094,  497,  615,    0,    0,
     1091,  497, 1091,  623,    0, 1094,    0,  497,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  611, 1125,  611,
        0,  623,    0,  620,  502,  620,    0,  611,    0,    0,

      502,    0,    0,  620,    0,    0,    0,    0,  502,    0,
        0,    0,  613,  611,  613, 1125,  619,  623,  619,  620,
        0,  502,  613,  611, 2548,  620,  619,  502,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  613,    0,
        0,  611,  619,    0, 1092,    0,  621,  620,  621,    0,
      611, 1092,  620,  613,  506,  619,  621,    0,    0,  622,
      506,  622, 1126,    0,    0,    0,  613,  611,  506,  622,
      619, 1092,  621,  620,    0,    0,  621,    0, 1092,    0,
      613,  506,  619,    0,  624,  622,  624,  506,  625, 1126,
      625,  622,  613,    0,  624,  627,  619,  627,  625,  626,

      621,  626,  628,  621,  628,  627,  629, 1134,  629,  626,
      624,    0,  628,  622,  625,    0,  629,  624,  622,    0,
      625,  627,    0,    0,    0,  626,  621, 1076,  628,    0,
      624,    0,  629,    0, 1134,  628, 1096,    0,  624,  622,
     1076,    0,  625,    0,  624, 1096,  626,  625,  630,  627,
      630,  629,    0,  626, 1076,    0,  628,  624,  630,  631,
      629,  631,  628, 1096,  624, 1137,    0, 1076,  625,  631,
     1136,    0, 1096,  626,  630,  627,    0,    0,  629,  626,
      630,    0,  628, 1074,  630,  631,  629,    0,  632,  633,
      632,  633, 1137,  635,  634,  635,  634, 1136,  632,  633,

     1074,    0,  630,  635,  634,    0,  640,  630,  640,    0,
     1074,  630, 1136,  631,  632,  633,  640, 1137,    0,  635,
      634,    0,    0,  637,  636,  637,  636, 1074,  630, 1105,
        0, 1105,  640,  637,  636,  638,  633,  638,    0,  631,
      634,    0,  632,  633,  642,  638,  642,  635,  634,  637,
      636,    0,    0,  637,  642,  639, 1105,  639, 1105,    0,
      640,  638,    0,  633,  636,  639,  638,  634,  632,  633,
      642,    0, 1085,  635,  634,    0,    0,  637,  636, 1071,
      637,  639,  641, 1071,  641,    0,  640, 1085,    0,  638,
        0,  636,  641,  638,    0,  643, 1071,  643,  642, 1085,

        0, 1072,  639,  637,  636,  643, 1071, 1072,  641,  639,
     1071, 1120,  641, 1120, 1085,  638,    0,  644,    0,  644,
      645,  643,  645, 1071,  642,    0,    0,  644, 1072,  639,
      645,  646,    0,  646, 1072,  639,  641,    0, 1120,  641,
     1120,  646,  643,  644,    0,  644,  645,    0,    0,  643,
      647,  648,  647,  648,  649, 1108,  649,  646,    0, 1108,
      647,  648,  641,    0,  649,  645, 1090,    0,  651,  643,
      651,  644,  644,    0,  645,  643,  647,  648,  651, 1090,
      649,  650, 1108,  650, 1040,  646, 1108,    0,  653,    0,
      653,  650,  645, 1090,  651,    0,    0,  644,  653,  652,

      645,  652,    0,    0,  647,  648, 1090,  650,  649,  652,
     1040,  646,    0,  654,  653,  654, 1040, 1088, 1140,  653,
      650,    0,  651,  654, 1040,  652,  655,  653,  655, 1088,
      647,  648,    0,  652,  649,  650,  655, 1040,    0,  654,
        0,    0,  653, 1040, 1088, 1140,  653,  650,  651,  656,
     1141,  656,  655,  652,  653,  658, 1088,  658,  655,  656,
      652,  650,  657,    0,  657,  658,    0,  654,  653, 2179,
     2179, 2179,  657, 2179,    0,  656,    0, 1141, 1142,  652,
      655,  658,    0,    0, 1081,  655,  658,    0,  657,    0,
      657,  656,  657,  654,  659,    0,  659,  660,  661,  660,

      661, 1081,    0,  656,  659, 1142,  655,  660,  661,  658,
      657, 1081,  662,  658,  662,    0,  657,  657,  656,  657,
      659,    0,  662,  660,  661,    0,  659,    0, 1081,  656,
        0, 1156,    0,    0,    0,  658, 1115,  657,  662,    0,
        0,  661,  657, 1093,  660, 1115,    0,  663,  659,  663,
     2179,  660,  661,  659,  664, 1157,  664,  663, 1156,  665,
     1093,  665,    0, 1115,  664,  666,  662,  666,  661,  665,
     1093,  660, 1115,  663,  659,  666,    0,  660,  661,    0,
      664,    0, 1157,  663,  885,  665,    0, 1093,  667,  885,
      667,  666,  662,    0, 1158,  663, 1097,  665,  667,  885,

        0,  663,  668,  885,  668,  669,  666,  669,  664, 1097,
      663,  885,  668,  665,  667,  669,  885, 1159,    0,  666,
      667, 1158,  663, 1097,  665,    0,  885,  663,  668,    0,
      885,  669,    0,  666,  664,    0, 1097,    0,  670,  665,
      670,    0,  667,    0, 1159,  666,  669,  667,  670,    0,
        0,  671,  672,  671,  672,  673,  668,  673,    0,  669,
        0,  671,  672, 1098,  670,  673,    0, 1160,  667,    0,
      670, 1079, 1079,  669,  674,    0,  674,  671,  672,    0,
     1098,  673,  668,  671,  674,  669,  675, 1119,  675, 1079,
     1098,    0,  670,  672, 1160,    0,  675,  670, 1119,    0,

      674,    0,  673, 1079,    0,  671,  672, 1098,    0,  673,
      671,  676,  675,  676, 1119,  674, 1079,  677,  670,  677,
      672,  676,  675,    0,  678, 1119,  678,  677,  674,  673,
     1079,  671,  672,    0,  678,  673,  679,  676,  679,    0,
      675,    0,  674,  677,    0, 1161,  679, 1138,    0,  675,
      678,  680,  676,  680,  674,  678,    0,  681,  682,  681,
      682,  680,  679,    0,    0,  676,  675,  681,  682, 1048,
        0,  677, 1161,    0, 1138,  679,    0,  680,  678,  676,
        0,    0,  678,  681,  682,    0,  680, 1122,  681, 1138,
      679,  676,    0, 1059, 1162, 1048, 1122,  677,  683, 1059,

      683, 1048,  679,  682,  678,  680,    0, 1059,  683, 1048,
        0,  681,  682,  680, 1122,  681,  679,  686,  686,  686,
     1059, 1162, 1048, 1122,  683,    0, 1059,  686, 1048, 1163,
      682,  680,  687,  687,  687,    0,    0,  681,  682,  683,
        0,    0,  687,  686,  688,  688,  688,  689,  689,  689,
        0,    0,  683,  686,  688,    0, 1163,  689,  687,    0,
     1164,    0,  702,  702,  702, 1143,  683,  693,  693,  693,
      688,  686,  702,  689,    0,  689, 1143,  693,  683,    0,
      686,  694,  694,  694,    0, 1056,  687, 1164,  702,    0,
        0,  694, 1143,  693,  695,  695,  695,  686,  688,    0,

        0,  689,  689, 1143,  695,    0,  693,  694,  696,  696,
      696, 1056,  687,  694,    0,    0,  702, 1056,  696, 1168,
      695,  693, 1102,    0,  688, 1056,  695,  689, 1055, 1055,
     1055, 1055, 1055,  693,  696,  694,    0,    0, 1056, 1102,
      694,  696,  702,    0, 1056, 1101, 1168,  693,  695, 1102,
      697,  697,  697,  695,  696, 1168, 1165,    0, 1101,    0,
      697,  694,  696,  698,  698,  698, 1102, 1055,  696,  699,
      699,  699, 1101,  698,  695,    0,  697,    0, 1171,  699,
     1109,  696,  697, 1165, 1110, 1101, 1114, 1110,  696,  698,
      700,  700,  700, 1109, 1110,  699,  701,  701,  701, 1114,

      700,    0,  699,    0,  697, 1171,  701, 1109, 1165,  697,
      698, 1110,    0, 1114, 1110,    0,  700,  698,    0, 1082,
     1109, 1110,  701,  699,    0,    0, 1114, 1127,  701,  699,
      697,    0,  701, 1172,    0,  700, 1082,  698,  703,  703,
      703, 1173, 1127,  698,  700, 1082, 1082,    0,  703,  699,
      701,  704,  704,  704, 1127,  701,  705,  705,  705,  701,
     1172,  704,  700, 1082,  703,    0,  705,    0, 1173, 1127,
      700,    0,    0,  706,  706,  706,  701,  704,  708,  708,
      708,    0,  705,  706,    0,    0,    0,    0,  708,    0,
     1129,    0,  703,  707,  707,  707, 1129,    0,  704,  706,

        0, 1130,  705,  707,  708,  704,    0, 1130,  708,    0,
      705,  709,  709,  709,  710,  710,  710, 1129,  703,  707,
        0,  709,    0, 1129,  710,  704,    0,  706, 1130,  705,
     1166,  704,  708,  707, 1130,  708,  705,  709,    0, 1133,
      710,    0,  709,    0,  711,  711,  711,  707,    0,  712,
      712,  712, 1133,  706,  711,    0,    0, 1166,  708,  712,
      707,  710, 1174,    0,    0,  709, 1133,    0,  710,  709,
      711,    0, 1166,  707,    0,  712,  713,  713,  713, 1133,
      714,  714,  714,  715,  715,  715,  713, 1148,  710, 1174,
      714,  709, 1118,  715,  710, 1118,  712,    0,  711,    0,

     1148, 1112,  713,  712,  713, 1112,  714,    0, 1175,  715,
      716,  716,  716,    0, 1148,    0,  717,  717,  717, 1118,
      716,    0, 1118,  712,  711,  714,  717, 1148, 1112,  712,
      713,  713, 1112,    0,  714, 1175,  716,  715,    0,  718,
      718,  718,  717,  719,  719,  719,    0,    0, 1113,  718,
        0,    0,  714,  719, 1176,    0,  713, 1113,    0,    0,
      714,    0, 1113,  715,  716,  718,  721,  721,  721,  719,
      717,    0,  720,  720,  720, 1113,  721,  719,  718,    0,
        0, 1176,  720,    0, 1113, 1087, 1144, 1149, 1087, 1113,
      716, 1087,  721,  718, 1177, 1144,  717,  719,  720,  722,

      722,  722, 1149,  720,  719,  718,  723,  723,  723,  722,
     1086,  720, 1087, 1144, 1149, 1087,  723,    0, 1087,  718,
      721, 1177, 1144,  719, 1086,  722,  720, 1086, 1111, 1149,
      720,  722,  723,  724,  724,  724, 1111, 1086,  720,  725,
      725,  725,    0,  724, 1155, 1111,  721, 1111,  723,  725,
     1111, 1086,  720,  722, 1086, 1111,    0, 1155,  722,  724,
      723,  724,    0, 1111,    0,  725,  726,  726,  726, 1131,
      725, 1155, 1111, 1131, 1111,  723,  726, 1111,    0,  722,
     1128,  724, 1121, 1128, 1155, 1121,  723,  724,  724,  727,
      727,  727,  726,  725, 1121,    0, 1131,  725,  726,  727,

     1131,  728,  728,  728,  729,  729,  729, 1128,  724, 1121,
     1128,  728, 1121,  724,  729,  727,  733,  733,  733,  725,
      726,  730,  730,  730, 1145,  726,  733,  728,    0, 1135,
      729,  730,    0, 1135, 1330, 1333,  727,    0,    0,    0,
      729, 1145,  733,  727,  728, 1146,  726,  730,    0, 1146,
     1132, 1145,  729, 1132,    0,  728, 1135,    0,  729,  730,
     1135, 1330, 1333,  727,  731,  731,  731,  729, 1145,  727,
      733,  728, 1146,    0,  731,  730, 1146, 1132,    0,  729,
     1132,  728,    0,  897,  729,  897,  730,  732,  732,  732,
      731,    0,    0,  897,    0,    0,  733,  732,  734,  734,

      734,  730,  735,  735,  735,  731,    0,    0,  734,  897,
        0,    0,  735,  732,    0,    0, 1372,    0,  731,  732,
        0,  736,  736,  736,  734,  738,  738,  738,  735,    0,
     1103,  736,  731, 1103,  735,  738,    0,  897, 1103,  734,
        0,  732, 1103, 1372,  731,    0,  732,  736,  737,  737,
      737,  738,  734,  736, 1179,    0,  735, 1103,  737,    0,
     1103,  735,    0,  897, 1116, 1103,  734,  732, 1147,    0,
     1116,    0,  738, 1116,  737,  736,    0, 1147,  734,  738,
      736, 1179,  735,  739,  739,  739,  740,  740,  740,  737,
        0, 1116,    0,  739, 1153, 1147,  740, 1116, 1153,  738,

     1116,  736,  737, 1170, 1147,  738, 1179,    0,    0,  739,
        0,    0,  740,  741,  741,  741,  737,  742,  742,  742,
     1170, 1153,  740,  741,  739, 1153, 1150,  742,  737, 1150,
     1170,  743,  743,  743,  744,  744,  744,  739, 1180,  741,
      740,  743,    0,  742,  744, 1154,    0, 1170, 1154,  740,
     1331,  739, 1377, 1150,  741,    0, 1150,  743,    0, 1331,
      744,    0,  743,  739, 1380, 1180,  740,  741,  745,  745,
      745,  742, 1154,  744,    0, 1154,    0, 1331,  745, 1377,
     1180,  741,  746,  746,  746,  743, 1331,    0,  744,  743,
        0, 1380,  746,  741,  745,    0,    0,  742, 1343,  896,

      744,  896,  899,  745,  899,  747,  747,  747,  746,  896,
        0,  743,  899,  746,  744,  747,  748,  748,  748, 1386,
     1389,    0,  745, 1371, 1343,  896,  748,    0,  899,    0,
      745,  747,    0, 1151,    0, 1182,  746, 1182, 1152, 1151,
      746,  896,  748,    0, 1152, 1182, 1386, 1389,  745, 1371,
      747, 1343,    0,  896,  899,    0,  899,    0,    0,  747,
     1151, 1182,  746, 1371,    0, 1152, 1151,    0,  896,    0,
      748, 1152, 2551, 2551, 2551,    0, 1371,  747,    0,  896,
     1390,  899,  899,    0, 1351,  747,  755,  755,  755,  755,
      755,  755,  755,  755,  755,    0,  748,  751,  751,  751,

      751,  751,  751,  751,  751,  751, 1117, 1390,    0,    0,
     1351, 1117, 1356,  751, 1117, 1182, 1351,  751, 1356, 1392,
     1117, 1117,  751, 1392, 1351, 1194, 1356, 1194,  751,    0,
        0,    0,    0, 1117,    0, 1194,  751, 1351, 1117, 1356,
      751, 1117,    0, 1351,  751, 1356, 1392, 1117, 1117,  751,
     1392, 1194,    0, 2551,    0,  751,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  757,    0,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  761,    0,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  756,  759,  759,  759,  759,

      759,  759,  759,  759,  759, 1194, 1194, 1350, 1350, 1350,
     1350, 1350,  759,  759,  760, 1397,  759,    0, 1257, 1257,
     1257,  759, 1399,    0, 1269, 1269, 1269,  759, 1257,    0,
     2625, 2625, 2625,    0, 1269,  759,    0,    0,    0,  759,
      759,    0, 1397,  759, 1257,    0, 1350,    0,  759, 1399,
     1269,    0,    0,    0,  759,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  765,  765,  765,  765,  765,  765,  765,  765,
      765,    0,    0,    0,  762,  763,    0,    0, 1257,    0,

        0,    0,    0,  763, 1269, 1269, 1361, 1361, 1361, 1361,
     1361, 2625,  764,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  763,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  771,  771,  771,  771,  771,  771,  771,
      771,  771, 1366, 1383,  767, 1361, 1367, 1329, 1366,  767,
     1329, 1405, 1367, 1329, 1383,  767, 1366,    0,    0,    0,
     1367,    0,    0,  767,    0,    0,    0,    0,    0, 1366,
     1383,  767,  771, 1367, 1329, 1366,  767, 1329, 1405, 1367,
     1329, 1383,  767,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  774,  774,  774,  774,  774,  774,  774,  774,  774,
        0,    0,    0,    0,  772,    0,    0,    0,    0,    0,
        0,    0,  772,    0,    0,    0,    0,    0,    0,    0,
        0,  773,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  772,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  783,
      783,  783,  783,  783,  783,  783,  783,  783, 1323, 1395,
     1395,    0, 1374, 1323, 1381,  780, 1323, 1378, 1374, 1378,

     1379,  780, 1379, 1323, 1408, 1391, 1374, 1381, 1391,  780,
      783,    0,    0,    0,    0, 1323, 1395, 1395,  783, 1374,
     1323, 1381,  780, 1323, 1378, 1374, 1378, 1379,  780, 1379,
     1323, 1408, 1391,    0, 1381, 1391,    0,  783,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  793,  793,  793,  793,  793,  793,
      793,  793,  793, 1382, 1384, 1382,    0, 1393, 1413, 1384,

      789, 1393, 1394, 1404, 1394, 1404,  789,    0,    0,    0,
        0,    0,    0,    0,  789,    0,    0,    0,    0,    0,
     1382, 1384, 1382,  793, 1393, 1413, 1384,  789, 1393, 1394,
     1404, 1394, 1404,  789,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  808,
     1396,  808,  808, 1385, 1396, 1398,  808, 1411, 1409, 1398,
      808,  808, 1411,    0, 1409,  808,  808,    0, 1400,    0,

     1385, 1400,    0, 1403,  808,    0,  808, 1396,  808,  808,
     1385, 1396, 1398,  808, 1411, 1409, 1398,  808,  808, 1411,
     1403, 1409,  808,  808,  821, 1400,  821, 1385, 1400,  821,
     1403, 1406,  821,    0,  903,    0,  903, 1414, 1415,  821,
     1406,  821,  821,  821,  903,  821,  821, 1403,    0,    0,
      821,  821,  902,  821,  902,    0,  821,  902, 1406,  821,
      903,    0,  902,    0, 1414, 1415,  821, 1406,  821,  821,
      821,    0,  821,  821,  842, 1410,  842, 1410,  902,    0,
     1401,  842, 1401, 1401,  842, 1417,    0,  904,  903,  904,
      842,  842,  842,  842,    0,  842,    0,  904, 1362,  842,

        0,  842, 1410,  842, 1410,    0,  902, 1401,  842, 1401,
     1401,  842, 1417,  904,  903,    0,    0,  842,  842,  842,
      842, 1402,  842,  858, 1362,  858,    0,  858,  904,  858,
     1362,  858,  902,  905, 1402,  905, 1407,  858, 1362, 1407,
        0,  904,  858,  905, 1418,    0, 1419,    0, 1402,  858,
      858, 1362,  858, 1416,  858,  904,  858, 1362,  858,  905,
        0, 1402,    0, 1407,  858, 1424, 1407,  904, 1416,  858,
      875, 1418,  875, 1419,  875,    0,  875, 1438,  875, 1420,
     1416,  907, 1420,  907,  875, 1439,    0,  905,  906,  875,
      906,  907, 1424, 1440,    0, 1416,    0,  875,  906,  875,

      908,  875,  908,  875, 1438,  875, 1420,  907,    0, 1420,
      908,  875, 1439,  905,  906,    0,  875,  877, 1412,  877,
     1440,  877, 1412,  877,  906,  877,  908,  909,  907,  909,
     1421,  877, 1421,    0,    0,  907,  877,  909, 1422,    0,
     1422,    0,  906,    0,  877, 1412,  877,    0,  877, 1412,
      877,  906,  877,  909,  908,  907, 1454, 1421,  877, 1421,
      910,  907,  910,  877,  898, 1422,  898, 1422,  906,    0,
      910, 1428, 1423,    0,  898,  911, 1423,  911,    0,    0,
      908,  909,    0, 1454, 1428,  911,  910,  912,    0,  912,
      898,    0, 1426,  898, 1426,  898,  898,  912, 1428, 1423,

      898,  911,    0, 1423,  898,  898,  911,  909, 1455,  898,
      898, 1428, 1425,  912,  910, 1425,    0,    0,  898, 1426,
      898, 1426,  898,  898,  913,    0,  913,  898,  915,  911,
      915,  898,  898,  911,  913, 1455,  898,  898,  915, 1425,
      910,  912, 1425,  916,  898,  916,  917,    0,  917, 1429,
      913,    0, 1429,  916,  915,  911,  917,  913,    0,    0,
      919, 1456,  919,  918,  922,  918,  922,  912,    0,  916,
      919, 1433,  917,  918,  922,  916, 1429,    0,  913, 1429,
        0,    0,  915,    0,  913, 1433,  919,    0, 1456,  918,
      922,    0,    0,  920,  919,  920,    0,  916, 1433,    0,

      917, 1462,  916,  920,  913,  914,    0,  914,  915,    0,
      918,    0, 1433,    0,  919,  914,    0,  918,  922,  920,
      921,  919,  921,  916,    0,    0,  917,    0, 1462,  920,
      921,  914,  923,  914,  923,  914, 1446,  918,  914, 1446,
      919,  914,  923,  918,  922,    0,  921,  920,  914, 1443,
      914,  914,  914,    0,  914,  914,  920, 1451,  923,  914,
      914,  921,  914, 1446, 1443,  914, 1446,    0,  914,    0,
      924,  923,  924,  920,  921,  914, 1443,  914,  914,  914,
      924,  914,  914, 1470, 1451,  914,  923,  925,  921,  925,
     1451, 1443,  926,  927,  926,  927,  924,  925,  923, 1430,

      921,  924,  926,  927,  928,    0,  928,  929, 1471,  929,
     1470,    0,  923,  925,  928, 1452, 1430,  929,  926,  927,
        0, 1427, 1460,    0,  924, 1427, 1430,  930,  924,  930,
      928,    0,  925,  929,  931, 1471,  931,  930,  927, 1460,
        0,  925, 1452, 1430,  931,    0,  926,  927, 1427, 1460,
      924,    0, 1427,  930,  932,    0,  932, 1452,  928,  925,
      931,  929,  931,    0,  932,  927, 1460,  925,  933,  934,
      933,  934,  926,  927,  930,    0, 1434,    0,  933,  934,
      932,  930, 1431,    0,  928, 1434, 1431,  929,  931,  931,
      935, 1472,  935, 1432,  933,  934,    0, 1436, 1432,    0,

      935,  930,  932, 1434,  933,    0, 1436,  930,  932, 1431,
      934, 1435, 1434, 1431,  931, 1435,  935,  936, 1472,  936,
     1432,    0,  933,  934, 1436, 1432,  938,  936,  938,  932,
      939,  933,  939, 1436,  932,  935,  938,  934, 1435,    0,
      939,    0, 1435,  936,  935, 1442, 1308, 1442,  933,  934,
        0,  936,  938,  940, 1308,  940,  939,    0,    0,  941,
        0,  941,  935,  940, 1441, 1308, 1437,    0, 1308,  941,
      935,  936, 1442, 1308, 1442, 1437, 1441, 1453,  936,  940,
      938, 1308,    0,    0,  939,  941,  942, 1457,  942,  941,
     1457, 1441, 1308, 1437,  940, 1308,  942,  936,  937,  943,

      937,  943, 1437, 1441, 1453,    0,  938,  940,  937,  943,
      939, 1444,  942,  941, 1457, 1444,  941, 1457,    0,    0,
     1445,  940, 1445, 1473,  937,  943, 1453,  937,    0,  937,
        0,    0, 1458,  940,  937, 1458, 1474,  937, 1444,  941,
      942,    0, 1444,  937,  937,  937,  937, 1445,  937, 1445,
     1473,    0,  937,  943,  937,  944,  937,  944,  945, 1458,
      945,  937, 1458, 1474,  937,  944,  942,  946,  945,  946,
      937,  937,  937,  937,    0,  937,    0,  946,  937,  943,
      947,  944,  947,    0,  945,  948,    0,  948,    0,  949,
      947,  949, 1475,  946,    0,  948, 1449,    0,  950,  949,

      950, 1449,    0,  952,  945,  952,  947,    0,  950,  944,
     1464,  948,  945,  952, 1464,  949,  951, 1477,  951, 1475,
      954,  946,  954, 1449,  950,    0,  951,    0, 1449,  952,
      954,  945,  948,    0,  947,  944,    0, 1464,  945,  948,
     1476, 1464,  951,  949, 1477,  950,  954,  946, 1478,    0,
      952, 1476,  950,    0,  955,  951,  955,  952, 1482,  948,
      947,  956,    0,  956,  955,  948,  957, 1476,  957,  949,
      951,  956,  950,    0,  954, 1478,  957,  952,  950, 1463,
      955,    0,  951,  952,    0, 1482,  955,  956,  959, 1448,
      959, 1448,  957,    0, 1463,    0,  951,  953,  959,  953,

      954, 1447,    0, 1447,    0,    0, 1463,  953,  955,  958,
        0,  958, 1447,  955,  959,  956, 1448,    0, 1448,  958,
      957, 1463, 1192,  953, 1192,  953, 1450,  953, 1447,  953,
     1447,  953, 1192,  953,  955,  958,    0, 1450, 1459,  953,
        0,  956,  959, 1459,  953,  958,  957,    0, 1192,    0,
        0,  953,  953, 1450,  953, 1461,  953, 1461,  953,    0,
      953,    0,    0,  958, 1450, 1459,  953, 1479,  959,    0,
     1459,  953,  958,  962,  962,  962, 1192,  953,  964,  964,
      964, 1483, 1461,  962, 1461,  967,  967,  967,  964,  958,
      967,  968,  968,  968, 1479,  967,  969,  969,  969,  962,

        0,  968, 1192,    0,  964,    0,  969,    0, 1483, 1479,
     1466,  967,    0, 1466, 1465,  962, 1465,  968,    0, 1469,
        0, 1183,  969, 1183, 1469, 1480,    0,  962,    0,    0,
      964, 1183,  964,    0,  970,  970,  970, 1466,    0,  967,
     1466, 1465,  962, 1465,  970,  968, 1469, 1183,    0,    0,
      969, 1469, 1480,  962,  963,  963,  963,  964,  964,    0,
      970,    0, 1183,    0,  963,  967,    0,    0,    0, 1484,
      970,  968,    0,    0, 1480, 1183,  969,  971,  971,  971,
      963,    0, 1467,  963, 1467,  963,  963,  971,  970, 1183,
      963,    0,    0, 1467,  963,  963, 1484,  970,    0,  963,

      963, 1183, 1485,  971,    0, 1486,    0,    0,  963, 1467,
      963, 1467,  963,  963,  970, 1487, 1643,  963,  972,  972,
      972,  963,  963, 1190,  971, 1190,  963,  963,  972, 1485,
        0,  971, 1486, 1190,  963,  973,  973,  973,  974,  974,
      974,    0, 1487, 1643,  972,  973, 1490, 1491,  974, 1190,
        0,  971,  975,  975,  975, 1190,    0,  971,  976,  976,
      976,  973,  975,    0,  974,  979,  979,  979,  976,  977,
      977,  977,  972, 1490, 1491,  979,    0, 1190,  975,  977,
     1666, 1670, 1190,  975,  976,    0, 1640,    0, 1490,  973,
     1640,  979,  974, 1672, 1641,  977, 1491, 1641,  972,  980,

      980,  980,  977, 1190,    0,    0,  975, 1666, 1670,  980,
      975,    0,  976, 1640, 1468,  973, 1468, 1640,  974,  979,
     1672, 1641,    0,  977, 1641,  980,    0, 1675,    0,  977,
        0,  980,  975,    0, 1642, 1676, 1642, 1677,  976,    0,
        0, 1468,    0, 1468,    0,  979,    0,    0,    0,  977,
      978,  978,  978,  980, 1675,  981,  981,  981,  980,    0,
      978, 1642, 1676, 1642, 1677,  981, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1198,  978, 1198,  978,  980,
      978,  981,    0,  978, 1683, 1198,  978, 1669,    0,    0,
        0, 1687, 1669,  978, 1687,  978,  978,  978,    0,  978,

      978, 1198,    0,    0,  978,  978,    0,  978,    0,  981,
      978, 1683,    0,  978, 1669,  982,  982,  982, 1687, 1669,
      978, 1687,  978,  978,  978,  982,  978,  978,    0, 1198,
      978, 1656,  983,  983,  983,  981,    0,  984,  984,  984,
     1692,  982,  983,    0,  985,  985,  985,  984,    0,  986,
      986,  986, 1661,    0,  985, 1198,    0, 1656,  983,  986,
        0,    0,  982,  984,    0,    0,  983, 1692,    0,  982,
      985, 1656, 1705,  984, 1667,  986,    0, 1673, 1661,    0,
      987,  987,  987, 1673, 1656,    0,  983, 1667,  986,  982,
      987,  984, 1661,  983,    0,  982,    0,    0,  985, 1705,

      984, 1667,    0,  986, 1673, 1661,  987,    0,    0, 1706,
     1673,  987,  983,    0, 1667,  986, 1709,  984,  988,  988,
      988,  989,  989,  989,  985,  990,  990,  990,  988,  986,
        0,  989, 1679,    0,  987,  990, 1706,    0,  987,  991,
      991,  991, 1313, 1709,  988,    0, 1679,  989,    0,  991,
     1313,  990,  992,  992,  992,    0,  993,  993,  993, 1679,
      987, 1313,  992,  988, 1313,  991,  993,    0,    0, 1313,
      990,    0,  988, 1679,    0,  989,    0, 1313,  992,  990,
        0,    0,  993,    0,    0,  994,  994,  994, 1313,    0,
      988, 1313,    0,  991, 1202,  994, 1202,  990,  988,    0,

        0,  989,    0,  993, 1202,  990,  992,  995,  995,  995,
      993,  994,    0,  994, 1678, 1713, 1678,  995,    0,  991,
     1202,  996,  996,  996,  997,  997,  997, 1000, 1000, 1000,
      993,  996,  992,  995,  997,    0,  993, 1000,    0,  994,
      994, 1678, 1713, 1678, 1001, 1001, 1001,  996, 1202,    0,
      997,    0,    0, 1000, 1001,  995, 1729,  996,    0,    0,
        0,  995, 1002, 1002, 1002,  994,  998,  998,  998,  997,
     1001,    0, 1002,    0, 1202,  996,  998,    0,  997, 1648,
        0, 1000,  995, 1729,  996, 1648, 1668,  995, 1002, 1004,
     1004, 1004,  998, 1648, 1733, 1668,  997,    0, 1001, 1004,

      998,  996,    0, 1002,  997, 1674, 1648, 1000, 1003, 1003,
     1003,    0, 1648, 1668, 1674, 1004, 1002, 1655, 1003,    0,
      998, 1733, 1668, 1655, 1001, 1671,    0,  998,    0, 1671,
     1002, 1655, 1674,    0, 1003, 1005, 1005, 1005, 1003, 1734,
     1735, 1674, 1002, 1004, 1655, 1005,  998,  999,  999,  999,
     1655,    0, 1671, 1006, 1006, 1006, 1671,  999, 1007, 1007,
     1007, 1005, 1003, 1006, 1685, 1003, 1734, 1735, 1007, 1004,
        0,    0, 1736,  999,    0, 1685,  999,    0,  999, 1006,
     1008, 1008, 1008,  999, 1007,    0,  999, 1680, 1003, 1005,
     1008, 1685,  999,  999,  999,  999, 1680,  999, 1731, 1736,

        0,  999, 1685,  999, 1007,  999, 1008, 1006,    0,    0,
      999,    0, 1007,  999, 1680, 1005, 1009, 1009, 1009,  999,
      999,  999,  999, 1680,  999, 1731, 1009,  999, 1688, 1689,
     1688, 1007, 1689, 1006, 1008, 1010, 1010, 1010, 1007, 1011,
     1011, 1011, 1009,    0,    0, 1010,    0, 1731, 1203, 1011,
     1203,    0, 1012, 1012, 1012, 1688, 1689, 1688, 1203, 1689,
     1008, 1010, 1012, 1696,    0, 1011, 1014, 1014, 1014,    0,
     1009, 1013, 1013, 1013, 1203,    0, 1014,    0, 1012,    0,
     1696, 1013, 1010,    0,    0, 1016, 1016, 1016,    0, 1010,
     1696, 1695, 1014, 1011,    0, 1016, 1009, 1013,    0, 1012,

     1695,    0, 1203,    0, 1651,    0, 1012, 1696, 1693, 1010,
     1013, 1016,    0, 1014, 1693, 1010, 1681,    0, 1695, 1011,
     1014, 1018, 1018, 1018,    0, 1013, 1012,    0, 1203, 1681,
     1651, 1018, 1012, 1682, 1738, 1693, 1651, 1013,    0, 1016,
     1014, 1693,    0, 1681, 1651, 1682, 1014, 1018, 1019, 1019,
     1019, 1013, 1015, 1015, 1015,    0, 1681, 1651, 1019,    0,
     1682, 1738, 1015, 1651,    0, 1016, 1017, 1017, 1017, 1188,
        0, 1188, 1682, 1749, 1019, 1018, 1017, 1658, 1015, 1188,
     1015, 1690, 1015, 1658, 1015, 1690, 1015, 1704, 1015, 1704,
        0, 1658, 1017,    0, 1015, 1188,    0, 1188, 1017, 1015,

     1749, 1018, 1019,    0, 1658,    0, 1015, 1015, 1690, 1015,
     1658, 1015, 1690, 1015, 1704, 1015, 1704, 1020, 1020, 1020,
     1017, 1015,    0, 1188, 1188, 1017, 1015, 1020, 1019, 1697,
     1697, 1697, 1015, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1184, 1020, 1184,    0, 1017,    0, 1684, 1188,
     1718,    0, 1184, 1020, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1684, 1718, 1707,    0, 1707, 1184,    0,
        0, 1020, 1031,    0, 1697, 1684,    0, 1718, 1184,    0,
     1020, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1684, 1718, 1707, 1032, 1707,    0, 1184, 1020, 1022, 1719,

     1022, 1697, 1022, 1686, 1022, 1184, 1022, 1664, 1719, 1185,
        0, 1185, 1022, 1664,    0, 1022, 1686, 1022,    0, 1185,
     1033, 1664, 1184,    0, 1022, 1022, 1719, 1022,    0, 1022,
     1686, 1022,    0, 1022, 1664, 1185,    0, 1185,    0, 1022,
     1664, 1185, 1022, 1686, 1022, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1650, 1650, 1650, 1650, 1650, 1691,
     1699, 1023,    0, 1185, 1185, 1023,    0, 1694, 1185, 1699,
     1023, 1694, 1691, 1750,    0, 1189, 1023, 1189,    0,    0,
        0,    0,    0,    0, 1023, 1189, 1691, 1699, 1023, 1185,
        0,    0, 1023, 1650, 1694,    0, 1699, 1023, 1694, 1691,

     1750, 1189,    0, 1023, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1189, 1751, 1034, 1698, 1701,    0, 1189,
     1034, 1714, 1698, 1701, 1752, 1714, 1034,    0,    0,    0,
        0,    0,    0,    0, 1034,    0,    0,    0,    0,    0,
     1189, 1751, 1034, 1698, 1701, 1189,    0, 1034, 1714, 1698,
     1701, 1752, 1714, 1034, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,

     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,    0,
        0,    0, 1037, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1710, 1711, 1045, 1711, 1753, 1716, 1710, 1045, 1715,
     1716, 1715,    0, 1214, 1045, 1214,    0,    0,    0,    0,
        0,    0, 1045, 1214,    0,    0,    0,    0, 1710, 1711,
     1045, 1711, 1753, 1716, 1710, 1045, 1715, 1716, 1715, 1214,
        0, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051,    0, 2339, 2339, 2339, 1717, 2339, 1214, 1046, 1717,

     1725, 1730, 1754, 1725, 1046,    0,    0,    0,    0,    0,
        0,    0, 1046, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1717, 1214,    0, 1046, 1717, 1725, 1730, 1754,
     1725, 1046, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
        0, 1730, 1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061,    0, 2339,    0,    0, 1727, 1726, 1727, 1054,
     1726, 1728, 1747, 1728, 1747, 1054,    0,    0,    0, 1726,
        0,    0,    0, 1054, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1727, 1726, 1727, 1054, 1726, 1728, 1747,
     1728, 1747, 1054, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1186, 1187, 1186, 1187, 1191,    0, 1191, 1063,    0,
        0, 1186, 1187,    0, 1755, 1191,    0, 1700,    0, 1199,
        0, 1199, 1063, 1200,    0, 1200,    0, 1186, 1187, 1199,
     1700, 1191, 1201, 1200, 1201, 1063, 1204, 1218, 1204, 1218,
     1186, 1755, 1201, 1187, 1700, 1199, 1204, 1218, 1702, 1200,
        0, 1200, 1191, 1199,    0, 1186, 1187, 1700, 1201, 1191,
     1201, 1702, 1204, 1218,    0,    0, 1204, 1186,    0,    0,

     1187,    0,    0, 1199, 1756, 1702,    0, 1200, 1200, 1191,
     1199, 1186, 1187, 1708,    0, 1191, 1201, 1201, 1702,    0,
     1204, 1218, 1205, 1204, 1205, 1206, 1207, 1206, 1207, 1199,
     1708, 1756, 1205, 1200, 1757, 1206, 1207,    0,    0, 1208,
     1708, 1208, 1201, 1210,    0, 1210, 1204, 1218, 1205, 1208,
     1205, 1206, 1207, 1210,    0,    0, 1209, 1708, 1209, 1207,
     1758, 1757, 1720,    0, 1205, 1208, 1209, 1206, 1703, 1210,
        0, 1720,    0, 1206,    0,    0, 1205, 1205,    0, 1206,
     1207, 1703, 1209,    0, 1208,    0, 1207, 1758, 1209, 1720,
     1210, 1205,    0, 1208, 1206, 1703,    0, 1210, 1720, 1211,

     1206, 1211, 1205, 1761,    0, 1206, 1207,    0, 1703, 1211,
     1209, 1208, 1212,    0, 1212, 1209,    0, 1210, 1762, 1208,
        0, 1739, 1212, 1210,    0, 1211,    0, 1739,    0, 1213,
     1761, 1213, 1215, 1217, 1215, 1217, 1209,    0, 1212, 1213,
     1212,    0, 1215, 1217, 1211, 1762,    0, 1219, 1739, 1219,
     1220, 1211, 1220, 1211, 1739, 1213,    0, 1219, 1215, 1217,
     1220, 1217, 1763,    0, 1213,    0, 1212, 1212, 1215,    0,
     1216, 1211, 1216, 1219,    0,    0, 1220,    0, 1211, 1211,
     1216,    0,    0, 1213,    0,    0, 1215, 1217, 1217, 1763,
     1737, 1213, 1212, 1759, 1737, 1215, 1216,    0,    0,    0,

        0, 1219, 1216,    0, 1220, 1221, 1222, 1221, 1222, 1213,
        0, 1745, 1215, 1217, 1745, 1221, 1222, 1737,    0,    0,
     1759, 1737,    0, 1223, 1216, 1223, 1224, 1219, 1224, 1216,
     1220, 1221, 1222, 1223, 1222, 1712, 1224, 1221, 1745,    0,
        0, 1745, 1759, 1225, 1226, 1225, 1226, 1764, 1712, 1223,
     1216, 1724, 1224, 1225, 1226,    0, 1228, 1765, 1228, 1221,
     1222, 1222, 1712,    0, 1221, 1223, 1228, 1724, 1224, 1225,
     1226,    0,    0, 1223, 1764, 1712,    0, 1223, 1724,    0,
     1224, 1227, 1228, 1227, 1765, 1221, 1222, 1902, 1920, 1226,
     1225, 1227, 1223, 1767, 1724, 1224,    0, 1225, 1226, 1229,

     1223, 1229, 1231, 1223, 1231, 1721, 1224, 1227,    0, 1229,
     1228, 1230, 1231, 1230, 1902, 1920, 1226, 1225, 1721,    0,
     1767, 1230, 1227, 1225, 1226, 1229,    0,    0, 1231,    0,
        0, 1233, 1721, 1233,    0, 1227, 1228, 1230,    0, 1740,
     1229, 1233, 1767, 1230, 1231, 1721, 1740, 1924, 1928, 1227,
     1722,    0,    0, 1229, 1231,    0, 1231, 1233, 1235,    0,
     1235, 1227, 1722,    0,    0, 1230, 1740, 1229, 1235, 1930,
     1230, 1231, 1233, 1740, 1924, 1928, 1742, 1722, 1234, 1229,
        0, 1231, 1231,    0, 1235, 1233, 1234,    0, 1742, 1722,
     1235, 1230, 1232,    0, 1232, 1234, 1930, 1234,    0, 1233,

     1234,    0, 1232, 1742, 1236, 1234, 1236, 1748,    0, 1748,
     1744, 1233, 1235, 1234, 1236, 1742, 1931, 1235, 1232, 1239,
     1232, 1239, 1234, 1237, 1234, 1237, 1744, 1234, 1232, 1239,
     1236,    0,    0, 1237, 1748, 1723, 1748, 1744, 1235, 1232,
     1236,    0, 1232, 1931,    0, 1239, 1232, 1232, 1723, 1237,
        0,    0,    0, 1744, 1241, 1232, 1241,    0, 1236, 1237,
     1900, 1239, 1723, 1933, 1241, 1237, 1232, 1236, 1240, 1232,
     1240, 1900, 1232, 1239,    0, 1723,    0, 1237, 1240, 1243,
     1241, 1243,    0, 1242, 1236, 1242, 1237, 1900, 1239, 1243,
     1933, 1927, 1237, 1242, 1240,    0,    0,    0, 1900, 1239,

     1927, 1241, 1240, 1237, 1238, 1243, 1238,    0, 1241, 1242,
     1244, 1741, 1244,    0, 1238, 1243,    0, 1936, 1927, 1901,
     1244, 1245, 1240, 1245, 1741, 1242, 1901, 1927, 1241, 1240,
     1238, 1245,    0, 1243, 1241, 1238, 1244, 1242, 1741, 1246,
     1238, 1246, 1243, 1238, 1936, 1899, 1901, 1245, 1240, 1246,
     1238, 1741, 1242, 1901,    0, 1939,    0,    0, 1238, 1243,
     1899,    0, 1238, 1242, 1244, 1246, 1247, 1238, 1247, 1248,
     1238, 1248, 1899,    0,    0, 1245, 1247, 1238,    0, 1248,
        0, 1250, 1939, 1250, 1238,    0, 1249, 1899, 1249, 1942,
     1244, 1250, 1247, 1246, 1932, 1248, 1249,    0, 1251, 1248,

     1251, 1245,    0, 1252, 1945, 1252, 1746, 1250, 1251, 1746,
        0, 1932, 1249, 1252,    0, 1253, 1942, 1253, 1746, 1246,
     1247, 1932,    0, 1248, 1251, 1253, 1248,    0, 1249, 1252,
        0, 1945, 1250, 1746,    0, 1250, 1746, 1251, 1932,    0,
     1249, 1253,    0,    0, 1252, 1934, 1247,    0, 1254, 1248,
     1254,    0, 1251,    0, 1934, 1249, 1919, 1252, 1254, 1250,
     1255, 1250, 1255, 1253, 1251, 1256, 1249, 1256,    0, 1253,
     1255, 1252, 1934,    0, 1254, 1256,    0,    0, 1251,    0,
     1254,    0, 1919, 1252,    0,    0, 1255, 1259, 1259, 1259,
     1253, 1256,    0,    0, 1953, 1253, 1919, 1259, 1258, 1258,

     1258,    0, 1254, 1743, 1926, 1955, 1256, 1254, 1258, 1919,
     1260, 1260, 1260, 1259, 1255,    0, 1743, 1926,    0, 1256,
     1260, 1953,    0, 1259, 1258,    0,    0,    0, 1254,    0,
     1743, 1926, 1955, 1256,    0,    0, 1260,    0, 1260, 1258,
     1255, 1259, 1260, 1743, 1926, 1256, 1261, 1261, 1261, 1492,
     1259, 1492, 1258, 1262, 1262, 1262, 1261,    0,    0, 1492,
     1263, 1263, 1263, 1262, 1260, 1260, 1258, 1259, 1957, 1260,
     1263,    0, 1261,    0, 1935, 1492,    0, 1935, 1258, 1262,
        0,    0, 1264, 1264, 1264, 1261, 1263,    0, 1263, 1925,
     1260, 1958, 1264, 1925, 1262, 1957, 1265, 1265, 1265,    0,

     1261, 1935,    0, 1492, 1935, 1958, 1265, 1262, 1264, 1266,
     1266, 1266, 1261, 1954, 1263, 1263, 1925,    0, 1958, 1266,
     1925, 1262, 1265,    0,    0,    0, 1261,    0, 1265, 1492,
     1264,    0, 1958, 1262, 1959, 1266, 1264,    0,    0,    0,
     1263, 1267, 1267, 1267, 1273, 1273, 1273,    0, 1929,    0,
     1265, 1267, 1929, 1954, 1273, 1265, 1266, 1264, 1274, 1274,
     1274, 1959, 1264, 1266, 1275, 1275, 1275, 1267, 1274,    0,
     1273, 1276, 1276, 1276, 1275, 1929, 1265,    0, 1273, 1929,
     1954, 1276, 1905, 1266, 1274,    0, 1274,    0, 1905, 1266,
     1275,    0, 1275, 1962,    0, 1267, 1905, 1276, 1273,    0,

     1277, 1277, 1277, 1944, 1944, 1273, 1278, 1278, 1278, 1905,
     1277,    0, 1274, 1274, 1937, 1905, 1278,    0, 1275, 1275,
     1962, 1267,    0, 1937, 1273, 1276, 1277, 1279, 1279, 1279,
     1944, 1944, 1278, 1281, 1281, 1281, 1278, 1279, 1274,    0,
     1963, 1937,    0, 1281, 1275,    0, 1280, 1280, 1280, 1315,
     1937, 1276,    0, 1279, 1277, 1279, 1280, 1315, 1951, 1281,
     1278,    0, 1940, 1278, 1915, 1951, 1281, 1963, 1315, 1279,
     1915, 1315, 1280, 1282, 1282, 1282, 1315,    0, 1915, 1940,
     1277, 1279, 1279, 1282, 1315, 1951, 1278, 1281, 1280, 1940,
        0, 1915, 1951, 1281, 1280, 1315, 1279, 1915, 1315, 1282,

     1280,    0, 1283, 1283, 1283,    0, 1940, 1279,    0, 1286,
     1286, 1286, 1283, 1281, 1938, 1280, 1938, 1941, 1282, 1286,
     1941, 1280, 1284, 1284, 1284, 1943, 1280, 1282, 1283, 1285,
     1285, 1285, 1284, 1946, 1283, 1286,    0, 1286, 1966, 1285,
     1943, 1938,    0, 1938, 1941, 1282, 1946, 1941, 1284, 1287,
     1287, 1287, 1943, 1282,    0, 1285, 1283,    0,    0, 1287,
     1946, 1283,    0, 1286, 1286, 1966, 1952, 1943, 1952, 1284,
     1965, 1969, 1965, 1946, 1285, 1287, 1284,    0, 1288, 1288,
     1288, 1285, 1283, 1285, 1287, 1947, 1947, 1947, 1288, 1286,
     1289, 1289, 1289, 1952, 1974, 1952, 1284, 1965, 1969, 1965,

     1289, 1285, 1284, 1287, 1288, 1290, 1290, 1290, 1285, 1285,
        0, 1287, 1291, 1291, 1291, 1290, 1289, 1292, 1292, 1292,
        0, 1974, 1291, 1293, 1293, 1293, 1289, 1292, 1979, 1287,
     1947, 1290, 1288, 1293,    0,    0, 1956, 1290, 1291, 1947,
     1291, 1948, 1948, 1292, 1289, 1956, 1294, 1294, 1294, 1293,
     1948,    0, 1949, 1289,    0, 1979, 1294, 1947, 1288, 1290,
     1967, 1949, 1967, 1956, 1290,    0, 1291, 1291, 1948, 1948,
     1289, 1292, 1294, 1295, 1295, 1295,    0, 1293, 1294, 1949,
     1296, 1296, 1296, 1295,    0, 1290,    0, 1967, 1949, 1967,
     1296,    0, 1291,    0, 1297, 1297, 1297, 1292,    0, 1295,

     1294, 1295, 1980, 1293, 1297, 1294, 1296, 1298, 1298, 1298,
        0, 1299, 1299, 1299, 1300, 1300, 1300, 1298, 1961, 1960,
     1297, 1299, 1296, 1983, 1300, 1960, 1294, 1295, 1295, 1980,
     1296, 1984, 1961, 1298, 1296, 1964, 1297, 1299,    0,    0,
     1300,    0,    0,    0, 1964, 1961, 1960,    0, 1297, 1296,
     1983, 1980, 1960, 1295, 1298, 1300, 1299, 1296, 1984, 1961,
     1296, 1298, 1964, 1297,    0, 1299, 1982,    0, 1300, 1301,
     1301, 1301, 1972, 1972, 1297, 1302, 1302, 1302, 1985, 1301,
        0, 1298, 1300, 1299, 1968, 1302, 1968, 1298, 1303, 1303,
     1303, 1299,    0, 1982, 1300, 1301,    0,    0, 1303, 1972,

     1972, 1302,    0,    0, 1988, 1985,    0, 1302,    0,    0,
     1301, 1968,    0, 1968, 1303,    0, 1306, 1982, 1305, 1305,
     1305,    0,    0, 1301, 1306, 1970, 1989, 1973, 1305, 1302,
     1303, 1988,    0, 1306, 1302, 1306, 1973, 1301, 1306, 1970,
     1303,    0, 1303, 1306, 1305,    0, 1992,    0, 1970, 1301,
     1997, 1306, 1970, 1989, 1973, 1302,    0, 1303,    0, 1305,
     1306,    0, 1306, 1973,    0, 1306, 1970, 1303, 1303, 1304,
     1304, 1304, 1305, 1992, 1307, 1307, 1307, 1997,    0, 1304,
     1309, 1976, 1971, 1976, 1307, 1971, 1305, 1975, 1309,    0,
        0, 1312, 1312, 1312, 1309, 1304,    0, 1304, 1305, 1309,

     1307, 1312, 1309, 1986, 1975, 1304, 1307, 1309, 1976, 1971,
     1976,    0, 1971,    0, 1975, 1309, 1304, 1312,    0, 1304,
     1986, 1309,    0, 1304, 1304, 1312, 1309,    0, 1307, 1309,
     1986, 1975, 1304, 1307, 1311, 1311, 1311,    0, 1314, 1314,
     1314,    0,    0, 1304, 1311, 1312, 1304, 1986, 1314, 1304,
        0,    0, 1312,    0, 1307, 1310, 1977, 1998, 1310, 1977,
     1311,    0, 1993, 1310, 1314,    0, 1310,    0, 1316, 1316,
     1316, 1312, 1978, 1310, 1310, 1978, 1311, 1310, 1316, 1993,
     1314, 1999, 1310, 1977, 1998, 1310, 1977,    0, 1311, 1993,
     1310,    0, 1314, 1310, 1316, 1317, 1317, 1317,    0, 1978,

     1310, 1310, 1978, 1311, 1310, 1317, 1993, 1314, 1999, 1318,
     1318, 1318,    0, 2000, 1311, 1319, 1319, 1319, 1314, 1318,
        0, 1317, 1316, 1990, 1990, 1319, 1320, 1320, 1320,    0,
     1987,    0, 1321, 1321, 1321, 1318, 1320, 2001, 2002, 1987,
     2000, 1319, 1321,    0,    0, 1322, 1322, 1322, 1316, 1317,
     1990, 1990, 1320,    0, 2003, 1322, 1320, 1987, 1321,    0,
     2004, 1991,    0, 1318, 2001, 2002, 1324, 1324, 1324, 1319,
     1991, 1322,    0, 2005, 1321, 1317, 1324,    0,    0,    0,
     1320, 2003,    0, 1320,    0,    0, 1321, 2004, 1991, 1318,
        0,    0, 1324,    0, 2006, 1319, 1322, 1991,    0, 1322,

     2005, 1321,    0, 1325, 1325, 1325, 1320, 1324,    0, 1326,
     1326, 1326, 1321, 1325,    0,    0, 1327, 1327, 1327, 1326,
     1324, 2006, 2009, 1322,    0, 1322, 1327, 2010, 2011, 1325,
     1328, 1328, 1328, 2012, 1324, 1326,    0, 1994, 2013, 1994,
     1328, 1326, 1327,    0,    0, 1995, 1324, 1996, 1995, 2009,
     1996, 1325, 2014, 2128, 2010, 2011, 1328, 1325, 2016, 2127,
     2012, 2127,    0, 1326, 1994, 2013, 1994, 2129, 1326,    0,
     1327, 1328, 1995, 2009, 1996, 1995,    0, 1996, 1325, 2014,
     2128, 2130,    0, 1325, 1328, 2016, 2127,    0, 2127, 1326,
        0,    0,    0,    0, 2129,    0, 1327,    0, 1328, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 2130, 2016,
     1328, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1335, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 2142, 2151, 1337,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1339,    0,
        0,    0,    0,    0, 2142, 2151,    0, 1340, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345,

     1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346,    0, 2023, 1345, 2023, 2154,
        0, 2024, 1345, 2024, 2159, 2140, 2023, 2140, 1345,    0,
        0, 2024,    0, 2024,    0,    0, 1345,    0,    0,    0,
        0,    0, 2023,    0, 1345, 1346, 2154, 2024,    0, 1345,
        0, 2159, 2140,    0, 2140, 1345, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352,    0, 2163, 2164, 2023, 2023, 2138, 2131,

     1349, 2024, 2078, 2078, 2078, 2131, 1349,    0, 2079, 2079,
     2079, 2138, 2078, 2131, 1349, 1352,    0,    0, 2079,    0,
     2079, 2163, 2164, 1352,    0, 2138, 2131, 1349, 2078,    0,
        0,    0, 2131, 1349, 2079,    0,    0,    0, 2138,    0,
        0,    0, 1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 2141,
     2139, 1355, 2078, 2078, 2139, 2144, 1355, 2144, 2079, 2145,
     2141, 2145, 1355, 2146, 2150, 2158, 2150, 2146, 2145, 2158,

     1355, 1357,    0,    0,    0,    0, 2141, 2139, 1355, 1357,
        0, 2139, 2144, 1355, 2144,    0, 2145, 2141, 2145, 1355,
     2146, 2150, 2158, 2150, 2146,    0, 2158,    0, 1357, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 2147, 2148, 2152,    0,
     2152, 2165, 2157, 1360, 2157, 2167, 2148, 2147, 2168, 1360,
        0,    0,    0,    0,    0,    0,    0, 1360,    0,    0,
        0,    0,    0, 2147, 2148, 2152, 1363, 2152, 2165, 2157,

     1360, 2157, 2167, 2148, 2147, 2168, 1360, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373,    0, 2132,    0, 1368, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1493, 1494, 1493, 1494, 1495, 2132, 1495,
     1375, 2169,    0, 1493, 1494,    0, 1496, 1495, 1496, 2160,

        0,    0, 2132,    0, 1375,    0, 1496, 2135,    0, 1493,
     1494,    0, 2160, 1495, 1497, 2132, 1497, 1375, 2169, 1498,
        0, 1498, 1496,    0, 1497, 1499, 2160, 1499, 1496, 1498,
     1493, 1494, 1495, 2135,    0, 1499,    0, 1493, 1494, 2160,
     1497, 1495, 2172, 2172, 2176, 1498, 1500, 2135, 1500,    0,
     1496, 1499, 1501, 1498, 1501, 1496, 1500, 1493, 1494, 1495,
     2135, 1497, 1501, 1493, 1494, 1499,    0, 1495, 1497, 2172,
     2172, 2176, 1500, 1498, 1500, 2177, 1496, 2177, 1501, 1499,
     1498, 1506, 2180, 1506,    0,    0,    0,    0, 1497, 2182,
     2175, 1506, 1499, 1509, 1497, 1509, 2175, 1501, 2149, 1498,

     1500, 1500, 2177, 1509, 2177, 1499, 1501, 1506, 1507, 2180,
     1507, 1508, 1510, 1508, 1510, 2149, 2182, 2175, 1507, 1509,
        0, 1508, 1510, 2175, 1501, 2149, 1500,    0, 2178, 1506,
     2178,    0, 1501, 2180, 1507, 1506, 2183, 1508, 1510,    0,
     1509, 2153, 2149, 1511, 1512, 1511, 1512, 1509, 2166, 1507,
     2153, 2166, 1508, 1511, 1512, 2178, 1506, 2178, 1510, 2184,
     2166, 1506, 1507, 2183,    0, 1508, 1510, 1509, 2153, 1511,
     1512,    0,    0, 1509,    0, 2166, 1507, 2153, 2166, 1508,
     1513,    0, 1513,    0, 1511, 1510, 2184,    0, 1507, 1512,
     1513, 1508, 1510, 1514,    0, 1514,    0, 1511, 1512, 1515,

     1517, 1515, 1517, 1514, 2171,    0, 1513,    0, 2171, 1515,
     1517, 1511, 1516, 2162, 1516,    0, 1512, 2181,    0, 1514,
        0, 1513, 1516, 1511, 1512, 1515, 1517,    0,    0,    0,
     2162, 2171, 1517,    0, 1513, 2171,    0, 2191, 1516, 2162,
     2162, 1515, 2187, 2187, 2181, 1517,    0, 1514, 1513,    0,
     2194,    0,    0, 1515, 1517, 1516, 2181, 2162, 1516, 1517,
     1513, 1518,    0, 1518, 2191, 1519, 1516, 1519, 1515, 2187,
     2187, 1518, 1517, 1514,    0, 1519, 1520, 2194, 1520, 1515,
     1517,    0, 1516,    0,    0, 1516, 1520, 1518, 1521, 1518,
     1521, 1519, 1516,    0,    0, 2174, 2170,    0, 1521, 2174,

        0, 1522, 1520, 1522, 2195,    0,    0, 1523, 1519, 1523,
     1524, 1522, 1524, 2170, 1521, 1518, 1518, 1523,    0, 1519,
     1524, 1520, 2174, 2170, 1521,    0, 2174, 1522,    0,    0,
     1520, 2195, 2190, 1523,    0, 1519, 1524, 1525, 2190, 1525,
     2170, 1518, 1521, 1522, 2196, 1519,    0, 1525, 1520, 1524,
        0, 1521, 1526, 2197, 1526, 1522, 1520,    0, 2198, 2190,
        0, 1523, 1526, 1525, 1524, 2190,    0, 1527, 1521, 1527,
     1522, 2196, 1529, 1528, 1529, 1528, 1524, 1527, 1526,    0,
     2197, 1522, 1529, 1528, 1525, 2198, 1530, 1523, 1530, 2199,
     1524, 1525, 1526, 1527,    0,    0, 1530, 2189, 1529, 1528,

        0, 2189,    0, 1531, 2173, 1531, 1526, 2185, 1527, 2185,
     2201, 1525, 1530, 1531,    0, 2173, 2199, 1525, 1528, 1526,
     1532, 1527, 1532, 2202, 2189,    0, 1529, 1528, 2189, 1531,
     1532, 2173, 1526, 1531, 2185, 1527, 2185, 2201,    0, 1533,
     1530, 1533, 2173,    0,    0, 1528, 1532, 1527, 2205, 1533,
     2202,    0, 1529, 1528, 1534,    0, 1534, 1531,    0, 1535,
     1531, 1535, 2206, 2207, 1534, 1533, 1530,    0, 1536, 1535,
     1536, 1537,    0, 1537, 1532, 2205,    0, 1539, 1536, 1539,
     1534, 1537, 2192, 1531, 2192, 1535, 1538, 1539, 1538, 2206,
     2207,    0,    0, 1533, 1536,    0, 1538, 1537,    0, 2188,

     1532, 1535, 2203, 1539, 1540, 2204, 1540,    0, 1534, 2192,
     2188, 2192, 1538, 1535, 1540, 1536,    0,    0, 1537, 1533,
     2208,    0, 1536, 2161, 2161, 1537, 2188, 1538, 1535, 2203,
     1540, 1539, 2204, 1541, 1534, 1541, 2209, 2188,    0, 1535,
     1538, 2161, 1536, 1541, 2204, 1537, 1540, 2208, 1536,    0,
     1542, 1537, 1542, 2203, 1538, 2161, 2302, 1539, 1540, 1541,
     1542,    0, 1543, 2209, 1543, 2156, 1538,    0, 2161, 1544,
     2309, 1544, 1543, 1540,    0,    0, 1542,    0, 2210, 1544,
     1541, 2156, 2161, 2302, 1540, 2313,    0, 1541, 1543,    0,
     2156, 1542, 2156, 2211, 1543, 1544, 1545, 2309, 1545, 1546,

     1548, 1546, 1548,    0, 1542, 2210, 1545, 1541, 2156, 1546,
     1548, 1544, 2313, 1541,    0, 2301, 1543, 1547, 1542, 1547,
     2211, 1543, 1545, 1544, 1545, 1546, 1548, 1547,    0, 2210,
     1542, 1548, 2211,    0, 1550, 2317, 1550, 1549, 1544, 1549,
     1546, 2301, 1543, 1547, 1550,    0,    0, 1549,    0, 1544,
     1545, 1545,    0, 1546, 1548, 2301, 2294, 1547, 1548, 1551,
     1550, 1551, 2317, 1549,    0, 2294, 2319, 1546, 2301, 1551,
        0, 1547, 1552, 1549, 1552, 1550, 1545,    0,    0, 1546,
     1548,    0, 1552, 2294, 1547, 1551,    0,    0, 1550, 2295,
        0, 1549, 2294, 2319, 1554, 1551, 1554, 1547, 1552, 1553,

     1549, 1553, 1550,    0, 1554, 1555, 2295, 1555, 1552, 1553,
        0,    0,    0, 1551, 1550, 1555, 2295, 1549,    0, 1557,
     1554, 1557, 1551, 2306,    0, 1553, 1552,    0, 1556, 1557,
     1556, 1555, 1558, 2295, 1558, 1552, 2322, 2306, 1556, 1551,
        0, 1561, 1558, 1561, 1553, 1557,    0,    0, 1554, 2322,
     2306, 1561, 1552, 1553, 1556, 1559,    0, 1559, 1558, 1555,
     2323, 1556, 1558, 2322, 2306, 1559, 1557, 1561, 1560,    0,
     1560, 1553,    0, 1557, 1554, 2311, 2322,    0, 1560, 1553,
     2324, 1559, 1556, 1561, 2311, 1555, 1558, 2323, 1556, 1558,
     1562,    0, 1562, 1557, 1560, 1561, 1559,    0, 2327, 1557,

     1562,    0, 2311, 1563, 1565, 1563, 1565, 2324, 1556, 1559,
     1561, 2311, 1558, 1563, 1565, 1560, 1562, 1566, 1566, 1566,
     2328, 1561, 1560, 1559, 2186, 2327, 1564, 1566, 1564, 1563,
     1565,    0, 2193, 1562, 2193, 1559, 1564, 2329, 1565,    0,
     2186, 2329, 1560, 1566, 1562,    0,    0, 2328, 1560, 2186,
     1563, 2186, 1564, 1567, 1567, 1567,    0, 1563, 1565, 2193,
     1562, 2193,    0, 1567, 2329, 1565, 1564, 2186, 2329, 2332,
     1562, 1566, 1568, 1568, 1568,    0,    0, 1563, 2308, 1567,
     1564, 2308, 1568, 1563, 1565, 1569, 1569, 1569,    0, 1570,
     1570, 1570,    0, 1564,    0, 1569, 2332, 1566, 1568, 1570,

     1567,    0, 1571, 1571, 1571, 2308, 1564, 1567, 2308,    0,
        0, 1569, 1571,    0,    0, 1570,    0,    0, 2297, 1568,
     2333, 1570,    0,    0, 2297,    0, 1568, 1567, 1571,    0,
     1569, 2321, 2297, 1567, 1572, 1572, 1572, 2321,    0, 1569,
     1573, 1573, 1573, 1570, 1572, 2297, 1568, 2333, 1570, 1571,
     1573, 2297, 1568,    0,    0,    0, 1571, 1569, 2321,    0,
     1572, 1574, 1574, 1574, 2321, 1569, 1573,    0, 1572, 1570,
        0, 1574,    0, 1575, 1575, 1575, 1571,    0, 2334,    0,
     1573, 2312, 1571, 1575, 2307,    0, 2307, 1574, 1572, 1574,
     2312,    0, 2336,    0, 1573, 1572, 1580, 1580, 1580, 1575,

        0,    0, 1581, 1581, 1581, 2334, 1580, 1573, 2312,    0,
        0, 2307, 1581, 2307, 1572, 1574, 1574, 2312, 1575, 2336,
     1573,    0, 1580, 1582, 1582, 1582,    0, 1575, 1581,    0,
     2337,    0,    0, 1582, 2338,    0, 1583, 1583, 1583, 2314,
     2331, 1574, 2314, 1581, 1580, 1575, 1583, 2331, 2315, 1582,
     1580, 2315,    0, 1575,    0,    0, 1581, 2337, 1584, 1584,
     1584, 2338, 1583,    0, 1582,    0, 2314, 2331, 1584, 2314,
     1581, 1580,    0,    0, 2331, 2315, 1580, 1582, 2315, 1585,
     1585, 1585, 1581, 1583, 1584, 1586, 1586, 1586,    0, 1585,
     1583, 1582, 1588, 1588, 1588, 1586, 1587, 1587, 1587, 1589,

     1589, 1589, 1588, 1582, 1584, 1585, 1587,    0,    0, 1589,
     1583, 1586, 1584, 2318,    0, 2330, 1583,    0, 1588,    0,
     1585, 2343, 1587,    0, 2344, 1589,    0, 2330, 2318,    0,
     1586, 1584,    0, 1585, 1590, 1590, 1590, 1587, 1584, 1586,
     2318, 1589, 2330, 2345, 1590,    0, 1588, 1585, 2343,    0,
     1587, 2344,    0, 1589, 2330, 2318, 1769, 1586, 1769, 1585,
     1590, 1591, 1591, 1591, 1587, 1586, 1769, 2335, 1589,    0,
     2345, 1591, 1588, 1592, 1592, 1592, 1587, 1590,    0, 1589,
     1590, 2316, 1769, 1592, 2335, 2348, 2316, 1591, 1590,    0,
     1594, 1594, 1594, 1591, 2335, 1593, 1593, 1593, 2341, 1592,

     1594, 1592,    0,    0, 1590, 1593, 1591, 1590, 2316,    0,
     1769, 2335, 2348, 2316, 1590, 1591, 1594,    0,    0, 2349,
     1591, 1593, 1595, 1595, 1595, 2341,    0, 1592, 1592, 1596,
     1596, 1596, 1595, 1591, 2342, 1594, 1769, 2341, 1593, 1596,
     1773, 1591, 1773,    0, 1594, 2320, 2349, 2320, 1595, 1593,
     1773,    0,    0, 1592, 2347, 1596,    0,    0, 1595, 2351,
     2347, 2342, 1594,    0,    0, 1593, 1773, 1597, 1597, 1597,
     1594, 1596, 2320, 2352, 2320, 1593, 1595, 1597, 1598, 1598,
     1598, 2347,    0, 1596, 2342, 1595, 2351, 2347, 1598, 1599,
     1599, 1599, 2353, 1597, 1773,    0,    0,    0, 1596, 1599,

     2352,    0, 1595, 2354, 1598,    0,    0, 2355, 2358, 1596,
        0,    0, 1600, 1600, 1600, 1599,    0, 1598, 2362, 2353,
     1773, 1597, 1600, 1601, 1601, 1601,    0, 1602, 1602, 1602,
     2354,    0, 1598, 1601, 2355, 2358, 1599, 1602, 1600,    0,
     2363, 2365,    0, 1599, 1598, 2362, 2346, 1597,    0, 1601,
        0, 2366, 1600, 1602,    0, 2346, 2367, 2362, 1598,    0,
     1603, 1603, 1603, 1599, 1601,    0, 1600, 2363, 2365, 1599,
     1603, 2368, 1602, 2346, 1604, 1604, 1604, 1601, 2366, 1600,
     2442, 1602, 2346, 2367, 1604, 2350, 1603, 1605, 1605, 1605,
     2363, 1601, 1600,    0, 1606, 1606, 1606, 1605, 2368, 1602,

     1604,    0, 2350, 1601, 1606, 2445, 2442, 1602, 1607, 1607,
     1607, 2369, 2350, 1605, 1603, 2450, 2370, 1605, 1607,    0,
     1606, 1608, 1608, 1608, 2452, 2457, 2458,    0, 1604, 2350,
        0, 1608, 2445, 2442, 1607, 1609, 1609, 1609, 2369,    0,
     1603, 1605, 2450, 2370, 1605, 1609, 2437, 1608, 1606, 2437,
     2369, 2452, 2457, 2458, 1604, 1610, 1610, 1610, 1611, 1611,
     1611, 1609, 1607,    0,    0, 1610, 2370, 1605, 1611, 1612,
     1612, 1612, 2447, 2437, 1606, 1608, 2437, 1609,    0, 1612,
     2461, 1610,    0,    0, 1611,    0, 2447, 2460, 1607, 1609,
     1613, 1613, 1613,    0,    0, 1612, 2460,    0,    0, 2447,

     1613, 1608, 1610,    0, 1609, 1611, 2468, 2461,    0, 1610,
     1612,    0, 1611, 2447, 2460, 1609, 1613, 1614, 1614, 1614,
     1615, 1615, 1615, 1612, 1616, 1616, 1616, 1614,    0, 1610,
     1615, 2438, 1611, 2468, 1616, 1610, 2438, 1612, 1611, 2448,
        0, 2451, 2448, 1614, 1613, 2451, 1615,    0, 2454, 1612,
     1616, 1617, 1617, 1617, 1618, 1618, 1618, 2454, 2438, 1614,
     2469, 1617,    0, 2438, 1618, 1616, 2448, 1615, 2451, 2448,
     1613, 1614, 2451,    0, 1615, 2454, 2455, 1617, 1616, 2455,
     1618,    0, 2446, 1617, 2454,    0, 1614, 2469, 1619, 1619,
     1619,    0, 1616,    0, 1615, 2474, 1618, 1614, 1619, 2446,

     1615,    0, 2476, 2455, 1616, 1617, 2455,    0, 1618, 2446,
     1617, 1620, 1620, 1620, 1619, 2216, 1619, 2216, 1621, 1621,
     1621, 1620, 2474, 1618,    0, 2216, 2446, 2216, 1621, 2476,
     2449, 1617,    0, 2466, 1618, 2449, 2479, 1620, 1622, 1622,
     1622, 2216, 1619, 1619, 1621, 1623, 1623, 1623, 1622, 1624,
     1624, 1624, 1620, 2453,    0, 1623,    0, 2449, 1621, 1624,
     2466,    0, 2449, 2479, 1622, 1620, 2453, 2462, 1619, 1622,
        0, 1623, 1621, 2462, 2477, 1624, 1625, 1625, 1625, 1620,
     2453, 1623,    0, 2466,    0, 1621, 1625, 1626, 1626, 1626,
     1624, 1620, 1622, 2453, 2462, 2216, 1622, 1626, 1621, 1623,

     2462, 2477, 1625, 1624,    0, 1628, 1628, 1628, 1623, 1627,
     1627, 1627, 1625, 1626,    0, 1628,    0, 1624, 1622, 1627,
        0,    0,    0, 1626, 2477, 1623, 1629, 1629, 1629, 1624,
     1625, 1628, 1630, 1630, 1630, 1627, 1629, 2459,    0, 1625,
        0, 1626, 1630, 1631, 1631, 1631,    0, 1632, 1632, 1632,
     1626, 2459, 1629, 1631, 1627, 2473, 1625, 1632, 1630, 1628,
     2481, 2473,    0, 1627, 2459, 1630,    0, 1626,    0, 1631,
        0, 2482, 2530, 1632, 1633, 1633, 1633, 1632, 2459,    0,
     1629, 1627, 2473,    0, 1633, 1628, 1630, 2481, 2473, 1627,
     1631,    0, 1630, 1634, 1634, 1634,    0, 1631, 2482, 2530,

     1633, 1632, 2533, 1634, 1632,    0, 1629,    0, 1635, 1635,
     1635, 2539, 1630,    0,    0, 1633, 2467, 1631, 1635, 1634,
     1636, 1636, 1636, 1631, 2456,    0, 2456, 1632, 1633, 2533,
     1636, 1637, 1637, 1637, 1635, 1638, 1638, 1638, 2539, 2538,
     1634, 1637, 1633, 2467, 2483, 1638, 1636, 1634, 2538, 2471,
     1635, 2456, 2471, 2456, 1633,    0,    0, 1637, 1639, 1639,
     1639, 1638, 1635, 1636,    0, 2467, 2538, 1634, 1639, 2472,
     2537, 2483, 2472, 1634, 1636, 1638, 2471, 1635, 1637, 2471,
        0, 2257, 2257, 2257, 1639, 1637, 2542, 2537, 1635, 1638,
     1636, 2257, 1639, 2257, 2483,    0, 2472, 2537,    0, 2472,

     1636,    0, 1638,    0,    0, 1637,    0, 2257,    0,    0,
        0, 1637, 1639, 2542, 2537, 1638,    0,    0,    0, 1639,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1639, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 2534, 2543, 1644,
        0, 2257,    0,    0,    0,    0,    0,    0, 1645,    0,
     2534, 2478, 2484, 1647,    0,    0,    0,    0, 1646,    0,
        0,    0,    0,    0, 2534, 2543,    0, 1647, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1652, 1652, 2534, 2478, 2484,

     1647, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     2478, 2484,    0,    0, 2544,    0, 1770, 1649, 1770, 1775,
     1787, 1775, 1787, 1649,    0,    0, 1770,    0,    0, 1775,
     1787, 1649, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 2544, 1770,    0, 1649, 1775, 1787,    0, 1770,    0,
     1649, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,    0,
     1770, 1653,    0, 1775, 1787, 1770, 1653,    0, 1796,    0,
     1796, 2547, 1653,    0,    0,    0,    0,    0, 1796,    0,

     1653,    0,    0,    0,    0,    0, 1770,    0, 1653, 1775,
     1787, 2554, 2529, 1653, 1796,    0, 2529, 2558, 2547, 1653,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 2554, 2529,
        0,    0, 1796, 2529, 2558, 1660, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1665, 1771, 1772, 1771, 1772, 1660,
     1774, 1776, 1774, 1776,    0, 1771, 1772, 1777, 1796, 1777,
     1774, 1776, 1660,    0,    0, 2540,    0, 1777, 2540,    0,
     2535, 1771, 1772,    0, 2535, 2536, 1774, 1776,    0,    0,
     2545, 1771, 2564, 1777,    0, 2612, 1772, 2552, 2536, 2545,

     1776, 1774, 2540, 1777, 2612, 2540, 1781, 2535, 1781, 1771,
     1772, 2535, 2536,    0, 1774, 1776, 1781, 2545, 1771, 2564,
        0, 1777, 2612, 1772, 2552, 2536,    0, 1776, 1774, 1782,
     1777, 1782, 1781,    0,    0, 1771, 1772,    0, 2614, 1782,
     1774, 1776, 1783, 1784, 1783, 1784, 2552, 1777, 1785,    0,
     1785, 1781, 1783, 1784, 2616, 1782,    0,    0, 1785,    0,
     1781, 1786, 1788, 1786, 1788, 2614,    0,    0, 1783, 1784,
        0, 1786, 1788, 1783, 1785,    0, 1782, 2621, 1781, 1784,
     1785, 2616,    0, 1782, 2541,    0, 1781, 1786, 1788,    0,
        0, 1789, 1788, 1789, 1786,    0, 1783, 1784,    0, 2541,

     1783, 1789, 1785, 1782, 2621, 2629, 1784, 1785, 1790, 1782,
     1790, 2541, 2561,    0,    0, 1786, 1788, 1789, 1790, 1788,
        0, 1786, 1783, 1784,    0, 1789, 2541, 1791, 1785, 1791,
        0,    0, 2629, 1792, 1790, 1792,    0, 1791, 2630, 2561,
     1790, 1786, 1788, 1792, 1793, 1789, 1793, 1795, 1794, 1795,
     1794, 2556, 1789, 1791, 1793, 2556,    0, 1795, 1794, 1792,
        0, 2561, 1790, 2566,    0, 2630,    0, 1790, 2628, 1791,
     1793, 1789,    0, 1795, 1794,    0, 1792, 2546, 2556, 1795,
        0, 1791, 2556, 1797, 1798, 1797, 1798, 1792, 1790, 1794,
     2566, 2546, 1793, 1797, 1798, 2628, 1791,    0, 1793, 2557,

     2546, 1795, 1794, 1792, 2546,    0, 1795, 1791,    0, 1797,
     1798,    0, 2566, 1792, 2557, 2628, 1794,    0, 2546, 1793,
        0, 1799, 1797, 1799, 1793, 1798, 2557, 1795, 1794,    0,
     1800, 1799, 1800, 1801, 1802, 1801, 1802, 1797, 1798,    0,
     1800, 2557, 2631, 1801, 1802,    0,    0, 1799,    0, 1797,
        0, 1805, 1798, 1805,    0, 1803, 1800, 1803, 1800, 1801,
     1802, 1805, 2633, 1797, 1798, 1803, 1804,    0, 1804, 2631,
     1806,    0, 1806, 1802,    0, 1799, 1804, 1805,    0,    0,
     1806, 1803,    0,    0, 1800, 1800,    0, 1801, 1802, 2633,
     1805, 1803, 1804, 1808, 2635, 1808, 1806, 1809, 1804, 1809,

     1802, 1799, 1806, 1808,    0, 1805, 1807, 1809, 1807, 1803,
     1800,    0, 2636, 1801, 1802,    0, 1807, 1805, 1803, 1808,
     1804, 2635, 2637, 1809, 1806, 1804, 1810, 2613, 1810, 1806,
     2679, 1805, 1807,    0, 2613, 1803, 1810,    0, 1807, 2636,
     1808, 2635, 1809,    0,    0,    0, 1804, 1808,    0, 2637,
     1806, 1809, 1810, 1811, 2613, 1811, 1812, 2679, 1812,    0,
     1807, 2613, 1814, 1811, 1814, 1807, 1812, 1808, 1813, 1809,
     1813, 2618, 1814, 1808,    0, 2624, 2639, 1809, 1813, 1811,
     1810, 2683, 1812, 1815, 1812, 1815, 1807, 2618, 1814,    0,
        0, 2688, 2624, 1815, 1813, 1817, 2618, 1817, 2618,    0,

     1811, 1814, 2624, 2639,    0, 1817, 1810, 1811, 2683, 1815,
     1812, 1812,    0, 1813, 2618, 1816, 1814, 1816, 2688, 2624,
        0, 1817, 1813, 2639, 1818, 1816, 1818, 1811, 1814, 1819,
     1815, 1819, 2690, 1811, 1818,    0, 1812, 1815, 2688, 1819,
     1813, 1816, 1814,    0, 1820,    0, 1820, 1816, 1813, 1817,
     1818, 2490,    0, 2490, 1820, 1819, 1822, 1815, 1822, 2690,
        0, 2490, 1823, 1815, 1823, 1818, 1822, 2682,    0, 1816,
     1820,    0, 1823, 2682, 1816, 1817, 1819, 2490, 1818, 1821,
        0, 1821, 1822, 1819, 2617, 1820, 2617, 1822, 1823, 1821,
        0, 1824, 1818, 1824, 2682, 1816,    0, 1825, 1820, 1825,

     2682, 1824,    0, 1819, 1818, 1821,    0, 1825,    0, 1819,
     1822, 2617, 1820, 2617, 1822,    0, 1823, 1824,    0, 2689,
     1821,    0,    0, 1825, 1820,    0, 2619, 1824, 2620, 1825,
     2619, 2490, 2490, 1821, 2691, 2620, 1822,    0, 1827, 1826,
     1827, 1826, 1823,    0,    0, 1824, 2689, 1821, 1827, 1826,
     1828, 1825, 1828, 2619, 1824, 2620, 1825, 2619,    0, 1821,
     1828, 2691, 2620,    0, 1827, 1826,    0,    0, 2689, 2681,
     1827, 1824, 1826, 2623, 2692, 2623, 1828, 1825, 2681, 1828,
        0, 1829, 2623, 1829, 1830, 1831, 1830, 1831, 1832,    0,
     1832, 1829, 1827, 1826, 1830, 1831, 2681, 1827, 1832, 1826,

     2623, 2692, 2623,    0, 1828, 2681, 1828, 1829,    0, 2632,
     1830, 1831,    0, 2687, 1832, 1833, 2632, 1833, 1827, 1826,
     2687,    0, 1834, 1834, 1834, 1833, 1830,    0, 1831, 1829,
     1828, 1832, 1834, 2693,    0, 1829, 2632,    0, 1830, 1831,
     2687, 1833, 1832, 2632, 1836, 1836, 1836, 2687, 1834, 1835,
     1835, 1835, 2695, 1830, 1836, 1831, 1829,    0, 1832, 1835,
     2693, 1829,    0,    0, 1830, 1831,    0, 2694, 1832, 1833,
     1836,    0,    0, 2696,    0, 1835, 1834, 2729, 2698, 2695,
     1836, 1835,    0, 1837, 1837, 1837, 1838, 1838, 1838, 1839,
     1839, 1839,    0, 1837, 2694, 1833, 1838,    0, 1836, 1839,

     2696, 2695, 1834, 1835, 2729, 2698, 2728, 1836, 1835, 1837,
        0, 2728, 1838,    0, 2694, 1839, 1840, 1840, 1840, 2615,
     2615, 2615,    0, 1837, 1836, 2698, 1840,    0,    0, 1835,
     1839, 2699,    0, 2728, 1841, 1841, 1841, 1837, 2728, 2489,
     1838, 2489, 1840, 1839, 1841, 1842, 1842, 1842,    0, 2489,
     1837, 2489, 1846, 1846, 1846, 1842,    0, 1839, 2699, 2686,
     1841,    0, 1846, 1837, 2615, 2489, 1838,    0, 2686, 1839,
     1840, 1842,    0, 1841,    0, 1847, 1847, 1847, 1846,    0,
     2699, 1842, 2730, 2724,    0, 1847, 2686,    0, 1841, 2724,
     2731, 2615, 1848, 1848, 1848, 2686, 1840, 1846,    0, 1842,

     1841, 1847, 1848,    0,    0,    0, 1846,    0, 1842, 2730,
     2724, 1849, 1849, 1849, 1841, 2732, 2724, 2731, 1848, 2489,
        0, 1849, 1847, 1848, 1846, 1842, 1850, 1850, 1850, 1847,
     2731, 2730, 1846, 1851, 1851, 1851, 1850, 1849, 1852, 1852,
     1852,    0, 2732, 1851, 2733,    0, 1848, 1849, 1852, 1847,
     1848, 2725, 1850,    0, 2725, 1847, 2734, 2737, 1850, 1851,
     1853, 1853, 1853,    0, 1852, 1849, 1851, 2684, 2684, 2684,
     1853, 2733, 1848,    0, 1849,    0, 2736,    0, 2725,    0,
     1850, 2725, 2735, 2734, 2737, 1850, 1853, 1851, 2754,    0,
     1853, 1849, 1852, 1851, 1854, 1854, 1854, 1855, 1855, 1855,

     1856, 1856, 1856, 2736, 1854, 2739, 1850, 1855,    0, 2735,
     1856,    0, 2684, 1851, 1853, 2754, 2736, 1853, 1852,    0,
     1854,    0, 2738, 1855,    0, 2678, 1856,    0, 1854, 1855,
     2752, 2735, 2739, 1857, 1857, 1857, 1858, 1858, 1858, 2684,
     1853, 2678, 1856, 1857,    0, 2739, 1858,    0, 1854, 2738,
     2678, 1855, 2678,    0, 1856, 1854, 1855, 2752, 2726, 1857,
        0, 2726, 1858, 1859, 1859, 1859,    0,    0, 2678, 1856,
     2752, 2738,    0, 1859, 1854,    0, 1857, 1855,    0, 2753,
     1856, 1861, 1861, 1861, 1858, 2726,    0, 1857, 2726, 1859,
     1858, 1861, 1860, 1860, 1860, 1863, 1863, 1863,    0, 1862,

     1862, 1862, 1860, 1857, 1859, 1863, 2753, 1861,    0, 1862,
     2749, 1858, 2755, 1857, 2749,    0, 1858, 1859, 1860,    0,
     2748, 1863,    0, 2748, 1860, 1862,    0,    0, 2753,    0,
     2756, 1859, 1864, 1864, 1864, 1861, 1863, 2749, 1862, 2755,
        0, 2749, 1864, 1859, 2759,    0, 1860, 2748,    0, 1863,
     2748, 1860,    0, 1862, 1865, 1865, 1865, 2756, 1864,    0,
        0, 1861,    0, 1863, 1865, 1862, 1866, 1866, 1866, 2750,
        0, 2759, 1860, 2769, 2771, 1863, 1866,    0,    0, 1862,
     1865,    0, 1865, 2775, 2750,    0, 1864, 1867, 1867, 1867,
     2758, 2757, 1866, 1868, 1868, 1868, 2750, 1867, 2760,    0,

     2769, 2771,    0, 1868, 1869, 1869, 1869,    0, 1865, 1865,
     2775, 2750, 1864, 1867, 1869,    0,    0, 2758, 2757, 1868,
     1866,    0, 1870, 1870, 1870, 2760, 1867, 2776, 2770, 1868,
     1869, 2757, 1870, 2761, 1865, 2770, 1869,    0, 2760, 2758,
        0, 1867, 1871, 1871, 1871,    0, 1866, 1868, 1870, 1872,
     1872, 1872, 1871, 1867, 2776, 2770, 1868,    0, 1869, 1872,
     2761, 1870, 2770, 1869, 2751, 2779,    0, 1867, 1871, 1873,
     1873, 1873, 2768, 1868, 1871, 1872, 1870, 2751,    0, 1873,
        0, 1872, 2761,    0, 1869, 2773, 2788, 2768, 1870,    0,
        0, 2751, 2779, 2788,    0, 1873, 1871, 2789, 2791, 2768,

        0, 1871, 1870, 1872, 2751, 1874, 1874, 1874, 1872, 1875,
     1875, 1875, 2773, 2788, 2768, 1874, 1873, 2778,    0, 1875,
     2788, 2773, 1871, 1873, 2789, 2791, 1876, 1876, 1876, 1872,
     2772, 1874, 1877, 1877, 1877, 1875, 1876,    0, 1878, 1878,
     1878,    0, 1877, 1873, 2778, 1879, 1879, 1879, 1878, 1873,
     1874, 2791, 1876, 2778, 2801, 1879,    0, 2772, 1877, 1874,
     1877,    0,    0, 1875, 1878, 1881, 1881, 1881, 1880, 1880,
     1880, 1879,    0, 1876, 2777, 1881,    0, 1874, 1880, 2772,
     1876, 2801,    0, 1878, 1879, 1874, 1877, 1877, 2570, 1875,
     2570, 1881, 1878, 2835, 1880,    0,    0, 1881, 2570, 1879,

     1876, 2777,    0, 1882, 1882, 1882, 1876, 1884, 1884, 1884,
     1878, 1879, 1877, 1882, 2570, 1880,    0, 1884, 1878, 1881,
     2835,    0, 1880, 2777, 1881, 1879, 1883, 1883, 1883, 1882,
     1885, 1885, 1885, 1884,    0, 2795, 1883, 1886, 1886, 1886,
     1885,    0, 1880, 2780,    0, 1881, 2781, 1886, 1880, 1888,
     1888, 1888, 1883,    0, 1884,    0, 1885, 1882, 2815, 1888,
        0, 1884, 2795, 1886, 1887, 1887, 1887, 1883, 2570, 2570,
     2780, 1885,    0, 2781, 1887, 1888,    0,    0, 1886,    0,
     1883, 1884, 2781, 1882, 1885, 2815,    0, 1884, 2795,    0,
     1887, 1886, 2780, 2821, 1883, 1887, 2790, 2815, 1885, 1889,

     1889, 1889,    0, 1888, 2803, 1886, 1883, 2798,    0, 1889,
     1885, 1890, 1890, 1890, 1891, 1891, 1891, 1886, 1887, 2794,
     2821, 1890, 1887, 2790, 1891, 1889, 1892, 1892, 1892, 1888,
     2797, 2803, 2790, 2821, 2798, 1889, 1892, 1890, 2803,    0,
     1891,    0,    0, 1890, 1887,    0, 2794, 1891,    0, 1893,
     1893, 1893, 1892, 1889,    0, 2794, 2802, 2797, 1892, 1893,
     2798,    0, 1889, 2817,    0, 1890, 2797, 2017, 1891, 2017,
     1890, 1894, 1894, 1894, 1891, 1893,    0, 2017, 1893, 1889,
     1892, 1894,    0, 2802, 2839, 1892, 1895, 1895, 1895,    0,
     2817, 1890,    0, 2017, 1891, 2804, 1895, 1894, 1896, 1896,

     1896,    0, 2817, 1893,    0, 1893, 1892,    0, 1896, 2802,
        0, 2839, 1895, 1897, 1897, 1897, 1898, 1898, 1898, 1894,
        0, 2017, 2804, 1897, 1896, 1894, 1898, 2806, 1895, 1893,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1897,
     1895, 1896, 1898,    0, 2840, 2805, 1894, 2017, 2804, 2842,
     2809, 1894, 1896,    0, 2806, 1895, 1897, 1907, 1907, 1907,
     1907, 1907, 1907, 1907, 1907, 1907, 1895, 1897, 1896,    0,
     1898, 2840, 2805,    0,    0,    0, 2842, 2809, 1896, 2805,
     2806, 2811,    0, 1897, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1903, 1897, 2807, 2809, 1898, 2808, 1906, 1906,

     1906, 1906, 1906, 1906, 1906, 1906, 1906, 2843, 2811, 1903,
     1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908,    0,
        0, 2807,    0, 1903, 2808,    0, 2811,    0, 2807, 1906,
        0, 2808,    0,    0, 2843,    0, 1903, 1906, 1912, 1912,
     1912, 1912, 1912, 1912, 1912, 1912, 1912, 1913, 1913, 1913,
     1913, 1913, 1913, 1913, 1913, 1913, 1906, 1914, 1914, 1914,
     1914, 1914, 1914, 1914, 1914, 1914, 1916, 1916, 1916, 1916,
     1916, 1916, 1916, 1916, 1916,    0,    0, 1912, 1917, 1917,
     1917, 1917, 1917, 1917, 1917, 1917, 1917, 1918, 1918, 1918,
     1918, 1918, 1918, 1918, 1918, 1918, 1921, 1921, 1921, 1921,

     1921, 1921, 1921, 1921, 1921, 1916, 1922, 1922, 1922, 1922,
     1922, 1922, 1922, 1922, 1922, 1923, 1923, 1923, 1923, 1923,
     1923, 1923, 1923, 1923, 2018, 2019, 2018, 2019, 2020, 2810,
     2020, 1922,    0, 2812, 2018, 2019,    0,    0, 2020, 2021,
        0, 2021, 2022, 2813, 2022, 1922,    0, 2819, 2844, 2021,
     2018, 2019, 2022, 2814, 2020,    0, 2810, 2019, 1922, 2025,
     2812, 2025,    0, 2810, 2020, 2021,    0, 2812, 2022, 2025,
     2813,    0,    0, 2018, 2819, 2844,    0,    0, 2018, 2019,
     2814,    0, 2020, 2022, 2019, 2025, 2819, 2025, 2813, 2823,
        0, 2020, 2026, 2021, 2026,    0, 2022, 2027, 2814, 2027,

     2018, 2028, 2026, 2028, 2018, 2019,    0, 2027, 2020, 2825,
     2022, 2028,    0, 2025, 2025, 2029, 2823, 2029, 2026, 2021,
     2816, 2818, 2022, 2027, 2030, 2029, 2030, 2028, 2031, 2823,
     2031,    0,    0,    0, 2030, 2032, 2825, 2032, 2031, 2025,
        0, 2029, 2034, 2028, 2034, 2032, 2026, 2816, 2818, 2825,
     2030, 2027, 2034,    0, 2031, 2028,    0, 2033,    0, 2033,
     2030, 2032,    0,    0, 2820, 2816, 2818, 2033, 2034, 2029,
     2028, 2822, 2026,    0, 2035, 2031, 2035, 2027, 2030, 2824,
     2032, 2028, 2031, 2033, 2035, 2033, 2826, 2030,    0, 2032,
     2034, 2820,    0, 2828,    0, 2029, 2034,    0, 2822, 2036,

     2035, 2036, 2031, 2820, 2030,    0, 2824, 2032, 2031, 2036,
     2822, 2033, 2033, 2826, 2037, 2032, 2037, 2034, 2824,    0,
     2828, 2038, 2034, 2038, 2037, 2036, 2826,    0, 2035, 2036,
        0, 2038, 2039, 2828, 2039,    0, 2040, 2033, 2040,    0,
     2037,    0, 2039,    0,    0,    0, 2040, 2038,    0,    0,
        0,    0,    0, 2036, 2035, 2830, 2036, 2041, 2039, 2041,
     2037,    0, 2040, 2042, 2039, 2042,    0, 2041, 2037,    0,
     2043,    0, 2043, 2042, 2044, 2038, 2044,    0,    0, 2036,
     2043,    0, 2830, 2041, 2044,    0, 2039, 2037,    0, 2042,
     2040, 2039,    0,    0, 2037, 2830, 2043,    0,    0, 2042,

     2044, 2038,    0, 2041,    0, 2045,    0, 2045, 2046,    0,
     2046, 2041, 2039, 2046,    0, 2045, 2040, 2042, 2046,    0,
        0, 2044, 2043,    0, 2043, 2047, 2042, 2047, 2044,    0,
     2041, 2045,    0,    0, 2046, 2047,    0, 2041,    0,    0,
        0,    0, 2048, 2042, 2048, 2049,    0, 2049, 2044, 2043,
     2043, 2047, 2048,    0, 2044, 2049, 2050,    0, 2050, 2045,
        0,    0, 2046, 2051,    0, 2051, 2050, 2052, 2048, 2052,
        0, 2049,    0, 2051,    0,    0, 2053, 2052, 2053, 2047,
        0,    0, 2050,    0,    0, 2045, 2053, 2050, 2046, 2051,
     2054,    0, 2054, 2052,    0,    0, 2048,    0,    0, 2049,

     2054, 2055, 2053, 2055,    0, 2047, 2052, 2053,    0,    0,
     2050, 2055,    0, 2056, 2050, 2056, 2054, 2051,    0,    0,
        0, 2052, 2048, 2056,    0, 2049,    0, 2055,    0,    0,
     2053,    0,    0, 2052, 2053, 2057, 2050, 2057, 2058, 2056,
     2058,    0,    0, 2051, 2054, 2057,    0, 2052, 2058, 2059,
     2060, 2059, 2060,    0,    0, 2055, 2053,    0,    0, 2059,
     2060, 2057,    0,    0, 2058,    0,    0, 2056,    0,    0,
     2054,    0,    0,    0,    0, 2059, 2060,    0,    0,    0,
        0, 2055, 2057,    0, 2061, 2062, 2061, 2062, 2064, 2057,
     2064,    0, 2058, 2056, 2061, 2062, 2059, 2060, 2064,    0,

        0,    0,    0, 2059, 2060,    0,    0,    0,    0, 2057,
     2061, 2062,    0,    0, 2064, 2057, 2062,    0, 2058,    0,
        0,    0,    0, 2059, 2060, 2063, 2065, 2063, 2065, 2059,
     2060, 2066,    0, 2066, 2064, 2063, 2065,    0, 2061, 2062,
        0, 2066, 2064, 2062, 2067,    0, 2067,    0, 2068,    0,
     2068, 2063, 2065,    0, 2067,    0,    0, 2066, 2068,    0,
        0, 2064, 2065,    0, 2061, 2062,    0, 2063, 2064,    0,
     2067, 2069, 2067, 2069, 2068,    0, 2066,    0,    0, 2063,
     2065, 2069, 2070,    0, 2070, 2066, 2071,    0, 2071, 2065,
        0,    0, 2070,    0, 2063, 2068, 2071, 2069, 2067, 2067,

        0,    0, 2068, 2066,    0, 2063, 2065,    0, 2070,    0,
        0, 2066, 2071, 2072, 2072, 2072, 2073, 2073, 2073, 2069,
        0,    0, 2068, 2072, 2067, 2069, 2073,    0, 2068,    0,
     2070,    0,    0,    0,    0,    0, 2070,    0,    0, 2072,
     2071,    0, 2073, 2074, 2074, 2074, 2069,    0,    0,    0,
        0, 2069,    0, 2074, 2075, 2075, 2075, 2070, 2076, 2076,
     2076,    0, 2070,    0, 2075, 2073, 2071, 2072, 2076, 2074,
     2073,    0, 2077, 2077, 2077, 2074,    0, 2080, 2080, 2080,
     2075,    0, 2077,    0, 2076,    0,    0, 2080,    0,    0,
     2075,    0, 2073, 2072,    0,    0, 2073, 2074, 2077, 2081,

     2081, 2081, 2074, 2080,    0, 2080,    0,    0, 2075, 2081,
        0,    0, 2076, 2077,    0,    0,    0, 2075, 2082, 2082,
     2082,    0,    0, 2074,    0, 2081, 2077,    0, 2082,    0,
        0, 2080, 2080,    0, 2075, 2083, 2083, 2083, 2076,    0,
     2077, 2084, 2084, 2084, 2082, 2083,    0,    0, 2085, 2085,
     2085, 2084, 2077, 2081,    0,    0,    0, 2080, 2085,    0,
        0, 2083,    0,    0,    0,    0,    0, 2084, 2087, 2087,
     2087,    0, 2082,    0, 2085,    0,    0, 2083, 2087, 2081,
     2086, 2086, 2086,    0, 2085,    0,    0,    0,    0, 2083,
     2086, 2088, 2088, 2088, 2087, 2084,    0,    0, 2082,    0,

        0, 2088, 2085,    0, 2083,    0, 2086,    0,    0,    0,
        0, 2085,    0, 2087,    0, 2083,    0, 2088,    0, 2088,
        0, 2084, 2087,    0,    0,    0,    0, 2086, 2085, 2089,
     2089, 2089,    0,    0, 2086,    0,    0,    0,    0, 2089,
     2087, 2090, 2090, 2090,    0, 2088, 2088,    0, 2087,    0,
        0, 2090,    0,    0, 2086, 2089, 2091, 2091, 2091,    0,
     2086,    0, 2092, 2092, 2092,    0, 2091, 2090, 2093, 2093,
     2093, 2088, 2092,    0, 2094, 2094, 2094, 2089, 2093,    0,
        0,    0, 2091, 2089, 2094,    0, 2091,    0, 2092, 2095,
     2095, 2095,    0,    0, 2093, 2090,    0,    0,    0, 2095,

     2094, 2096, 2096, 2096, 2089,    0, 2094,    0, 2092, 2089,
     2091, 2096,    0, 2091,    0, 2095, 2092,    0,    0,    0,
        0, 2090, 2093,    0, 2097, 2097, 2097, 2096, 2094,    0,
     2098, 2098, 2098, 2094, 2097, 2092, 2091,    0,    0,    0,
     2098,    0, 2092, 2095,    0,    0,    0, 2096, 2093,    0,
     2097, 2099, 2099, 2099, 2094, 2096, 2098, 2100, 2100, 2100,
     2097, 2099,    0, 2101, 2101, 2101,    0, 2100, 2101, 2095,
     2102, 2102, 2102, 2101, 2096,    0,    0, 2099, 2097,    0,
     2102, 2096, 2098, 2100, 2098,    0,    0, 2097,    0, 2101,
     2103, 2103, 2103, 2104, 2104, 2104, 2102,    0, 2099,    0,

     2103,    0,    0, 2104, 2097, 2099,    0,    0,    0, 2098,
     2098, 2100,    0, 2106, 2106, 2106, 2103, 2101,    0, 2104,
     2105, 2105, 2105, 2106, 2102, 2099, 2107, 2107, 2107,    0,
     2105, 2099, 2108, 2108, 2108,    0, 2107, 2100,    0, 2106,
        0,    0, 2108, 2101, 2103,    0, 2105, 2104,    0,    0,
     2102, 2105, 2107,    0,    0,    0,    0,    0, 2108, 2109,
     2109, 2109,    0, 2108,    0, 2107,    0, 2106,    0, 2109,
     2103,    0,    0, 2104, 2105,    0,    0,    0, 2105,    0,
     2107, 2110, 2110, 2110,    0, 2109, 2108,    0,    0,    0,
     2108, 2110, 2107, 2106, 2111, 2111, 2111,    0,    0,    0,

     2105,    0,    0,    0, 2111,    0, 2107, 2110, 2112, 2112,
     2112,    0, 2108, 2109, 2113, 2113, 2113,    0, 2112,    0,
     2111,    0,    0,    0, 2113,    0, 2114, 2114, 2114,    0,
        0, 2115, 2115, 2115, 2112, 2110, 2114,    0,    0, 2109,
     2113, 2115,    0, 2116, 2116, 2116,    0,    0, 2111,    0,
        0,    0, 2114, 2116,    0, 2112,    0, 2115,    0,    0,
        0, 2110, 2112,    0,    0,    0,    0,    0, 2113, 2116,
        0,    0,    0, 2114, 2111,    0,    0,    0, 2115,    0,
     2114,    0, 2112,    0,    0, 2115,    0,    0, 2112, 2117,
     2117, 2117,    0,    0, 2113,    0,    0, 2116,    0, 2117,

     2114,    0, 2118, 2118, 2118, 2115, 2114, 2119, 2119, 2119,
        0, 2115, 2118,    0, 2227, 2117, 2227, 2119,    0,    0,
     2117,    0,    0, 2116, 2227, 2121, 2121, 2121, 2118, 2120,
     2120, 2120,    0, 2119,    0, 2121, 2122, 2122, 2122, 2120,
     2227,    0,    0, 2117, 2118,    0, 2122, 2117, 2123, 2123,
     2123, 2121,    0, 2119,    0, 2120, 2118,    0, 2123, 2227,
        0, 2119, 2122,    0, 2122, 2120,    0,    0, 2227, 2117,
     2121, 2118,    0,    0, 2123, 2124, 2124, 2124,    0, 2121,
     2119,    0, 2118, 2120,    0, 2124, 2227, 2119,    0,    0,
     2122, 2122, 2120,    0, 2227, 2123,    0, 2121, 2125, 2125,

     2125, 2124, 2123,    0,    0, 2121,    0,    0, 2125, 2120,
     2126, 2126, 2126,    0,    0,    0, 2122,    0,    0,    0,
     2126,    0, 2123, 2124, 2125,    0,    0,    0, 2123, 2124,
        0,    0,    0,    0,    0,    0, 2126, 2133, 2133, 2133,
     2133, 2133, 2133, 2133, 2133, 2133, 2125,    0,    0, 2493,
     2124, 2493, 2125,    0,    0, 2124,    0,    0,    0, 2493,
        0, 2493,    0,    0, 2126,    0,    0,    0,    0,    0,
        0,    0,    0, 2125,    0, 2493,    0,    0, 2125, 2134,
     2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,    0,    0,
     2126, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136, 2136,

     2212, 2213, 2212, 2213, 2134,    0,    0,    0,    0,    0,
     2212, 2213, 2215, 2214, 2215, 2214,    0,    0, 2134,    0,
        0,    0, 2215, 2214,    0,    0, 2212, 2213,    0, 2493,
     2493, 2134, 2212,    0,    0, 2220,    0, 2220, 2215, 2214,
        0,    0, 2213,    0,    0, 2220, 2215,    0, 2221,    0,
     2221,    0,    0,    0, 2212, 2213,    0,    0, 2221, 2212,
     2214, 2220, 2222,    0, 2222,    0, 2215, 2214,    0, 2213,
        0,    0, 2222, 2215, 2221,    0,    0,    0,    0,    0,
     2212, 2213, 2220,    0, 2223,    0, 2223, 2214, 2222, 2220,
        0,    0, 2215, 2214, 2223, 2221,    0, 2224, 2225, 2224,

     2225,    0, 2221, 2222,    0,    0,    0, 2224, 2225, 2220,
     2223, 2226,    0, 2226,    0, 2220, 2222, 2230, 2223, 2230,
        0, 2226, 2221, 2224, 2225,    0, 2225, 2230, 2221, 2228,
     2222, 2228,    0, 2224,    0,    0,    0, 2226, 2223, 2228,
        0,    0, 2222, 2230, 2229, 2223, 2229, 2232,    0, 2232,
        0, 2224, 2225, 2225, 2229, 2228,    0, 2232, 2226,    0,
     2224,    0,    0,    0, 2223, 2226,    0,    0,    0,    0,
     2229, 2230,    0, 2232,    0,    0, 2228, 2224, 2225, 2231,
     2229, 2231,    0, 2228,    0, 2226, 2234,    0, 2234, 2231,
     2233, 2226, 2233,    0, 2232,    0, 2234, 2230, 2229,    0,

     2233, 2232,    0, 2228,    0, 2231,    0, 2229, 2231, 2228,
        0,    0, 2234, 2235,    0, 2235, 2233,    0,    0,    0,
     2236, 2232, 2236, 2235, 2229,    0, 2237, 2232, 2237,    0,
     2236, 2233,    0, 2231,    0, 2231, 2237,    0,    0, 2235,
     2234,    0,    0,    0, 2233, 2235, 2236, 2238, 2236, 2238,
        0, 2239, 2237, 2239,    0,    0,    0, 2238, 2233, 2231,
        0, 2239,    0,    0,    0,    0, 2234, 2235,    0, 2240,
     2233, 2240, 2235, 2238, 2236, 2236, 2241, 2239, 2241, 2240,
     2237, 2242, 2243, 2242, 2243,    0, 2241, 2244,    0, 2244,
        0, 2242, 2243, 2235,    0, 2240,    0, 2244,    0,    0,

     2236, 2238, 2241,    0,    0, 2239, 2237, 2242, 2243,    0,
        0, 2240,    0, 2244, 2245, 2244, 2245,    0, 2246, 2247,
     2246, 2247,    0, 2240, 2245,    0,    0, 2238, 2246, 2247,
     2241, 2239,    0,    0,    0, 2242, 2243,    0, 2240,    0,
     2245, 2244, 2244,    0, 2246, 2247,    0,    0, 2248, 2240,
     2248,    0,    0, 2247,    0, 2245, 2241,    0, 2248,    0,
        0, 2242, 2243,    0, 2246,    0,    0, 2244, 2245, 2249,
        0, 2249, 2246, 2247, 2248, 2250,    0, 2250,    0, 2249,
     2247,    0, 2245,    0,    0, 2250, 2251,    0, 2251, 2248,
        0, 2246,    0,    0, 2245, 2249, 2251,    0, 2246, 2247,

        0, 2250, 2248,    0, 2252,    0, 2252,    0, 2249,    0,
        0,    0, 2251,    0, 2252,    0, 2248, 2265, 2265, 2265,
        0,    0, 2574, 2249, 2574,    0,    0, 2265, 2248, 2250,
     2252,    0, 2574, 2251,    0, 2249, 2253, 2253, 2253,    0,
     2251,    0,    0, 2265,    0,    0, 2253,    0, 2574, 2249,
        0, 2252,    0, 2265,    0, 2250,    0,    0, 2252,    0,
     2251,    0, 2253, 2254, 2254, 2254, 2251,    0, 2253,    0,
        0, 2265,    0, 2254,    0, 2255, 2255, 2255, 2252,    0,
     2265, 2256, 2256, 2256, 2252, 2255, 2261, 2261, 2261, 2254,
     2253, 2256,    0,    0,    0, 2253, 2261, 2265, 2262, 2262,

     2262, 2255, 2574, 2574, 2254,    0,    0, 2256, 2262,    0,
        0,    0, 2261,    0,    0, 2256, 2253, 2254, 2511, 2511,
     2511,    0, 2255,    0, 2262,    0,    0,    0, 2511, 2255,
     2511, 2254,    0, 2261,    0, 2256, 2263, 2263, 2263,    0,
     2261,    0, 2256, 2254, 2511, 2262, 2263,    0,    0, 2255,
        0,    0, 2262,    0,    0, 2255,    0, 2264, 2264, 2264,
     2261, 2256, 2263, 2268, 2268, 2268, 2261, 2264,    0, 2266,
     2266, 2266, 2262, 2268, 2267, 2267, 2267, 2263, 2262, 2266,
        0,    0,    0, 2264, 2267,    0, 2269, 2269, 2269, 2268,
     2263, 2264,    0,    0,    0, 2266, 2269, 2266, 2511,    0,

     2267,    0,    0,    0, 2263, 2270, 2270, 2270, 2268,    0,
        0, 2264, 2269,    0,    0, 2270, 2263, 2268, 2264,    0,
        0, 2267,    0, 2266, 2266,    0,    0,    0, 2267,    0,
        0, 2270,    0, 2269,    0, 2268,    0, 2264,    0,    0,
     2269, 2270,    0, 2268,    0, 2271, 2271, 2271, 2267, 2266,
        0, 2272, 2272, 2272, 2267, 2271,    0,    0,    0, 2270,
     2269, 2272, 2273, 2273, 2273,    0, 2269,    0, 2270,    0,
        0, 2271, 2273,    0, 2275, 2275, 2275, 2272,    0,    0,
     2272,    0,    0,    0, 2275, 2270,    0,    0, 2273,    0,
        0, 2274, 2274, 2274, 2276, 2276, 2276,    0,    0, 2271,

     2275, 2274,    0,    0, 2276, 2272,    0, 2272,    0, 2273,
        0, 2277, 2277, 2277,    0,    0, 2273, 2274,    0,    0,
     2276, 2277,    0,    0,    0, 2271, 2276,    0, 2275,    0,
        0, 2272, 2274,    0,    0,    0, 2273, 2277,    0, 2277,
        0,    0, 2273,    0,    0, 2274,    0,    0, 2276,    0,
     2278, 2278, 2278, 2276, 2275,    0,    0,    0,    0, 2274,
     2278,    0, 2279, 2279, 2279, 2277, 2277, 2280, 2280, 2280,
        0, 2274, 2279,    0, 2276,    0, 2278, 2280,    0,    0,
     2281, 2281, 2281,    0, 2282, 2282, 2282,    0, 2279,    0,
     2281, 2277,    0, 2280, 2282,    0,    0, 2283, 2283, 2283,

        0, 2284, 2284, 2284, 2278,    0, 2281, 2283,    0,    0,
     2282, 2284,    0,    0,    0,    0, 2279,    0, 2285, 2285,
     2285, 2280, 2281, 2283,    0,    0,    0, 2284, 2285,    0,
     2278,    0,    0,    0, 2281, 2286, 2286, 2286, 2282,    0,
        0,    0, 2279,    0, 2285, 2286, 2285, 2280,    0, 2281,
        0, 2283, 2288, 2288, 2288, 2284, 2287, 2287, 2287,    0,
     2281, 2286, 2288,    0, 2282,    0, 2287,    0,    0, 2290,
     2290, 2290, 2285, 2285,    0,    0, 2286, 2283, 2288, 2290,
        0, 2284, 2287, 2289, 2289, 2289, 2288,    0,    0, 2286,
     2291, 2291, 2291, 2289,    0, 2290,    0,    0, 2285,    0,

     2291,    0, 2287, 2286,    0,    0, 2288,    0, 2290, 2289,
     2287,    0,    0, 2288,    0, 2286, 2291, 2292, 2292, 2292,
     2293, 2293, 2293, 2290, 2289,    0,    0, 2292,    0, 2287,
     2293,    0, 2288,    0,    0, 2290, 2287, 2289,    0,    0,
        0,    0,    0, 2292, 2291,    0, 2293,    0,    0, 2290,
        0, 2289,    0, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298,    0, 2289, 2292,    0,    0, 2293,    0,    0,
     2291, 2292,    0,    0, 2293, 2299, 2299, 2299, 2299, 2299,
     2299, 2299, 2299, 2299,    0,    0,    0,    0,    0,    0,
        0, 2292, 2298,    0, 2293,    0,    0, 2292,    0,    0,

     2293, 2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2304,
     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2305, 2305,
     2305, 2305, 2305, 2305, 2305, 2305, 2305, 2371, 2372, 2371,
     2372,    0,    0,    0, 2304,    0,    0, 2371, 2372, 2373,
     2374, 2373, 2374,    0,    0,    0,    0,    0, 2304, 2373,
     2374,    0,    0, 2371, 2372,    0,    0, 2382, 2371, 2382,
        0, 2304, 2380,    0, 2380, 2373, 2374, 2382,    0, 2381,
        0, 2381, 2380,    0,    0, 2372,    0,    0,    0, 2381,
        0, 2371, 2372, 2382,    0, 2371,    0, 2373, 2380, 2384,

        0, 2384,    0, 2373, 2374, 2381,    0,    0, 2380, 2384,
        0,    0, 2372,    0,    0, 2381,    0, 2371, 2372,    0,
        0, 2382,    0,    0, 2373, 2384, 2380,    0,    0, 2373,
     2374,    0,    0, 2381, 2383, 2380, 2383,    0, 2385,    0,
     2385, 2384, 2381,    0, 2383,    0,    0, 2382, 2385,    0,
        0,    0, 2380, 2384,    0,    0,    0,    0,    0, 2381,
     2383, 2386,    0, 2386, 2385, 2387,    0, 2387, 2384,    0,
     2388, 2386, 2388,    0, 2389, 2387, 2389,    0, 2385, 2384,
     2388,    0, 2383,    0, 2389,    0,    0, 2386, 2383,    0,
        0, 2387, 2385,    0,    0, 2387, 2388, 2390,    0, 2390,

     2389, 2391,    0, 2391,    0, 2385,    0, 2390,    0, 2383,
        0, 2391,    0,    0, 2383, 2386,    0,    0, 2385, 2387,
        0, 2389, 2387, 2390, 2388,    0,    0, 2391, 2389,    0,
     2392,    0, 2392, 2391,    0,    0, 2390,    0,    0,    0,
     2392, 2386, 2393,    0, 2393, 2387,    0, 2394, 2389, 2394,
     2388, 2390, 2393,    0, 2389, 2391, 2392, 2394,    0, 2395,
     2391, 2395,    0, 2390, 2396,    0, 2396,    0, 2393, 2395,
        0,    0,    0, 2394, 2396,    0, 2397, 2390, 2397,    0,
        0, 2391,    0,    0, 2392, 2395, 2397,    0, 2394,    0,
     2396,    0, 2395,    0,    0, 2398, 2393, 2398, 2399,    0,

     2399, 2394, 2397,    0,    0, 2398,    0, 2400, 2399, 2400,
     2392,    0,    0, 2395,    0, 2394, 2396, 2400, 2396, 2395,
        0, 2398, 2393,    0, 2399,    0,    0, 2394,    0,    0,
     2397,    0, 2401, 2400, 2401, 2400,    0,    0, 2402, 2395,
     2402,    0, 2401, 2396, 2396, 2403,    0, 2403, 2402, 2398,
        0,    0, 2399,    0,    0, 2403, 2397,    0, 2401,    0,
        0, 2400, 2400,    0, 2402,    0,    0, 2405, 2405, 2405,
        0, 2403, 2404, 2404, 2404, 2398,    0, 2405, 2399, 2406,
     2406, 2406, 2404,    0,    0,    0, 2401, 2400,    0, 2406,
        0,    0, 2402, 2405, 2407, 2407, 2407,    0, 2404, 2403,

        0,    0,    0, 2404, 2407, 2406, 2413, 2413, 2413, 2414,
     2414, 2414, 2401, 2485, 2405, 2485, 2413,    0, 2402, 2414,
     2407, 2405,    0, 2485,    0, 2403, 2404, 2406,    0,    0,
     2404,    0, 2413, 2406,    0, 2414, 2415, 2415, 2415, 2485,
        0, 2405, 2413,    0,    0, 2414, 2415, 2405, 2407,    0,
        0,    0, 2404,    0, 2406, 2416, 2416, 2416,    0, 2406,
     2413,    0, 2415, 2414,    0, 2416,    0, 2485,    0, 2413,
        0,    0, 2414,    0, 2407, 2417, 2417, 2417, 2418, 2418,
     2418, 2416, 2419, 2419, 2419, 2417, 2413,    0, 2418, 2414,
     2415,    0, 2419, 2485,    0, 2420, 2420, 2420,    0,    0,

        0, 2417,    0, 2416, 2418, 2420,    0,    0, 2419, 2416,
        0,    0, 2421, 2421, 2421,    0, 2415, 2417, 2418,    0,
        0, 2420, 2421,    0,    0, 2420,    0,    0,    0, 2417,
     2416,    0, 2418,    0,    0, 2416, 2419,    0, 2421,    0,
        0, 2422, 2422, 2422, 2417, 2418, 2423, 2423, 2423, 2420,
        0, 2422, 2420,    0,    0, 2417, 2423,    0, 2418,    0,
        0,    0, 2419, 2425, 2425, 2425, 2421, 2422,    0,    0,
        0,    0, 2423, 2425,    0, 2420, 2424, 2424, 2424,    0,
     2426, 2426, 2426,    0,    0, 2423, 2424,    0, 2422, 2425,
     2426,    0, 2421,    0,    0, 2422,    0, 2427, 2427, 2427,

     2423,    0, 2424, 2428, 2428, 2428, 2426, 2427, 2424,    0,
        0,    0, 2423, 2428,    0, 2422,    0, 2425, 2429, 2429,
     2429, 2422,    0, 2427,    0,    0, 2423,    0, 2429, 2428,
     2424,    0,    0,    0, 2426, 2424, 2428,    0, 2427,    0,
     2430, 2430, 2430, 2425, 2429, 2431, 2431, 2431,    0,    0,
     2430, 2427, 2432, 2432, 2432, 2431, 2424, 2428,    0,    0,
     2426,    0, 2432, 2428,    0, 2427, 2430,    0,    0,    0,
     2429, 2431, 2429,    0, 2433, 2433, 2433, 2427, 2432, 2434,
     2434, 2434,    0, 2428, 2433, 2435, 2435, 2435,    0, 2434,
        0, 2436, 2436, 2436, 2430, 2435,    0, 2429, 2429, 2431,

     2433, 2436, 2433,    0,    0, 2434, 2432,    0,    0,    0,
        0, 2435, 2486,    0, 2486,    0,    0, 2436,    0,    0,
     2430,    0, 2486,    0,    0, 2431,    0,    0, 2433, 2433,
        0,    0, 2432, 2434,    0,    0,    0,    0, 2486, 2435,
     2486,    0,    0,    0,    0, 2436,    0,    0,    0,    0,
        0,    0,    0,    0, 2433,    0,    0,    0,    0, 2434,
        0,    0,    0,    0,    0, 2435, 2486, 2486,    0,    0,
        0, 2436, 2441, 2441, 2441, 2441, 2441, 2441, 2441, 2441,
     2441, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443, 2443,
        0, 2487, 2486, 2487, 2494,    0, 2494, 2441,    0,    0,

     2495, 2487, 2495,    0, 2494, 2496, 2498, 2496, 2498,    0,
     2495, 2441,    0,    0,    0, 2496, 2498, 2487,    0,    0,
     2494,    0, 2487,    0, 2441, 2497, 2495, 2497,    0,    0,
        0, 2496, 2498,    0,    0, 2497, 2494,    0,    0,    0,
     2495,    0, 2501,    0, 2501, 2487,    0,    0, 2494, 2487,
     2496, 2497, 2501,    0, 2495, 2499,    0, 2499,    0, 2496,
     2498,    0, 2500, 2494, 2500, 2499, 2497, 2495, 2501,    0,
        0, 2487, 2500,    0, 2494,    0,    0, 2496,    0, 2497,
     2495, 2499,    0,    0, 2501, 2496, 2498, 2499, 2500, 2502,
        0, 2502, 2503, 2497, 2503,    0, 2501,    0, 2500, 2502,

        0,    0, 2503,    0,    0, 2497,    0,    0,    0, 2499,
     2504, 2501, 2504,    0, 2499, 2502, 2500,    0, 2503, 2505,
     2504, 2505, 2501, 2503,    0, 2500,    0,    0, 2506, 2505,
     2506,    0, 2502,    0,    0, 2499, 2504,    0, 2506, 2507,
     2507, 2507, 2500, 2502,    0, 2505, 2503,    0,    0, 2507,
     2503, 2508, 2508, 2508, 2506,    0,    0,    0,    0, 2502,
        0, 2508,    0,    0, 2504, 2507,    0, 2506,    0, 2502,
        0,    0, 2503, 2505, 2512, 2512, 2512, 2508,    0, 2508,
        0,    0, 2506,    0, 2512, 2509, 2509, 2509,    0,    0,
     2504,    0,    0, 2507, 2506, 2509,    0,    0,    0, 2505,

     2512,    0, 2515, 2515, 2515, 2508, 2508,    0, 2506,    0,
        0, 2509, 2515,    0, 2515,    0, 2509,    0,    0, 2507,
     2516, 2516, 2516, 2517, 2517, 2517,    0,    0, 2515,    0,
     2516, 2508,    0, 2517, 2518, 2518, 2518,    0,    0, 2509,
     2519, 2519, 2519, 2509, 2518,    0, 2516,    0,    0, 2517,
     2519,    0,    0,    0, 2512, 2512,    0,    0,    0,    0,
     2518,    0, 2516, 2517,    0, 2509, 2519,    0,    0,    0,
     2520, 2520, 2520,    0, 2516,    0,    0, 2517,    0, 2518,
     2520, 2519, 2515, 2515,    0, 2521, 2521, 2521, 2518, 2516,
     2517,    0,    0,    0, 2519, 2521, 2520, 2522, 2522, 2522,

     2516,    0,    0, 2517,    0,    0, 2518, 2522, 2519,    0,
        0, 2521,    0,    0, 2518,    0,    0, 2521,    0,    0,
     2519,    0,    0, 2522, 2520,    0, 2523, 2523, 2523,    0,
     2524, 2524, 2524, 2522,    0,    0, 2523,    0,    0, 2521,
     2524,    0,    0,    0, 2521, 2525, 2525, 2525,    0,    0,
     2520, 2522, 2523,    0,    0, 2525, 2524, 2526, 2526, 2526,
     2522,    0, 2527, 2527, 2527, 2521,    0, 2526, 2523,    0,
        0, 2525, 2527, 2524,    0,    0, 2525, 2522,    0,    0,
     2523,    0,    0, 2526, 2524,    0,    0,    0, 2527,    0,
        0, 2528, 2528, 2528,    0, 2523,    0,    0,    0, 2525,

     2524, 2528, 2575, 2525, 2575,    0, 2523,    0,    0,    0,
     2524, 2526, 2575,    0, 2575,    0, 2527, 2528,    0,    0,
        0,    0,    0,    0,    0, 2525,    0,    0, 2575,    0,
     2528,    0,    0,    0,    0,    0,    0, 2526,    0,    0,
        0,    0, 2527,    0,    0, 2528,    0, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531,    0, 2528, 2532, 2532,
     2532, 2532, 2532, 2532, 2532, 2532, 2532, 2568, 2569, 2568,
     2569, 2528, 2531,    0,    0,    0,    0, 2568, 2569,    0,
        0,    0, 2575, 2575,    0,    0, 2531, 2579,    0, 2579,
        0,    0,    0, 2568, 2569,    0,    0, 2579,    0, 2531,

     2569,    0,    0,    0, 2580, 2581, 2580, 2581, 2582,    0,
     2582,    0, 2568, 2579, 2580, 2581,    0,    0, 2582,    0,
        0, 2568, 2569,    0,    0,    0,    0, 2569, 2579,    0,
     2580, 2581,    0, 2581, 2582, 2583, 2580, 2583,    0, 2568,
     2584, 2579, 2584,    0, 2585, 2583, 2585, 2568, 2569,    0,
     2584,    0,    0,    0, 2585, 2579,    0,    0, 2580, 2581,
     2581, 2583, 2582, 2580,    0,    0, 2584, 2579,    0, 2586,
     2585, 2586,    0, 2587, 2585, 2587, 2588,    0, 2588, 2586,
        0,    0, 2584, 2587, 2580, 2581, 2588,    0, 2582, 2583,
     2589,    0, 2589,    0, 2584, 2586,    0,    0, 2585, 2587,

     2589, 2585, 2588, 2590, 2590, 2590,    0, 2588,    0, 2584,
        0,    0, 2644, 2590, 2644, 2583, 2589,    0,    0,    0,
     2584,    0, 2644, 2586, 2585,    0,    0, 2587,    0, 2590,
     2588,    0,    0,    0, 2588, 2591, 2591, 2591, 2644,    0,
     2592, 2592, 2592,    0, 2589, 2591,    0,    0, 2590, 2586,
     2592,    0,    0, 2587,    0,    0, 2588, 2590, 2596, 2596,
     2596, 2591, 2597, 2597, 2597,    0, 2592, 2591, 2596, 2641,
     2589, 2641, 2597,    0, 2597, 2590, 2601, 2601, 2601, 2641,
        0,    0,    0, 2590, 2596,    0, 2601,    0, 2597, 2591,
        0,    0, 2644, 2644, 2591, 2641, 2602, 2602, 2602, 2603,

     2603, 2603, 2601, 2604, 2604, 2604, 2602,    0,    0, 2603,
        0,    0,    0, 2604,    0, 2591,    0, 2601,    0,    0,
     2592, 2592, 2602, 2641,    0, 2603,    0, 2603, 2602, 2604,
     2601,    0,    0,    0,    0, 2605, 2605, 2605, 2596, 2596,
        0,    0, 2597, 2597, 2601, 2605,    0,    0,    0, 2641,
     2602,    0,    0, 2603, 2603, 2602, 2601, 2604, 2606, 2606,
     2606, 2605, 2607, 2607, 2607,    0,    0,    0, 2606,    0,
        0,    0, 2607,    0,    0,    0, 2602,    0,    0, 2603,
     2608, 2608, 2608, 2604, 2606, 2609, 2609, 2609, 2607, 2605,
     2608, 2640, 2607, 2640,    0, 2609,    0, 2610, 2610, 2610,

     2606, 2640,    0, 2611, 2611, 2611, 2608, 2610,    0,    0,
        0, 2609, 2606, 2611,    0, 2605, 2607, 2640,    0, 2607,
     2651,    0, 2651, 2610,    0,    0,    0, 2606, 2610, 2611,
     2651,    0,    0,    0, 2608,    0,    0,    0, 2606, 2609,
        0,    0, 2607, 2640,    0, 2640, 2651,    0,    0,    0,
        0, 2610, 2652,    0, 2652, 2610, 2653, 2611, 2653, 2654,
     2608, 2654, 2652,    0,    0, 2609, 2653,    0,    0, 2654,
     2640, 2640,    0,    0, 2651,    0,    0, 2610, 2652, 2655,
        0, 2655, 2653, 2611,    0, 2654,    0,    0, 2654, 2655,
        0, 2656, 2700, 2656, 2700,    0,    0, 2658,    0, 2658,

     2651, 2656, 2700, 2653,    0, 2655, 2652, 2658,    0,    0,
     2653,    0,    0, 2654, 2657, 2654, 2657, 2656, 2700,    0,
     2655,    0,    0, 2658, 2657, 2658,    0,    0,    0, 2656,
     2653,    0, 2652, 2655,    0,    0, 2653,    0,    0, 2654,
     2657,    0,    0,    0,    0, 2656, 2700, 2655, 2659, 2659,
     2659, 2658, 2658, 2660, 2660, 2660, 2656,    0, 2659, 2655,
        0, 2657,    0, 2660,    0, 2663, 2663, 2663, 2657,    0,
        0, 2656, 2700,    0, 2659, 2663,    0, 2658,    0, 2660,
     2670, 2670, 2670, 2671, 2671, 2671,    0,    0, 2657,    0,
     2670, 2663,    0, 2671, 2657, 2672, 2672, 2672,    0,    0,

     2659,    0, 2659,    0,    0, 2672, 2670, 2660,    0, 2671,
     2673, 2673, 2673,    0, 2674, 2674, 2674,    0,    0,    0,
     2673, 2672,    0,    0, 2674,    0,    0, 2659, 2659,    0,
        0,    0,    0, 2660, 2670,    0, 2673, 2671,    0, 2673,
     2674,    0, 2672,    0,    0, 2663, 2663,    0,    0, 2672,
        0, 2675, 2675, 2675,    0, 2674,    0, 2677, 2677, 2677,
     2670, 2675,    0, 2671, 2673,    0, 2673, 2677, 2674, 2672,
     2676, 2676, 2676,    0, 2704, 2672, 2704, 2675,    0,    0,
     2676,    0, 2674, 2677, 2704, 2677, 2704,    0,    0, 2675,
     2673,    0,    0, 2706, 2674, 2706, 2676, 2707,    0, 2707,

     2704,    0,    0, 2706, 2708, 2675, 2708, 2707, 2709,    0,
     2709, 2677, 2677,    0, 2708,    0, 2675, 2676, 2709, 2706,
        0,    0,    0, 2707, 2676,    0,    0,    0,    0, 2706,
     2708, 2675,    0, 2710, 2709, 2710, 2707, 2677, 2711,    0,
     2711,    0,    0, 2710, 2676,    0,    0, 2706, 2711,    0,
     2676, 2707,    0,    0, 2704, 2704, 2706,    0, 2708, 2710,
        0,    0, 2709, 2707, 2711, 2712, 2712, 2712,    0, 2710,
        0,    0,    0, 2706,    0, 2712,    0, 2707,    0, 2718,
     2718, 2718,    0,    0, 2708,    0,    0, 2710, 2709, 2718,
     2711, 2712, 2711,    0,    0,    0, 2710, 2716, 2716, 2716,

     2719, 2719, 2719,    0,    0, 2718,    0, 2716,    0, 2716,
     2719,    0,    0, 2710, 2740, 2718, 2740, 2711, 2711, 2712,
     2720, 2720, 2720, 2716, 2740,    0, 2719, 2721, 2721, 2721,
     2720,    0,    0, 2718, 2722, 2722, 2722, 2721,    0, 2719,
     2740,    0, 2718,    0, 2722, 2712, 2720, 2723, 2723, 2723,
        0,    0,    0, 2721, 2719,    0, 2740, 2723,    0, 2718,
     2722, 2741,    0, 2741,    0, 2742, 2719, 2742, 2740,    0,
     2722, 2741,    0, 2723, 2720, 2742,    0, 2716, 2716,    0,
     2719, 2721, 2743, 2740, 2743,    0,    0, 2741, 2722,    0,
        0, 2742, 2743,    0, 2740,    0,    0, 2722,    0, 2723,

     2720, 2723,    0, 2741,    0, 2742,    0, 2721, 2743,    0,
        0, 2744, 2744, 2744, 2722, 2741,    0,    0,    0, 2742,
        0, 2744,    0,    0,    0,    0, 2723, 2723,    0,    0,
     2741,    0, 2742, 2745, 2745, 2745, 2743, 2744, 2746, 2746,
     2746, 2741,    0, 2745, 2762, 2742, 2762,    0, 2746,    0,
     2747, 2747, 2747, 2744, 2762,    0, 2764,    0, 2764, 2745,
     2747,    0, 2743,    0, 2746, 2744, 2764,    0,    0, 2763,
     2762, 2763,    0,    0,    0, 2745, 2747,    0, 2746, 2763,
     2744,    0, 2764,    0,    0, 2762,    0, 2745, 2764,    0,
        0, 2744, 2746,    0,    0, 2763,    0,    0, 2762, 2763,

        0,    0, 2745,    0, 2747, 2746, 2765, 2765, 2765,    0,
     2764,    0, 2762, 2745,    0, 2764, 2765,    0, 2746,    0,
        0,    0,    0, 2763, 2762,    0, 2763, 2766, 2766, 2766,
     2747,    0, 2765, 2767, 2767, 2767, 2764, 2766,    0,    0,
     2782,    0, 2782, 2767, 2783,    0, 2783, 2765,    0, 2763,
     2782,    0,    0, 2766, 2783,    0,    0, 2766,    0, 2767,
     2765,    0, 2784,    0, 2784, 2767, 2782, 2785, 2785, 2785,
     2783,    0, 2784,    0, 2765,    0,    0, 2785,    0,    0,
        0, 2766, 2783,    0, 2766,    0, 2765, 2767, 2784, 2786,
     2786, 2786, 2767, 2785, 2782,    0,    0,    0, 2783, 2786,

        0,    0, 2787, 2787, 2787,    0,    0, 2766, 2799, 2783,
     2799,    0, 2787, 2767,    0, 2786, 2784,    0, 2799,    0,
     2782, 2785,    0,    0, 2783,    0,    0, 2786, 2787, 2800,
     2800, 2800,    0,    0, 2799,    0,    0,    0,    0, 2800,
        0,    0, 2784, 2786,    0,    0,    0, 2785,    0,    0,
        0,    0,    0,    0, 2786, 2800, 2787,    0,    0,    0,
        0,    0, 2799,    0,    0,    0,    0,    0,    0, 2786,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2787, 2800,    0,    0,    0,    0, 2799,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 2800,
     2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848,
     2848, 2848, 2848, 2848, 2848, 2848, 2849, 2849, 2849, 2849,
     2849, 2849, 2849, 2849, 2849, 2849, 2849, 2849, 2849, 2849,
     2849, 2849, 2850, 2850, 2850, 2850, 2850, 2850, 2850, 2850,
     2850, 2850, 2850, 2850, 2850, 2850, 2850, 2850, 2851, 2851,
     2851, 2851, 2851, 2851, 2851, 2851, 2851, 2851, 2851, 2851,
     2851, 2851, 2851, 2851, 2852, 2852, 2852, 2852, 2852, 2852,
     2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,

     2853, 2853, 2853, 2853, 2853, 2853, 2854, 2854, 2854, 2854,
     2854, 2854, 2854, 2854, 2854, 2854, 2854, 2854, 2854, 2854,
     2854, 2854, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
     2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2856, 2856,
     2856, 2856, 2856, 2856, 2856, 2856, 2856, 2856, 2856, 2856,
     2856, 2856, 2856, 2856, 2857, 2857, 2857, 2857, 2857, 2857,
     2857, 2857, 2857, 2857, 2857, 2857, 2857, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2859, 2859, 2859, 2859, 2859, 2859, 2859, 2860, 2860, 2860,
     2860, 2860, 2860, 2861, 2861, 2861, 2861, 2861, 2861, 2861,

     2861, 2861, 2861, 2861, 2861, 2861, 2861, 2861, 2861, 2862,
     2862, 2862, 2862, 2862, 2862, 2862, 2863, 2863, 2863, 2863,
     2863, 2863, 2864, 2864, 2864, 2864, 2864, 2864, 2864, 2864,
     2864, 2864, 2864, 2864, 2864, 2864, 2864, 2864, 2865, 2865,
     2865, 2865, 2865, 2865, 2865, 2865, 2865, 2865, 2865, 2865,
     2865, 2865, 2865, 2865, 2866,    0, 2866,    0,    0,    0,
        0,    0, 2866, 2866, 2866, 2866, 2866, 2866, 2866, 2867,
     2867, 2867, 2867, 2867, 2867, 2868, 2868, 2868,    0,    0,
        0,    0,    0, 2868, 2868, 2868, 2868, 2868, 2868, 2868,
     2869, 2869, 2869, 2869, 2869, 2869, 2870, 2870, 2870, 2870,

     2870,    0, 2870, 2870, 2870, 2870, 2870, 2870, 2870, 2870,
     2870, 2870, 2871, 2871, 2871, 2871, 2871, 2871, 2871, 2871,
     2871, 2871, 2871, 2871, 2871, 2872, 2872,    0,    0, 2872,
     2872,    0, 2872, 2873, 2873, 2873, 2873, 2873, 2873, 2873,
     2873, 2873, 2873, 2873, 2873, 2873, 2874, 2874,    0, 2874,
     2874,    0, 2874, 2875, 2875, 2875, 2875, 2875, 2875, 2875,
     2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2875, 2876,
     2876, 2876, 2876, 2876, 2876, 2876, 2876, 2876, 2876, 2876,
     2876, 2876, 2876, 2876, 2876, 2877, 2877, 2877, 2877, 2877,
     2877, 2877, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878,

     2878, 2878, 2878, 2878, 2878, 2878, 2878, 2878, 2879, 2879,
     2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879, 2879,
     2879, 2879, 2879, 2879, 2880, 2880, 2880, 2880, 2880, 2880,
     2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880,
     2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
     2881, 2881, 2881, 2881, 2881, 2881, 2882,    0, 2882,    0,
        0,    0,    0,    0, 2882, 2882, 2882, 2882, 2882, 2882,
     2882, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883, 2883,
     2883, 2883, 2883, 2883, 2883, 2883, 2883, 2884, 2884, 2884,
     2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884,

     2884, 2884, 2884, 2886, 2886,    0, 2886, 2886, 2886, 2886,
     2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2888,
     2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888,
     2888, 2888, 2889, 2889,    0,    0,    0, 2889, 2889, 2889,
     2890, 2890,    0,    0,    0, 2890, 2890, 2890, 2891, 2891,
        0,    0,    0, 2891,    0, 2891, 2893, 2893, 2893, 2893,
     2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893, 2893,
     2893, 2893, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894,
     2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2895, 2895,
     2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895, 2895,

     2895, 2895, 2895, 2895, 2896, 2896, 2896, 2896, 2896, 2896,
     2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896, 2896,
     2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897, 2897,
     2897, 2897, 2897, 2897, 2897, 2897, 2898, 2898, 2898, 2898,
     2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898,
     2898, 2898, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899,
     2899, 2899, 2899, 2899, 2899, 2899, 2899, 2899, 2900, 2900,
     2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900,
     2900, 2900, 2900, 2900, 2901, 2901, 2901, 2901, 2901, 2901,
     2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,

     2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
     2902, 2902, 2902, 2902, 2902, 2902, 2903,    0, 2903,    0,
        0,    0,    0,    0, 2903, 2903, 2903, 2903, 2903, 2903,
     2903, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904,
     2904, 2904, 2904, 2904, 2904, 2904, 2904, 2905, 2905, 2905,
     2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905, 2905,
     2905, 2905, 2905, 2906, 2906, 2906, 2906, 2906, 2906, 2906,
     2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2906, 2907,
     2907, 2907,    0,    0,    0,    0,    0, 2907, 2907, 2907,
     2907, 2907, 2907, 2907, 2908, 2908, 2908, 2908, 2908, 2908,

     2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908,
     2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909, 2909,
     2909, 2909, 2909, 2909, 2909, 2909, 2911, 2911,    0, 2911,
     2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911,
     2911, 2911, 2912, 2912, 2912, 2912, 2912, 2912, 2912, 2912,
     2912, 2912, 2912, 2912, 2912, 2913, 2913,    0,    0,    0,
     2913, 2913, 2913, 2914, 2914,    0,    0,    0, 2914, 2914,
     2914, 2915, 2915,    0,    0,    0, 2915,    0, 2915, 2916,
     2916,    0,    0,    0,    0, 2916, 2917, 2917, 2917, 2917,
     2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917, 2917,

     2917, 2917, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918,
     2918, 2918, 2918, 2918, 2918, 2918, 2918, 2918, 2919, 2919,
     2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919, 2919,
     2919, 2919, 2919, 2919, 2920, 2920, 2920, 2920, 2920, 2920,
     2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920, 2920,
     2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921, 2921,
     2921, 2921, 2921, 2921, 2921, 2921, 2922, 2922, 2922, 2922,
     2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922, 2922,
     2922, 2922, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923,
     2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2924,    0,

     2924,    0,    0,    0,    0,    0, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2925, 2925, 2925, 2925, 2925, 2925, 2925,
     2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2925, 2926,
     2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926, 2926,
     2926, 2926, 2926, 2926, 2926, 2927, 2927, 2927, 2927, 2927,
     2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927, 2927,
     2927, 2928, 2928, 2928,    0,    0,    0,    0,    0, 2928,
     2928, 2928, 2928, 2928, 2928, 2928, 2929, 2929, 2929, 2929,
     2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929, 2929,
     2929, 2929, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930,

     2930, 2930, 2930, 2930, 2930, 2930, 2930, 2930, 2932, 2932,
        0, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932,
     2932, 2932, 2932, 2932, 2933, 2933,    0,    0,    0, 2933,
     2933, 2933, 2934, 2934,    0,    0,    0, 2934, 2934, 2934,
     2935, 2935,    0,    0,    0, 2935,    0, 2935, 2936,    0,
        0,    0, 2936, 2936, 2936, 2937,    0,    0,    0, 2937,
     2937, 2937, 2938, 2938,    0,    0,    0, 2938,    0, 2938,
     2939, 2939,    0,    0,    0,    0, 2939, 2940, 2940, 2940,
     2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940,
     2940, 2940, 2940, 2941, 2941, 2941, 2941, 2941, 2941, 2941,

     2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2941, 2942,
     2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942, 2942,
     2942, 2942, 2942, 2942, 2942, 2943, 2943, 2943, 2943, 2943,
     2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943, 2943,
     2943, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944,
     2944, 2944, 2944, 2944, 2944, 2944, 2944, 2945, 2945, 2945,
     2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945, 2945,
     2945, 2945, 2945, 2946,    0, 2946,    0,    0,    0,    0,
        0, 2946, 2946, 2946, 2946, 2946, 2946, 2946, 2947, 2947,
     2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947, 2947,

     2947, 2947, 2947, 2947, 2948, 2948, 2948, 2948, 2948, 2948,
     2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948, 2948,
     2949, 2949, 2949,    0,    0,    0,    0,    0, 2949, 2949,
     2949, 2949, 2949, 2949, 2949, 2950, 2950, 2950, 2950, 2950,
     2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950, 2950,
     2950, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951,
     2951, 2951, 2951, 2951, 2951, 2951, 2951, 2952, 2952, 2952,
     2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952, 2952,
     2953, 2953,    0, 2953, 2953, 2953, 2953, 2953, 2953, 2953,
     2953, 2953, 2953, 2953, 2953, 2953, 2954, 2954,    0,    0,

        0, 2954, 2954, 2954, 2955,    0,    0,    0, 2955, 2955,
     2955, 2956, 2956,    0,    0,    0, 2956, 2956, 2956, 2957,
        0,    0,    0, 2957, 2957, 2957, 2958,    0,    0,    0,
     2958, 2958, 2958, 2959, 2959,    0,    0,    0, 2959,    0,
     2959, 2960,    0,    0,    0, 2960, 2960, 2960, 2961, 2961,
     2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961,
     2961, 2961, 2961, 2961, 2962, 2962, 2962, 2962, 2962, 2962,
     2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962,
     2963, 2963, 2963, 2963, 2963, 2963, 2963, 2963, 2963, 2963,
     2963, 2963, 2963, 2963, 2963, 2963, 2964, 2964, 2964, 2964,

     2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964, 2964,
     2964, 2964, 2965,    0, 2965,    0,    0,    0,    0,    0,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2966, 2966, 2966,
     2966, 2966, 2966, 2966, 2966, 2966, 2966, 2966, 2966, 2966,
     2966, 2966, 2966, 2967, 2967, 2967, 2967, 2967, 2967, 2967,
     2967, 2967, 2967, 2967, 2967, 2967, 2967, 2967, 2967, 2968,
     2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968, 2968,
     2968, 2968, 2968, 2968, 2968, 2969, 2969, 2969,    0,    0,
        0,    0,    0, 2969, 2969, 2969, 2969, 2969, 2969, 2969,
     2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970,

     2970, 2970, 2970, 2970, 2970, 2970, 2971, 2971, 2971, 2971,
     2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971, 2971,
     2971, 2971, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2973, 2973,
        0, 2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973, 2973,
     2973, 2973, 2973, 2973, 2974,    0,    0,    0, 2974, 2974,
     2974, 2975,    0,    0,    0, 2975, 2975, 2975, 2976, 2976,
        0,    0,    0, 2976,    0, 2976, 2977,    0,    0,    0,
     2977, 2977, 2977, 2978, 2978,    0,    0,    0, 2978,    0,
     2978, 2979,    0,    0,    0, 2979, 2979, 2979, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2981, 2981, 2981, 2981, 2981, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2982, 2982,    0,    0,    0, 2982,    0, 2982, 2983, 2983,
     2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983, 2983,
     2983, 2983, 2983, 2983, 2984, 2984, 2984, 2984, 2984, 2984,
     2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984,
     2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985,
     2985, 2985, 2985, 2985, 2985, 2985, 2986, 2986, 2986, 2986,
     2986, 2986, 2986, 2986, 2986, 2986, 2986, 2986, 2986, 2986,

     2986, 2986, 2987,    0,    0,    0, 2987, 2987, 2987, 2988,
     2988,    0,    0,    0, 2988,    0, 2988, 2989, 2989, 2989,
     2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2989, 2990, 2990, 2990, 2990, 2990, 2990, 2990,
     2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2990, 2991,
     2991,    0,    0,    0, 2991,    0, 2991, 2992, 2992, 2992,
     2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992, 2992,
     2992, 2992, 2992, 2993, 2993, 2993, 2993, 2993, 2993, 2993,
     2993, 2993, 2993, 2993, 2993, 2993, 2993, 2993, 2993, 2994,
     2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,

     2994, 2994, 2994, 2994, 2994, 2995, 2995, 2995, 2995, 2995,
     2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995,
     2995, 2996, 2996, 2996, 2996, 2996, 2996, 2996, 2996, 2996,
     2996, 2996, 2996, 2996, 2996, 2996, 2996, 2997, 2997, 2997,
     2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997,
     2997, 2997, 2997, 2998, 2998, 2998, 2998, 2998, 2998, 2998,
     2998, 2998, 2998, 2998, 2998, 2998, 2998, 2998, 2998, 2999,
     2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999,
     2999, 2999, 2999, 2999, 2999, 3000, 3000, 3000, 3000, 3000,
     3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000,

     3000, 3001, 3001, 3001, 3001, 3001, 3001, 3001, 3001, 3001,
     3001, 3001, 3001, 3001, 3001, 3001, 3001, 3002, 3002, 3002,
     3002, 3002, 3002, 3002, 3002, 3002, 3002, 3002, 3002, 3002,
     3002, 3002, 3002, 3003, 3003, 3003, 3003, 3003, 3003, 3003,
     3003, 3003, 3003, 3003, 3003, 3003, 3003, 3003, 3003, 3004,
     3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004, 3004,
     3004, 3004, 3004, 3004, 3004, 3005, 3005, 3005, 3005, 3005,
     3005, 3005, 3005, 3005, 3005, 3005, 3005, 3005, 3005, 3005,
     3005, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,

     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847, 2847,
     2847, 2847, 2847, 2847, 2847
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[342] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
    0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "iec_flex.ll"
/*
 *  matiec - a compiler for the programming languages defined in IEC 61131-3
 *
 *  Copyright (C) 2003-2011  Mario de Sousa (msousa@fe.up.pt)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of thest_whitespaceLicense, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * This code is made available on the understanding that it will not be
 * used in safety-critical situations without a full and competent review.
 */
/*
 * An IEC 61131-3 compiler.
 *
 * Based on the
 * FINAL DRAFT - IEC 61131-3, 2nd Ed. (2001-12-10)
 *
 */
/*
 * Stage 1
 * =======
 *
 * This file contains the lexical tokens definitions, from which
 * the flex utility will generate a lexical parser function.
 */
/*****************************/
/* Lexical Parser Options... */
/*****************************/
/* The lexical analyser will never work in interactive mode,
 * i.e., it will only process programs saved to files, and never
 * programs being written inter-actively by the user.
 * This option saves the resulting parser from calling the
 * isatty() function, that seems to be generating some compile
 * errors under some (older?) versions of flex.
 */
/* Have the lexical analyser use a 'char *yytext' instead of an
 * array of char 'char yytext[??]' to store the lexical token.
 */
/* Have the lexical analyser ignore the case of letters.
 * This will occur for all the tokens and keywords, but
 * the resulting text handed up to the syntax parser
 * will not be changed, and keep the original case
 * of the letters in the input file.
 */
/* Have the generated lexical analyser keep track of the
 * line number it is currently analysing.
 * This is used to pass up to the syntax parser
 * the number of the line on which the current
 * token was found. It will enable the syntax parser
 * to generate more informatve error messages...
 */
/* required for the use of the yy_pop_state() and
 * yy_push_state() functions
 */
/* The '%option stack' also requests the inclusion of 
 * the yy_top_state(), however this function is not
 * currently being used. This means that the compiler
 * is complaining about the existance of this function.
 * The following option removes the yy_top_state()
 * function from the resulting c code, so the compiler 
 * no longer complains.
 */
/* We will be using unput() in our flex code, so we cannot set the following option!... */
/*
%option nounput
*/
/* The '%option debug' makes the generated scanner run in
 * debug mode.
%option debug
 */
/**************************************************/
/* External Variable and Function declarations... */
/**************************************************/
#line 110 "iec_flex.ll"
/* Define TEST_MAIN to include a main() function.
 * Useful for testing the parser generated by flex.
 */
/*
#define TEST_MAIN
*/
/* If lexical parser is compiled by itself, we need to define the following
 * constant to some string. Under normal circumstances LIBDIRECTORY is set
 * in the syntax parser header file...
 */
#ifdef TEST_MAIN
#define DEFAULT_LIBDIR "just_testing"
#endif



/* Required for strdup() */
#include <string.h>

/* Required only for the declaration of abstract syntax classes
 * (class symbol_c; class token_c; class list_c;)
 * These will not be used in flex, but the token type union defined
 * in iec_bison.hh contains pointers to these classes, so we must include
 * it here.
 */
#include "../absyntax/absyntax.hh"


/* iec_bison.hh is generated by bison.
 * Contains the definition of the token constants, and the
 * token value type YYSTYPE (in our case, a 'const char *')
 */
#include "iec_bison.hh"
#include "stage1_2_priv.hh"


/* Variable defined by the bison parser,
 * where the value of the tokens will be stored
 */
extern YYSTYPE yylval;

/* The name of the file currently being parsed...
 * Note that flex accesses and updates this global variable
 * apropriately whenever it comes across an (*#include <filename> *) directive...
 */
const char *current_filename = NULL;



/* Variable defined by the bison parser.
 * It must be initialised with the location
 * of the token being parsed.
 * This is only needed if we want to keep
 * track of the locations, in order to give
 * more meaningful error messages!
 */
/*
 *extern YYLTYPE yylloc;
b*/
#define YY_INPUT(buf,result,max_size)  {\
    result = GetNextChar(buf, max_size);\
    if (  result <= 0  )\
      result = YY_NULL;\
    }


/* Macro that is executed for every action.
 * We use it to pass the location of the token
 * back to the bison parser...
 */
#define YY_USER_ACTION {\
	yylloc.first_line = current_tracking->lineNumber;			\
	yylloc.first_column = current_tracking->currentTokenStart;		\
	yylloc.first_file = current_filename;					\
	yylloc.first_order = current_order;					\
	yylloc.last_line = current_tracking->lineNumber;			\
	yylloc.last_column = current_tracking->currentChar - 1;			\
	yylloc.last_file = current_filename;					\
	yylloc.last_order = current_order;					\
	current_tracking->currentTokenStart = current_tracking->currentChar;	\
	current_order++;							\
	}



/* Since this lexical parser we defined only works in ASCII based
 * systems, we might as well make sure it is being compiled on
 * one...
 * Lets check a few random characters...
 */
#if (('a' != 0x61) || ('A' != 0x41) || ('z' != 0x7A) || ('Z' != 0x5A) || \
     ('0' != 0x30) || ('9' != 0x39) || ('(' != 0x28) || ('[' != 0x5B))
#error This lexical analyser is not portable to a non ASCII based system.
#endif


/* Function only called from within flex, but defined
 * in iec.y!
 * We declare it here...
 *
 * Search for a symbol in either of the two symbol tables
 * and return the token id of the first symbol found.
 * Searches first in the variables, and only if not found
 * does it continue searching in the library elements
 */
//token_id_t get_identifier_token(const char *identifier_str);
int get_identifier_token(const char *identifier_str);
/***************************************************/
/* Forward Declaration of functions defined later. */
/***************************************************/
#line 225 "iec_flex.ll"
/* return all the text in the current token back to the input stream. */
void unput_text(unsigned int n);
/* return all the text in the current token back to the input stream, 
 * but first return to the stream an additional character to mark the end of the token. 
 */
void unput_and_mark(const char c);

void include_file(const char *include_filename);

/* The body_state tries to find a ';' before a END_PROGRAM, END_FUNCTION or END_FUNCTION_BLOCK or END_ACTION
 * To do so, it must ignore comments and pragmas. This means that we cannot do this in a signle lex rule.
 * However, we must store any text we consume in every rule, so we can push it back into the buffer
 * once we have decided if we are parsing ST or IL code. The following functions manage that buffer used by
 * the body_state.
 */
void  append_bodystate_buffer(const char *yytext);
void   unput_bodystate_buffer(void);
int  isempty_bodystate_buffer(void);

int GetNextChar(char *b, int maxBuffer);
/****************************/
/* Lexical Parser States... */
/****************************/
/* NOTE: Our psrser can parse st or il code, intermixed
 *       within the same file.
 *       With IL we come across the issue of the EOL (end of line) token.
 *       ST, and the declaration parts of IL do not use this token!
 *       If the lexical analyser were to issue this token during ST
 *       language parsing, or during the declaration of data types,
 *       function headers, etc. in IL, the syntax parser would crash.
 *
 *       We can solve this issue using one of three methods:
 *        (1) Augment all the syntax that does not accept the EOL
 *            token to simply ignore it. This makes the syntax
 *            definition (in iec.y) very cluttered!
 *        (2) Let the lexical parser figure out which language
 *            it is parsing, and decide whether or not to issue
 *            the EOL token. This requires the lexical parser
 *            to have knowledge of the syntax!, making for a poor
 *            overall organisation of the code. It would also make it
 *            very difficult to understand the lexical parser as it
 *            would use several states, and a state machine to transition
 *            between the states. The state transitions would be
 *            intermingled with the lexical parser defintion!
 *        (3) Use a mixture of (1) and (2). The lexical analyser
 *            merely distinguishes between function headers and function
 *            bodies, but no longer makes a distinction between il and
 *            st language bodies. When parsing a body, it will return
 *            the EOL token. In other states '\n' will be ignored as
 *            whitespace.
 *            The ST language syntax has been augmented in the syntax
 *            parser configuration to ignore any EOL tokens that it may
 *            come across!
 *            This option has both drawbacks of option (1) and (2), but
 *            much less intensely.
 *            The syntax that gets cluttered is limited to the ST statements
 *            (which is rather limited, compared to the function headers and
 *            data type declarations, etc...), while the state machine in
 *            the lexical parser becomes very simple. All state transitions
 *            can be handled within the lexical parser by itself, and can be
 *            easily identified. Thus knowledge of the syntax required by
 *            the lexical parser is very limited!
 *
 * Amazingly enough, I (Mario) got to implement option (3)
 * at first, requiring two basic states, decl and body.
 * The lexical parser will enter the body state when
 * it is parsing the body of a function/program/function block. The
 * state transition is done when we find a VAR_END that is not followed
 * by a VAR! This is the syntax knowledge that gets included in the
 * lexical analyser with this option!
 * Unfortunately, getting the st syntax parser to ignore EOL anywhere
 * where they might appear leads to conflicts. This is due to the fact
 * that the syntax parser uses the single look-ahead token to remove
 * possible conflicts. When we insert a possible EOL, the single
 * look ahead token becomes the EOL, which means the potential conflicts
 * could no longer be resolved.
 * Removing these conflicts would make the st syntax parser very convoluted,
 * and adding the extraneous EOL would make it very cluttered.
 * This option was therefore dropped in favour of another!
 *
 * I ended up implementing (2). Unfortunately the lexical analyser can
 * not easily distinguish between il and st code, since function
 * calls in il are very similar to function block calls in st.
 * We therefore use an extra 'body' state. When the lexical parser
 * finds that last END_VAR, it enters the body state. This state
 * must figure out what language is being parsed from the first few
 * tokens, and switch to the correct state (st, il or sfc) according to the
 * language. This means that we insert quite a bit of knowledge of the
 * syntax of the languages into the lexical parser. This is ugly, but it
 * works, and at least it is possible to keep all the state changes together
 * to make it easier to remove them later on if need be.
 * Once the language being parsed has been identified, 
 * the body state returns any matched text back to the buffer with unput(),
 * to be later matched correctly by the apropriate language parser (st, il or sfc).
 *
 * Aditionally, in sfc state it may further recursively enter the body state
 * once again. This is because an sfc body may contain ACTIONS, which are then
 * written in one of the three languages (ST, IL or SFC), so once again we need
 * to figure out which language the ACTION in the SFC was written in. We already
 * ahve all that done in the body state, so we recursively transition to the body 
 * state once again.
 * Note that in this case, when coming out of the st/il state (whichever language
 * the action was written in) the sfc state will become active again. This is done by
 * pushing and poping the previously active state!
 *
 * The sfc_qualifier_state is required because when parsing actions within an
 * sfc, we will be expecting action qualifiers (N, P, R, S, DS, SD, ...). In order
 * to bison to work correctly, these qualifiers must be returned as tokens. However,
 * these tokens are not reserved keywords, which means it should be possible to
 * define variables/functions/FBs with any of these names (including 
 * S and R which are special because they are also IL operators). So, when we are not
 * expecting any action qualifiers, flex does not return these tokens, and is free
 * to interpret them as previously defined variables/functions/... as the case may be.
 *
 * The time_literal_state is required because TIME# literals are decomposed into 
 * portions, and wewant to send these portions one by one to bison. Each poertion will 
 * represent the value in days/hours/minutes/seconds/ms.
 * Unfortunately, some of these portions may also be lexically analysed as an identifier. So,
 * we need to disable lexical identification of identifiers while parsing TIME# literals!
 * e.g.:  TIME#55d_4h_56m
 *       We would like to return to bison the tokens 'TIME' '#' '55d' '_' '4h' '_' '56m'
 *       Unfortunately, flex will join '_' and '4h' to create a legal {identifier} '_4h',
 *       and return that identifier instead! So, we added this state!
 *
 * The ignore_pou_state state is only used when bison says it is doing the pre-parsing.
 * During pre-parsing, the main state machine will only transition between
 * INITIAL and ignore_pou_state, and from here back to INITIAL. All other
 * transitions are inhibited. This inhibition is actually just enforced by making
 * sure that the INITIAL ---> ignore_pou_state transition is tested before all other
 * transitions coming out of INITIAL state. All other transitions are unaffected, as they
 * never get a chance to be evaluated when bison is doing pre-parsing.
 * Pre-parsing is a first quick scan through the whole input source code simply
 * to determine the list of POUs and datatypes that will be defined in that
 * code. Basically, the objective is to fill up the previously_declared_xxxxx
 * maps, without processing the code itself. Once these maps have been filled up,
 * bison will throw away the AST (abstract syntax tree) created up to that point, 
 * and scan through the same source code again, but this time creating a correct AST.
 * This pre-scan allows the source code to reference POUs and datatypes that are
 * only declared after they are used!
 * 
 *
 * Here is a main state machine...
 *                                                                         --+  
 *                                                                           |  these states are
 *              +------------> get_pou_name_state  ----> ignore_pou_state    |  only active 
 *              |                                            |               |  when bison is 
 *              |  ------------------------------------------+               |  doing the 
 *              |  |                                                         |  pre-parsing!!
 *              |  v                                                       --+
 *       +---> INITIAL <-------> config
 *       |        \
 *       |        V
 *       |   header_state
 *       |        |
 *       |        V
 *     vardecl_list_state <------> var_decl
 *       ^        | 
 *       |        | [using push()]
 *       |        |
 *       |        V
 *       |       body, 
 *       |        |
 *       |        | 
 *       |   -------------------
 *       |   |       |         |
 *       |   v       v         v
 *       |  st      il        sfc
 *       |   |       |         |  [using pop() when leaving st/il/sfc => goes to vardecl_list_state]
 *       |   |       |         |
 *       -----------------------
 *
 * NOTE:- When inside sfc, and an action or transition in ST/IL is found, then 
 *        we also push() to the body state. This means that sometimes, when pop()ing
 *        from st and il, the state machine may return to the sfc state!
 *      - The transitions form sfc to body will be decided by bison, which will
 *        tell flex to do the transition by calling cmd_goto_body_state().
 *   
 * 
 * Possible state changes are:
 *   INITIAL -> goto(ignore_pou_state)
 *               (This transition state is only used when bison says it is doing the pre-parsing.)
 *               (This transition takes precedence over all other transitions!)
 *               (when a FUNCTION, FUNCTION_BLOCK, PROGRAM or CONFIGURATION is found)
 * 
 *   INITIAL -> goto(config_state)
 *                (when a CONFIGURATION is found)
 * 
 *   INITIAL -> goto(header_state)
 *               (when a FUNCTION, FUNCTION_BLOCK, or PROGRAM is found)
 * 
 *   header_state -> goto(vardecl_list_state)
 *               (When the first VAR token is found, i.e. at begining of first VAR .. END_VAR declaration)
 * 
 *  vardecl_list_state -> push current state (vardecl_list_state), and goto(vardecl_state) 
 *                (when a VAR token is found)
 *   vardecl_state -> pop() to (vardecl_list_state) 
 *                (when a END_VAR token is found)
 * 
 *   vardecl_list_state -> push current state (vardecl_list_state), and goto(body_state) 
 *                (when the last END_VAR is found!)
 *
 *   body_state    -> goto(sfc_state)
 *                     (when it figures out it is parsing sfc language)
 *   body_state    -> goto(st_state)
 *                     (when it figures out it is parsing st language)
 *   body_state    -> goto(il_state)
 *                     (when it figures out it is parsing il language)
 *   st_state      -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM,
 *                      END_ACTION or END_TRANSITION is found)
 *   il_state      -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM,
 *                      END_ACTION or END_TRANSITION is found)
 *   sfc_state     -> pop() to vardecl_list_state
 *                     (when a END_FUNCTION, END_FUNCTION_BLOCK, or END_PROGRAM is found)
 * 
 *   ignore_pou_state   -> goto(INITIAL)
 *                         (when a END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM or END_CONFIGURATION is found)
 *   vardecl_list_state -> goto(INITIAL)
 *                         (when a END_FUNCTION, END_FUNCTION_BLOCK, or END_PROGRAM is found)
 *   config_state       -> goto(INITIAL)
 *                         (when a END_CONFIGURATION is found)
 * 
 *  
 *   sfc_state     -> push current state(sfc_state); goto(body_state)
 *                     (when parsing an action. This transition is requested by bison)
 *   sfc_state     -> push current state(sfc_state); goto(sfc_qualifier_state)
 *                     (when expecting an action qualifier. This transition is requested by bison)
 *   sfc_qualifier_state -> pop() to sfc_state
 *                     (when no longer expecting an action qualifier. This transition is requested by bison)
 *
 *   config_state  -> push(config_state); goto(task_init_state)
 *                     (when parsing a task initialisation. This transition is requested by bison)
 *   task_init_state -> pop()
 *                     (when no longer parsing task initialisation parameters. This transition is requested by bison)
 *
 * 
 * There is another secondary state machine for parsing comments, another for file_includes, 
 * and yet another for time literals.
 */
/* Bison is in the pre-parsing stage, and we are parsing a POU. Ignore everything up to the end of the POU! */


/* we are parsing a configuration. */

/* Inside a configuration, we are parsing a task initialisation parameters */
/* This means that PRIORITY, SINGLE and INTERVAL must be handled as
 * tokens, and not as possible identifiers. Note that the above words
 * are not keywords.
 */

/* we are looking for the first VAR inside a function's, program's or function block's declaration */
/* This is not exclusive (%x) as we must be able to parse the identifier and data types of a function/FB */

/* we are parsing a function, program or function block sequence of VAR..END_VAR delcarations */
 
/* a substate of the vardecl_list_state: we are inside a specific VAR .. END_VAR */

/* we will be parsing a function body/action/transition. Whether il/st/sfc remains to be determined */

/* we are parsing il code -> flex must return the EOL tokens!       */

/* we are parsing st code -> flex must not return the EOL tokens!   */

/* we are parsing sfc code -> flex must not return the EOL tokens!  */

/* we are parsing sfc code, and expecting an action qualifier.      */

/* we are parsing sfc code, and expecting the priority token.       */

/* we are parsing a TIME# literal. We must not return any {identifier} tokens. */

/* we are parsing a comment. */

/*******************/
/* File #include's */
/*******************/
/* We extend the IEC 61131-3 standard syntax to allow inclusion
 * of other files, using the IEC 61131-3 pragma directive...
 * The accepted syntax is:
 *  {#include "<filename>"}
 */
/* the "include" states are used for picking up the name of an include file */



#line 543 "iec_flex.ll"

/* A counter to track the order by which each token is processed.
 * NOTE: This counter is not exactly linear (i.e., it does not get incremented by 1 for each token).
 *       i.e.. it may get incremented by more than one between two consecutive tokens.
 *       This is due to the fact that the counter gets incremented every 'user action' in flex,
 *       however not every user action will result in a token being passed to bison.
 *       Nevertheless this is still OK, as we are only interested in the relative
 *       ordering of tokens...
 */
static long int current_order = 0;
  
typedef struct {
    int eof;
    int lineNumber;
    int currentChar;
    int lineLength;
    int currentTokenStart;
    char *buffer;
    FILE *in_file;
  } tracking_t;

/* A forward declaration of a function defined at the end of this file. */
void FreeTracking(tracking_t *tracking);


#define MAX_INCLUDE_DEPTH 16

typedef struct {
	  YY_BUFFER_STATE buffer_state;
	  tracking_t *env;
	  const char *filename;
	} include_stack_t;

tracking_t *current_tracking = NULL;
include_stack_t include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

const char *INCLUDE_DIRECTORIES[] = {
	"libs/matiec/stage1_2/lib",
	".",
	"/lib",
	"/usr/lib",
	"/usr/lib/iec",
	NULL /* must end with NULL!! */
	};
/*****************************/
/* Prelimenary constructs... */
/*****************************/
/* PRAGMAS */
/* ======= */
/* In order to allow the declaration of POU prototypes (Function, FB, Program, ...),
 * especially the prototypes of Functions and FBs defined in the standard
 * (i.e. standard functions and FBs), we extend the IEC 61131-3 standard syntax 
 * with two pragmas to indicate that the code is to be parsed (going through the 
 * lexical, syntactical, and semantic analysers), but no code is to be generated.
 * 
 * The accepted syntax is:
 *  {no_code_generation begin}
 *    ... prototypes ...
 *  {no_code_generation end}
 * 
 * When parsing these prototypes the abstract syntax tree will be populated as usual,
 * allowing the semantic analyser to correctly analyse the semantics of calls to these
 * functions/FBs. However, stage4 will simply ignore all IEC61131-3 code
 * between the above two pragmas.
 */
/* Any other pragma... */
/* COMMENTS */
/* ======== */
/* In order to allow nested comments, comments are handled by a specific comment_state state */
/* Whenever a "(*" is found, we push the current state onto the stack, and enter a new instance of the comment_state state.
 * Whenever a "*)" is found, we pop a state off the stack
 */
/* comments... */
/* However, bison has a shift/reduce conflict in bison, when parsing formal function/FB
 * invocations with the 'NOT <variable_name> =>' syntax (which needs two look ahead 
 * tokens to be parsed correctly - and bison being LALR(1) only supports one).
 * The current work around requires flex to completely parse the '<variable_name> =>'
 * sequence. This sequence includes whitespace and/or comments between the 
 * <variable_name> and the "=>" token.
 * 
 * This flex rule (sendto_identifier_token) uses the whitespace/comment as trailing context,
 * which means we can not use the comment_state method of specifying/finding and ignoring 
 * comments.
 * 
 * For this reason only, we must also define what a complete comment looks like, so
 * it may be used in this rule. Since the rule uses the whitespace_or_comment
 * construct as trailing context, this definition of comment must not use any
 * trailing context either.
 * 
 * Aditionally, it is not possible to define nested comments in flex without the use of
 * states, so for this particular location, we do NOT support nested comments.
 */
/* NOTE: this seemingly unnecessary complex definition is required
 *       to be able to eat up comments such as:
 *          '(* Testing... ! ***** ******)'
 *       without using the trailing context command in flex (/{context})
 *       since {comment} itself will later be used with
 *       trailing context ({comment}/{context})
 */
/* 3.1 Whitespace */
/* ============== */
/*
 * Whitespace is clearly defined (see IEC 61131-3 v2, section 2.1.4)
 * 
 * Whitespace definition includes the newline character.
 * 
 * However, the standard is inconsistent in that in IL the newline character 
 * is considered a token (EOL - end of line). 
 * In our implementation we therefore have two definitions of whitespace
 *   - one for ST, that includes the newline character
 *   - one for IL without the newline character.
 * Additionally, when parsing IL, the newline character is treated as the EOL token.
 * This requires the use of a state machine in the lexical parser that needs at least 
 * some knowledge of the syntax itself.
 *
 * NOTE: Our definition of whitespace will only work in ASCII!
 *
 * NOTE: we cannot use
 *         st_whitespace	[:space:]*
 *       since we use {st_whitespace} as trailing context. In our case
 *       this would not constitute "dangerous trailing context", but the
 *       lexical generator (i.e. flex) does not know this (since it does
 *       not know which characters belong to the set [:space:]), and will
 *       generate a "dangerous trailing context" warning!
 *       We use this alternative just to stop the flex utility from
 *       generating the invalid (in this case) warning...
 */
/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
/* NOTE: The following definitions only work if the host computer
 *       is using the ASCII maping. For e.g., with EBCDIC [A-Z]
 *       contains non-alphabetic characters!
 *       The correct way of doing it would be to use
 *       the [:upper:] etc... definitions.
 *
 *       Unfortunately, further on we need all printable
 *       characters (i.e. [:print:]), but excluding '$'.
 *       Flex does not allow sets to be composed by excluding
 *       elements. Sets may only be constructed by adding new
 *       elements, which means that we have to revert to
 *       [\x20\x21\x23\x25\x26\x28-x7E] for the definition
 *       of the printable characters with the required exceptions.
 *       The above also implies the use of ASCII, but now we have
 *       no way to work around it|
 *
 *       The conclusion is that our parser is limited to ASCII
 *       based host computers!!
 */
/*******************/
/* B.1.2 Constants */
/*******************/
/******************************/
/* B.1.2.1   Numeric literals */
/******************************/
/* Some helper symbols for parsing TIME literals... */
/* The correct definition for real would be:
 * real		{integer}\.{integer}({exponent}?)
 *
 * Unfortunately, the spec also defines fixed_point (B 1.2.3.1) as:
 * fixed_point		{integer}\.{integer}
 *
 * This means that {integer}\.{integer} could be interpreted
 * as either a fixed_point or a real.
 * I have opted to interpret {integer}\.{integer} as a fixed_point.
 * In order to do this, the definition of real has been changed to:
 * real		{integer}\.{integer}{exponent}
 *
 * This means that the syntax parser now needs to define a real to be
 * either a real_token or a fixed_point_token!
 */
/*******************************/
/* B.1.2.2   Character Strings */
/*******************************/
/*
common_character_representation :=
<any printable character except '$', '"' or "'">
|'$$'
|'$L'|'$N'|'$P'|'$R'|'$T'
|'$l'|'$n'|'$p'|'$r'|'$t'

NOTE: 	$ = 0x24
	" = 0x22
	' = 0x27

	printable chars in ASCII: 0x20-0x7E
*/
/* WARNING:
 * This definition is only valid in ASCII...
 *
 * Flex includes the function print_char() that defines
 * all printable characters portably (i.e. whatever character
 * encoding is currently being used , ASCII, EBCDIC, etc...)
 * Unfortunately, we cannot generate the definition of
 * common_character_representation portably, since flex
 * does not allow definition of sets by subtracting
 * elements in one set from another set.
 * This means we must build up the defintion of
 * common_character_representation using only set addition,
 * which leaves us with the only choice of defining the
 * characters non-portably...
 */
/************************/
/* B 1.2.3.1 - Duration */
/************************/
/* NOTE: The IEC 61131-3 v2 standard has an incorrect formal syntax definition of duration,
 *       as its definition does not match the standard's text.
 *       IEC 61131-3 v3 (committee draft) seems to have this fixed, so we use that
 *       definition instead!
 *
 *       duration::= ('T' | 'TIME') '#' ['+'|'-'] interval
 *       interval::= days | hours | minutes | seconds | milliseconds
 *       fixed_point  ::= integer [ '.' integer]
 *       days         ::= fixed_point 'd' | integer 'd' ['_'] [ hours ]
 *       hours        ::= fixed_point 'h' | integer 'h' ['_'] [ minutes ]
 *       minutes      ::= fixed_point 'm' | integer 'm' ['_'] [ seconds ]
 *       seconds      ::= fixed_point 's' | integer 's' ['_'] [ milliseconds ]
 *       milliseconds ::= fixed_point 'ms'
 * 
 * 
 *  The original IEC 61131-3 v2 definition is:
 *       duration ::= ('T' | 'TIME') '#' ['-'] interval
 *       interval ::= days | hours | minutes | seconds | milliseconds
 *       fixed_point  ::= integer [ '.' integer]
 *       days         ::= fixed_point 'd' | integer 'd' ['_'] hours
 *       hours        ::= fixed_point 'h' | integer 'h' ['_'] minutes
 *       minutes      ::= fixed_point 'm' | integer 'm' ['_'] seconds
 *       seconds      ::= fixed_point 's' | integer 's' ['_'] milliseconds
 *       milliseconds ::= fixed_point 'ms'
 */
/* to help provide nice error messages, we also parse an incorrect but plausible interval... */
/* NOTE that this erroneous interval will be parsed outside the time_literal_state, so must not 
 *      be able to parse any other legal lexcial construct (besides a legal interval, but that
 *      is OK as this rule will appear _after_ the rule to parse legal intervals!).
 */
/********************************************/
/* B.1.4.1   Directly Represented Variables */
/********************************************/
/* The correct definition, if the standard were to be followed... */
/* For the MatPLC, we will accept %<identifier>
 * as a direct variable, this being mapped onto the MatPLC point
 * named <identifier>
 */
/* TODO: we should not restrict it to only the accepted syntax
 * of <identifier> as specified by the standard. MatPLC point names
 * have a more permissive syntax.
 *
 * e.g. "P__234"
 *    Is a valid MatPLC point name, but not a valid <identifier> !!
 *    The same happens with names such as "333", "349+23", etc...
 *    How can we handle these more expressive names in our case?
 *    Remember that some direct variable may remain anonymous, with
 *    declarations such as:
 *    VAR
 *       AT %I3 : BYTE := 255;
 *    END_VAR
 *    in which case we are currently using "%I3" as the variable
 *    name.
 */
/* direct_variable_matplc		%{identifier} */
/* direct_variable			{direct_variable_standard}|{direct_variable_matplc} */
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
#line 7596 "iec_flex.cc"

#define INITIAL 0
#define ignore_pou_state 1
#define get_pou_name_state 2
#define config_state 3
#define task_init_state 4
#define header_state 5
#define vardecl_list_state 6
#define vardecl_state 7
#define body_state 8
#define il_state 9
#define st_state 10
#define sfc_state 11
#define sfc_qualifier_state 12
#define sfc_priority_state 13
#define time_literal_state 14
#define comment_state 15
#define include_beg 16
#define include_filename 17
#define include_end 18

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int _new_state );
    
    static void yy_pop_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 925 "iec_flex.ll"

	/* fprintf(stderr, "flex: state %d\n", YY_START); */

	/*****************************************************/
	/*****************************************************/
	/*****************************************************/
	/*****                                           *****/
	/*****                                           *****/
	/*****   F I R S T    T H I N G S    F I R S T   *****/
	/*****                                           *****/
	/*****                                           *****/
	/*****************************************************/
	/*****************************************************/
	/*****************************************************/

	/***********************************************************/
	/* Handle requests sent by bison for flex to change state. */
	/***********************************************************/
	if (get_goto_body_state()) {
	  yy_push_state(body_state);
	  rst_goto_body_state();
	}

	if (get_goto_sfc_qualifier_state()) {
	  yy_push_state(sfc_qualifier_state);
	  rst_goto_sfc_qualifier_state();
	}

	if (get_goto_sfc_priority_state()) {
	  yy_push_state(sfc_priority_state);
	  rst_goto_sfc_priority_state();
	}

	if (get_goto_task_init_state()) {
	  yy_push_state(task_init_state);
	  rst_goto_task_init_state();
	}

	if (get_pop_state()) {
	  yy_pop_state();
	  rst_pop_state();
	}

	/***************************/
	/* Handle the pragmas!     */
	/***************************/

	/* We start off by searching for the pragmas we handle in the lexical parser. */
#line 7895 "iec_flex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2848 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 2847 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 973 "iec_flex.ll"
unput_text(0); yy_push_state(include_beg);
	YY_BREAK
/* Pragmas sent to syntax analyser (bison) */
/* NOTE: In the vardecl_list_state we only process the pragmas between two consecutive VAR .. END_VAR blocks.
	 *       We do not process any pragmas trailing after the last END_VAR. We leave that to the body_state.
	 *       This is because the pragmas are stored in a statement_list or instruction_list (in bison),
	 *       but these lists must start with the special tokens start_IL_body_token/start_ST_body_token.
	 *       This means that these special tokens must be generated (by the body_state) before processing
	 *       the pragme => we cannot process the trailing pragmas in the vardecl_list_state state.
	 */
case 2:
YY_RULE_SETUP
#line 983 "iec_flex.ll"
return disable_code_generation_pragma_token;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 984 "iec_flex.ll"
return enable_code_generation_pragma_token;
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 25;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 985 "iec_flex.ll"
return disable_code_generation_pragma_token; 
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 24;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 986 "iec_flex.ll"
return enable_code_generation_pragma_token;  
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 987 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 988 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
/* Any other pragma we find, we just pass it up to the syntax parser...   */
/* Note that the <body_state> state is exclusive, so we have to include it here too. */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 991 "iec_flex.ll"
append_bodystate_buffer(yytext); /* in body state we do not process any tokens, we simply store them for later processing! */
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 992 "iec_flex.ll"
{/* return the pragmma without the enclosing '{' and '}' */
		 int cut = yytext[1]=='{'?2:1;
		 yytext[strlen(yytext)-cut] = '\0';
		 yylval.ID=strdup(yytext+cut);
		 return pragma_token;
		}
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 3);
(yy_c_buf_p) = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 998 "iec_flex.ll"
{/* return the pragmma without the enclosing '{' and '}' */
		 int cut = yytext[1]=='{'?2:1;
		 yytext[strlen(yytext)-cut] = '\0';
		 yylval.ID=strdup(yytext+cut);
		 return pragma_token;
		}
	YY_BREAK
/*********************************/
/* Handle the file includes!     */
/*********************************/
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 1009 "iec_flex.ll"
BEGIN(include_filename);
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 1011 "iec_flex.ll"
{
			  /* set the internal state variables of lexical analyser to process a new include file */
			  include_file(yytext);
			  /* switch to whatever state was active before the include file */
			  yy_pop_state();
			  /* now process the new file... */
			}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ignore_pou_state):
case YY_STATE_EOF(get_pou_name_state):
case YY_STATE_EOF(config_state):
case YY_STATE_EOF(task_init_state):
case YY_STATE_EOF(header_state):
case YY_STATE_EOF(vardecl_list_state):
case YY_STATE_EOF(vardecl_state):
case YY_STATE_EOF(body_state):
case YY_STATE_EOF(il_state):
case YY_STATE_EOF(st_state):
case YY_STATE_EOF(sfc_state):
case YY_STATE_EOF(sfc_qualifier_state):
case YY_STATE_EOF(sfc_priority_state):
case YY_STATE_EOF(time_literal_state):
case YY_STATE_EOF(comment_state):
case YY_STATE_EOF(include_beg):
case YY_STATE_EOF(include_filename):
case YY_STATE_EOF(include_end):
#line 1020 "iec_flex.ll"
{     /* NOTE: Currently bison is incorrectly using END_OF_INPUT in many rules
			       *       when checking for syntax errors in the input source code.
			       *       This means that in reality flex will be asked to carry on reading the input
			       *       even after it has reached the end of all (including the main) input files.
			       *       In other owrds, we will be called to return more tokens, even after we have
			       *       already returned an END_OF_INPUT token. In this case, we must carry on returning
			       *       more END_OF_INPUT tokens.
			       * 
			       *       However, in the above case we will be asked to carry on reading more tokens 
			       *       from the main input file, after we have reached the end. For this to work
			       *       correctly, we cannot close the main input file!
			       * 
			       *       This is why we WILL be called with include_stack_ptr == 0 multiple times,
			       *       and why we must handle it as a special case
			       *       that leaves the include_stack_ptr unchanged, and returns END_OF_INPUT once again.
			       * 
			       *       As a corollory, flex can never safely close the main input file, and we must ask
			       *       bison to close it!
			       */
			  if (include_stack_ptr == 0) {
			      // fclose(yyin);           // Must not do this!!
			      // FreeTracking(current_tracking); // Must not do this!!
			      /* yyterminate() terminates the scanner and returns a 0 to the 
			       * scanner's  caller, indicating "all done".
			       *	
			       * Our syntax parser (written with bison) has the token	
			       * END_OF_INPUT associated to the value 0, so even though
			       * we don't explicitly return the token END_OF_INPUT
			       * calling yyterminate() is equivalent to doing that. 
			       */ 	
			    yyterminate();
			  } else {
			    fclose(yyin);
			    FreeTracking(current_tracking);
			    --include_stack_ptr;
			    yy_delete_buffer(YY_CURRENT_BUFFER);
			    yy_switch_to_buffer((include_stack[include_stack_ptr]).buffer_state);
			    current_tracking = include_stack[include_stack_ptr].env;
			      /* removing constness of char *. This is safe actually,
			       * since the only real const char * that is stored on the stack is
			       * the first one (i.e. the one that gets stored in include_stack[0],
			       * which is never free'd!
			       */
			    /* NOTE: We do __NOT__ free the malloc()'d memory since 
			     *       pointers to this filename will be kept by many objects
			     *       in the abstract syntax tree.
			     *       This will later be used to provide correct error
			     *       messages during semantic analysis (stage 3)
			     */
			    /* free((char *)current_filename); */
			    current_filename = include_stack[include_stack_ptr].filename;
			    yy_push_state(include_end);
			  }
			}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 1075 "iec_flex.ll"
yy_pop_state();
	YY_BREAK
/* handle the artificial file includes created by include_string(), which do not end with a '}' */
case 14:
YY_RULE_SETUP
#line 1077 "iec_flex.ll"
unput_text(0); yy_pop_state(); 
	YY_BREAK
/*********************************/
/* Handle all the state changes! */
/*********************************/
/* INITIAL -> header_state */

case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 1086 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return FUNCTION;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 1087 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return FUNCTION_BLOCK;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 1088 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(header_state);/* printf("\nChanging to header_state\n"); */} return PROGRAM;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 1089 "iec_flex.ll"
if (get_preparse_state()) BEGIN(get_pou_name_state); else {BEGIN(config_state);/* printf("\nChanging to config_state\n"); */} return CONFIGURATION;
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 1093 "iec_flex.ll"
BEGIN(ignore_pou_state); yylval.ID=strdup(yytext); return identifier_token;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1094 "iec_flex.ll"
BEGIN(ignore_pou_state); unput_text(0);
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 1098 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1099 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1100 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1101 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 1102 "iec_flex.ll"
{}/* Ignore text inside POU! (including the '\n' character!)) */
	YY_BREAK

/* header_state -> (vardecl_list_state) */
/* NOTE: This transition assumes that all POUs with code (Function, FB, and Program) will always contain
	 *       at least one VAR_XXX block.
	 *      How about functions that do not declare variables, and go directly to the body_state???
	 *      - According to Section 2.5.1.3 (Function Declaration), item 2 in the list, a FUNCTION
	 *        must have at least one input argument, so a correct declaration will have at least
	 *        one VAR_INPUT ... VAR_END construct!
	 *      - According to Section 2.5.2.2 (Function Block Declaration), a FUNCTION_BLOCK
	 *        must have at least one input argument, so a correct declaration will have at least
	 *        one VAR_INPUT ... VAR_END construct!
	 *      - According to Section 2.5.3 (Programs), a PROGRAM must have at least one input
	 *        argument, so a correct declaration will have at least one VAR_INPUT ... VAR_END
	 *        construct!
	 *
	 *       All the above means that we needn't worry about PROGRAMs, FUNCTIONs or
	 *       FUNCTION_BLOCKs that do not have at least one VAR_END before the body_state.
	 *       If the code has an error, and no VAR_END before the body, we will simply
	 *       continue in the <vardecl_state> state, until the end of the FUNCTION, FUNCTION_BLOCK
	 *       or PROGAM.
	 * 
	 * WARNING: From 2016-05 (May 2016) onwards, matiec supports a non-standard option in which a Function
	 *          may be declared with no Input, Output or IN_OUT variables. This means that the above 
	 *          assumption is no longer valid.
	 *          To make things simpler (i.e. so we do not need to change the transition conditions in the flex state machine),
	 *          when using this non-standard extension matiec requires that Functions must include at least one 
	 *          VAR .. END_VAR block. This implies that the above assumption remains valid!
	 *          This limitation of requiring a VAR .. END_VAR block is not really very limiting, as a function
	 *          with no input and output parameters will probably need to do some 'work', and for that it will
	 *          probably need some local variables declared in a VAR .. END_VAR block.
	 *          Note however that in the extreme it might make sense to have a function with no variables whatsoever
	 *          (e.g.: a function that only calls other functions that all return VOID - another non standard extension!).
	 *          For now we do not consider this!!
	 */

case 26:
#line 1141 "iec_flex.ll"
case 27:
#line 1142 "iec_flex.ll"
case 28:
#line 1143 "iec_flex.ll"
case 29:
#line 1144 "iec_flex.ll"
case 30:
#line 1145 "iec_flex.ll"
case 31:
#line 1146 "iec_flex.ll"
case 32:
#line 1147 "iec_flex.ll"
case 33:
#line 1148 "iec_flex.ll"
case 34:
YY_RULE_SETUP
#line 1148 "iec_flex.ll"
unput_text(0); /* printf("\nChanging to vardecl_list_state\n") */; BEGIN(vardecl_list_state);
	YY_BREAK

/* vardecl_list_state -> (vardecl_state | body_state | INITIAL) */

case 35:
#line 1155 "iec_flex.ll"
case 36:
#line 1156 "iec_flex.ll"
case 37:
#line 1157 "iec_flex.ll"
case 38:
#line 1158 "iec_flex.ll"
case 39:
#line 1159 "iec_flex.ll"
case 40:
#line 1160 "iec_flex.ll"
case 41:
#line 1161 "iec_flex.ll"
case 42:
#line 1162 "iec_flex.ll"
case 43:
YY_RULE_SETUP
#line 1162 "iec_flex.ll"
unput_text(0); yy_push_state(vardecl_state);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1164 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1165 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1166 "iec_flex.ll"
unput_text(0); BEGIN(INITIAL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1168 "iec_flex.ll"
unput_text(0); yy_push_state(body_state); //printf("\nChanging to body_state\n");/* anything else, just change to body_state! */
	YY_BREAK

/* vardecl_list_state -> pop to $previous_state (vardecl_list_state) */

case 48:
YY_RULE_SETUP
#line 1174 "iec_flex.ll"
yy_pop_state(); return END_VAR; /* pop back to vardecl_list_state */
	YY_BREAK

/* body_state -> (il_state | st_state | sfc_state) */

case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1180 "iec_flex.ll"
{/* In body state we do not process any tokens,
				  * we simply store them for later processing!
				  * NOTE: all whitespace in the begining
				  * of body_state must be removed so we can
				  * detect ':=' in the beginning of TRANSACTION
				  * conditions preceded by whitespace.
				  * => only add to bodystate_buffer when not in beginning.
				  */
				  if (!isempty_bodystate_buffer()) 
				    append_bodystate_buffer(yytext); 
				}
	YY_BREAK
/* 'INITIAL_STEP' always used in beginning of SFCs !! */
case 50:
YY_RULE_SETUP
#line 1192 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); BEGIN(sfc_state);}
				  else					{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* ':=', at the very beginning of a 'body', occurs only in transitions and not Function, FB, or Program bodies! */
case 51:
YY_RULE_SETUP
#line 1197 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); BEGIN(st_state);} /* We do _not_ return a start_ST_body_token here, as bison does not expect it! */
				  else				 	{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* check if ';' occurs before an END_FUNCTION, END_FUNCTION_BLOCK, END_PROGRAM, END_ACTION or END_TRANSITION. (If true => we are parsing ST; If false => parsing IL). */
case 52:
#line 1203 "iec_flex.ll"
case 53:
#line 1204 "iec_flex.ll"
case 54:
#line 1205 "iec_flex.ll"
case 55:
#line 1206 "iec_flex.ll"
case 56:
YY_RULE_SETUP
#line 1206 "iec_flex.ll"
{ append_bodystate_buffer(yytext); unput_bodystate_buffer(); BEGIN(il_state); /*printf("returning start_IL_body_token\n");*/ return start_IL_body_token;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1207 "iec_flex.ll"
{ append_bodystate_buffer(yytext);
				  if (strcmp(yytext, ";") == 0)
				    {unput_bodystate_buffer(); BEGIN(st_state); /*printf("returning start_ST_body_token\n");*/ return start_ST_body_token;}
				}
	YY_BREAK
/* The following rules are not really necessary. They just make compilation faster in case the ST Statement List starts with one fot he following... */
case 58:
#line 1213 "iec_flex.ll"
case 59:
#line 1214 "iec_flex.ll"
case 60:
#line 1215 "iec_flex.ll"
case 61:
#line 1216 "iec_flex.ll"
case 62:
#line 1217 "iec_flex.ll"
case 63:
#line 1218 "iec_flex.ll"
case 64:
YY_RULE_SETUP
#line 1218 "iec_flex.ll"
{ if (isempty_bodystate_buffer())	{unput_text(0); BEGIN(st_state); return start_ST_body_token;}
				  else				 	{append_bodystate_buffer(yytext);}
				}
	YY_BREAK
/* end of body_state lexical parser */
/* (il_state | st_state) -> pop to $previous_state (vardecl_list_state or sfc_state) */

case 65:
YY_RULE_SETUP
#line 1227 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1228 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1229 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1230 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1231 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK

/* sfc_state -> pop to $previous_state (vardecl_list_state or sfc_state) */

case 70:
YY_RULE_SETUP
#line 1236 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1237 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1238 "iec_flex.ll"
yy_pop_state(); unput_text(0);
	YY_BREAK

/* config -> INITIAL */
case 73:
YY_RULE_SETUP
#line 1242 "iec_flex.ll"
BEGIN(INITIAL); return END_CONFIGURATION;
	YY_BREAK
/***************************************/
/* Next is to to remove all whitespace */
/***************************************/
/* NOTE: pragmas are handled right at the beginning... */
/* The whitespace */
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1252 "iec_flex.ll"
/* Eat any whitespace */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1253 "iec_flex.ll"
/* Eat any whitespace */
	YY_BREAK
/* NOTE: Due to the need of having the following rule have higher priority,
  *        the following rule was moved to an earlier position in this file.
<body_state>{st_whitespace}		{...}
 */
/* The comments */
case 76:
YY_RULE_SETUP
#line 1260 "iec_flex.ll"
yy_push_state(comment_state);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1261 "iec_flex.ll"
yy_push_state(comment_state);
	YY_BREAK

case 78:
YY_RULE_SETUP
#line 1263 "iec_flex.ll"
{if (get_opt_nested_comments()) yy_push_state(comment_state);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1264 "iec_flex.ll"
yy_pop_state();
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1265 "iec_flex.ll"
/* Ignore text inside comment! */
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1266 "iec_flex.ll"
/* Ignore text inside comment! */
	YY_BREAK

/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
/* NOTE: 'R1', 'IN', etc... are IL operators, and therefore tokens
	 *       On the other hand, the spec does not define them as keywords,
	 *       which means they may be re-used for variable names, etc...!
	 *       The syntax parser already caters for the possibility of these
	 *       tokens being used for variable names in their declarations.
	 *       When they are declared, they will be added to the variable symbol table!
	 *       Further appearances of these tokens must no longer be parsed
	 *       as R1_tokens etc..., but rather as variable_name_tokens!
	 *
	 *       That is why the first thing we do with identifiers, even before
	 *       checking whether they may be a 'keyword', is to check whether
	 *       they have been previously declared as a variable name,
	 *
	 *       However, we have a dilema! Should we here also check for
	 *       prev_declared_derived_function_name_token?
	 *       If we do, then the 'MOD' default library function (defined in
	 *       the standard) will always be returned as a function name, and
	 *       it will therefore not be possible to use it as an operator as 
	 *       in the following ST expression 'X := Y MOD Z;' !
	 *       If we don't, then even it will not be possible to use 'MOD'
	 *       as a funtion as in 'X := MOD(Y, Z);'
	 *       We solve this by NOT testing for function names here, and
	 *       handling this function and keyword clash in bison!
	 */
/* NOTE: The following code has been commented out as most users do not want matiec
	 *       to allow the use of 'R1', 'IN' ... IL operators as identifiers, 
	 *       even though a literal reading of the standard allows this.
	 *       We could add this as a commadnd line option, but it is not yet done.
	 *       For now we just comment out the code, but leave it the commented code
	 *       in so we can re-activate quickly (without having to go through old commits
	 *       in the mercurial repository to figure out the missing code!
	 */
/*
{identifier} 	{int token = get_identifier_token(yytext);
		 // fprintf(stderr, "flex: analysing identifier '%s'...", yytext); 
		 if ((token == prev_declared_variable_name_token) ||
//		     (token == prev_declared_derived_function_name_token) || // DO NOT add this condition!
		     (token == prev_declared_fb_name_token)) {
		 // if (token != identifier_token)
		 // * NOTE: if we replace the above uncommented conditions with
                  *       the simple test of (token != identifier_token), then 
                  *       'MOD' et al must be removed from the 
                  *       library_symbol_table as a default function name!
		  * //
		   yylval.ID=strdup(yytext);
		   // fprintf(stderr, "returning token %d\n", token); 
		   return token;
		 }
		 // otherwise, leave it for the other lexical parser rules... 
		 // fprintf(stderr, "rejecting\n"); 
		 REJECT;
		}
 */
/******************************************************/
/******************************************************/
/******************************************************/
/*****                                            *****/
/*****                                            *****/
/*****   N O W    D O   T H E   K E Y W O R D S   *****/
/*****                                            *****/
/*****                                            *****/
/******************************************************/
/******************************************************/
/******************************************************/
case 82:
YY_RULE_SETUP
#line 1339 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return REF;        else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1340 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return DREF;       else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1341 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return REF_TO;     else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1342 "iec_flex.ll"
{if (get_opt_ref_standard_extensions()) return NULL_token; else{REJECT;}}		/* Keyword in IEC 61131-3 v3 */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1344 "iec_flex.ll"
return EN;			/* Keyword */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1345 "iec_flex.ll"
return ENO;			/* Keyword */
	YY_BREAK
/******************************/
/* B 1.2.1 - Numeric Literals */
/******************************/
case 88:
YY_RULE_SETUP
#line 1351 "iec_flex.ll"
return TRUE;		/* Keyword */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1352 "iec_flex.ll"
return boolean_true_literal_token;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1353 "iec_flex.ll"
return boolean_true_literal_token;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1354 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_true_literal_token;} else{REJECT;}} /* Keyword (Data Type) */ 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1355 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_true_literal_token;} else{REJECT;}} /* Keyword (Data Type) */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1357 "iec_flex.ll"
return FALSE;		/* Keyword */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1358 "iec_flex.ll"
return boolean_false_literal_token;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1359 "iec_flex.ll"
return boolean_false_literal_token;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1360 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_false_literal_token;} else{REJECT;}} /* Keyword (Data Type) */ 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1361 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return safeboolean_false_literal_token;} else{REJECT;}} /* Keyword (Data Type) */
	YY_BREAK
/************************/
/* B 1.2.3.1 - Duration */
/************************/
case 98:
YY_RULE_SETUP
#line 1367 "iec_flex.ll"
return T_SHARP;		/* Delimiter */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1368 "iec_flex.ll"
return T_SHARP;		/* Delimiter */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1369 "iec_flex.ll"
return TIME;		/* Keyword (Data Type) */
	YY_BREAK
/************************************/
/* B 1.2.3.2 - Time of day and Date */
/************************************/
case 101:
YY_RULE_SETUP
#line 1375 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1376 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1377 "iec_flex.ll"
return DATE;		/* Keyword (Data Type) */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1378 "iec_flex.ll"
return D_SHARP;		/* Delimiter */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1379 "iec_flex.ll"
return D_SHARP;		/* Delimiter */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1380 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1381 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
/***********************************/
/* B 1.3.1 - Elementary Data Types */
/***********************************/
case 108:
YY_RULE_SETUP
#line 1387 "iec_flex.ll"
return BOOL;		/* Keyword (Data Type) */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1389 "iec_flex.ll"
return BYTE;		/* Keyword (Data Type) */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1390 "iec_flex.ll"
return WORD;		/* Keyword (Data Type) */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1391 "iec_flex.ll"
return DWORD;		/* Keyword (Data Type) */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1392 "iec_flex.ll"
return LWORD;		/* Keyword (Data Type) */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1394 "iec_flex.ll"
return SINT;		/* Keyword (Data Type) */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1395 "iec_flex.ll"
return INT;		/* Keyword (Data Type) */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1396 "iec_flex.ll"
return DINT;		/* Keyword (Data Type) */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1397 "iec_flex.ll"
return LINT;		/* Keyword (Data Type) */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1399 "iec_flex.ll"
return USINT;		/* Keyword (Data Type) */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1400 "iec_flex.ll"
return UINT;		/* Keyword (Data Type) */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1401 "iec_flex.ll"
return UDINT;		/* Keyword (Data Type) */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1402 "iec_flex.ll"
return ULINT;		/* Keyword (Data Type) */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1404 "iec_flex.ll"
return REAL;		/* Keyword (Data Type) */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1405 "iec_flex.ll"
return LREAL;		/* Keyword (Data Type) */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1407 "iec_flex.ll"
return WSTRING;		/* Keyword (Data Type) */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1408 "iec_flex.ll"
return STRING;		/* Keyword (Data Type) */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1410 "iec_flex.ll"
return TIME;		/* Keyword (Data Type) */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1411 "iec_flex.ll"
return DATE;		/* Keyword (Data Type) */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1412 "iec_flex.ll"
return DT;		/* Keyword (Data Type) */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1413 "iec_flex.ll"
return TOD;		/* Keyword (Data Type) */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1414 "iec_flex.ll"
return DATE_AND_TIME;	/* Keyword (Data Type) */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1415 "iec_flex.ll"
return TIME_OF_DAY;	/* Keyword (Data Type) */
	YY_BREAK
/* A non-standard extension! */
case 131:
YY_RULE_SETUP
#line 1418 "iec_flex.ll"
{if (runtime_options.allow_void_datatype) {return VOID;}          else {REJECT;}} 
	YY_BREAK
/*****************************************************************/
/* Keywords defined in "Safety Software Technical Specification" */
/*****************************************************************/
/* 
         * NOTE: The following keywords are define in 
         *       "Safety Software Technical Specification,
         *        Part 1: Concepts and Function Blocks,  
         *        Version 1.0 – Official Release"
         *        written by PLCopen - Technical Committee 5
         *
         *        We only support these extensions and keywords
         *        if the apropriate command line option is given.
         */
case 132:
YY_RULE_SETUP
#line 1434 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEBOOL;}          else {REJECT;}} 
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1436 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEBYTE;}          else {REJECT;}} 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1437 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEWORD;}          else {REJECT;}} 
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1438 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDWORD;}         else{REJECT;}}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1439 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELWORD;}         else{REJECT;}}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1441 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFESINT;}          else{REJECT;}}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1442 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELREAL;}         else{REJECT;}}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1444 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFESINT;}          else{REJECT;}}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1445 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEINT;}           else{REJECT;}}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1446 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDINT;}          else{REJECT;}}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1447 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFELINT;}          else{REJECT;}}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1449 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUSINT;}         else{REJECT;}}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1450 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUINT;}          else{REJECT;}}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1451 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEUDINT;}         else{REJECT;}}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1452 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEULINT;}         else{REJECT;}}
	YY_BREAK
/* SAFESTRING and SAFEWSTRING are not yet supported, i.e. checked correctly, in the semantic analyser (stage 3) */
/*  so it is best not to support them at all... */
/*
SAFEWSTRING          {if (get_opt_safe_extensions()) {return SAFEWSTRING;}       else{REJECT;}}
SAFESTRING           {if (get_opt_safe_extensions()) {return SAFESTRING;}        else{REJECT;}}
 */
case 147:
YY_RULE_SETUP
#line 1461 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETIME;}          else{REJECT;}}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1462 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDATE;}          else{REJECT;}}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1463 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDT;}            else{REJECT;}}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1464 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETOD;}           else{REJECT;}}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1465 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFEDATE_AND_TIME;} else{REJECT;}}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1466 "iec_flex.ll"
{if (get_opt_safe_extensions()) {return SAFETIME_OF_DAY;}   else{REJECT;}}
	YY_BREAK
/********************************/
/* B 1.3.2 - Generic data types */
/********************************/
/* Strangely, the following symbols do not seem to be required! */
/* But we include them so they become reserved words, and do not
	 * get passed up to bison as an identifier...
	 */
case 153:
YY_RULE_SETUP
#line 1475 "iec_flex.ll"
return ANY;		/* Keyword (Data Type) */
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1476 "iec_flex.ll"
return ANY_DERIVED;	/* Keyword (Data Type) */
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1477 "iec_flex.ll"
return ANY_ELEMENTARY;	/* Keyword (Data Type) */
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1478 "iec_flex.ll"
return ANY_MAGNITUDE;	/* Keyword (Data Type) */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1479 "iec_flex.ll"
return ANY_NUM;		/* Keyword (Data Type) */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1480 "iec_flex.ll"
return ANY_REAL;	/* Keyword (Data Type) */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1481 "iec_flex.ll"
return ANY_INT;		/* Keyword (Data Type) */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1482 "iec_flex.ll"
return ANY_BIT;		/* Keyword (Data Type) */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1483 "iec_flex.ll"
return ANY_STRING;	/* Keyword (Data Type) */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1484 "iec_flex.ll"
return ANY_DATE;	/* Keyword (Data Type) */
	YY_BREAK
/********************************/
/* B 1.3.3 - Derived data types */
/********************************/
case 163:
YY_RULE_SETUP
#line 1490 "iec_flex.ll"
return ASSIGN;		/* Delimiter */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1491 "iec_flex.ll"
return DOTDOT;		/* Delimiter */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1492 "iec_flex.ll"
return TYPE;		/* Keyword */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1493 "iec_flex.ll"
return END_TYPE;	/* Keyword */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1494 "iec_flex.ll"
return ARRAY;		/* Keyword */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1495 "iec_flex.ll"
return OF;		/* Keyword */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1496 "iec_flex.ll"
return STRUCT;		/* Keyword */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1497 "iec_flex.ll"
return END_STRUCT;	/* Keyword */
	YY_BREAK
/*********************/
/* B 1.4 - Variables */
/*********************/
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
case 171:
YY_RULE_SETUP
#line 1507 "iec_flex.ll"
return VAR_INPUT;	/* Keyword */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1508 "iec_flex.ll"
return VAR_OUTPUT;	/* Keyword */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1509 "iec_flex.ll"
return VAR_IN_OUT;	/* Keyword */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1510 "iec_flex.ll"
return VAR_EXTERNAL;	/* Keyword */
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1511 "iec_flex.ll"
return VAR_GLOBAL;	/* Keyword */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1512 "iec_flex.ll"
return END_VAR;		/* Keyword */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1513 "iec_flex.ll"
return RETAIN;		/* Keyword */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1514 "iec_flex.ll"
return NON_RETAIN;	/* Keyword */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1515 "iec_flex.ll"
return R_EDGE;		/* Keyword */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1516 "iec_flex.ll"
return F_EDGE;		/* Keyword */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1517 "iec_flex.ll"
return AT;		/* Keyword */
	YY_BREAK
/***********************/
/* B 1.5.1 - Functions */
/***********************/
/* Note: The following END_FUNCTION rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 182:
YY_RULE_SETUP
#line 1530 "iec_flex.ll"
return FUNCTION;			/* Keyword */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1531 "iec_flex.ll"
BEGIN(INITIAL);	return END_FUNCTION;			/* Keyword */  /* see Note above */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1532 "iec_flex.ll"
return VAR;				/* Keyword */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1533 "iec_flex.ll"
return CONSTANT;			/* Keyword */
	YY_BREAK
/*****************************/
/* B 1.5.2 - Function Blocks */
/*****************************/
/* Note: The following END_FUNCTION_BLOCK rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 186:
YY_RULE_SETUP
#line 1546 "iec_flex.ll"
return FUNCTION_BLOCK;		/* Keyword */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1547 "iec_flex.ll"
BEGIN(INITIAL);	return END_FUNCTION_BLOCK;	/* Keyword */  /* see Note above */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1548 "iec_flex.ll"
return VAR_TEMP;		/* Keyword */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1549 "iec_flex.ll"
return VAR;			/* Keyword */
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1550 "iec_flex.ll"
return NON_RETAIN;		/* Keyword */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1551 "iec_flex.ll"
return END_VAR;			/* Keyword */
	YY_BREAK
/**********************/
/* B 1.5.3 - Programs */
/**********************/
/* Note: The following END_PROGRAM rule includes a BEGIN(INITIAL); command.
	 *       This is necessary in case the input program being parsed has syntax errors that force
	 *       flex's main state machine to never change to the il_state or the st_state
	 *       after changing to the body_state.
	 *       Ths BEGIN(INITIAL) command forces the flex state machine to re-synchronise with 
	 *       the input stream even in the presence of buggy code!
	 */
case 192:
YY_RULE_SETUP
#line 1564 "iec_flex.ll"
return PROGRAM;				/* Keyword */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1565 "iec_flex.ll"
BEGIN(INITIAL);	return END_PROGRAM;			/* Keyword */  /* see Note above */
	YY_BREAK
/********************************************/
/* B 1.6 Sequential Function Chart elements */
/********************************************/
/* NOTE: the following identifiers/tokens clash with the R and S IL operators, as well
	.* as other identifiers that may be used as variable names inside IL and ST programs.
	 * They will have to be handled when we include parsing of SFC... For now, simply
	 * ignore them!
	 */
case 194:
YY_RULE_SETUP
#line 1577 "iec_flex.ll"
return ACTION;			/* Keyword */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1578 "iec_flex.ll"
return END_ACTION;		/* Keyword */
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1580 "iec_flex.ll"
return TRANSITION;		/* Keyword */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1581 "iec_flex.ll"
return END_TRANSITION;		/* Keyword */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1582 "iec_flex.ll"
return FROM;			/* Keyword */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1583 "iec_flex.ll"
return TO;			/* Keyword */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1585 "iec_flex.ll"
return INITIAL_STEP;		/* Keyword */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1586 "iec_flex.ll"
return STEP;			/* Keyword */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1587 "iec_flex.ll"
return END_STEP;		/* Keyword */
	YY_BREAK
/* PRIORITY is not a keyword, so we only return it when 
	 * it is explicitly required and we are not expecting any identifiers
	 * that could also use the same letter sequence (i.e. an identifier: piority)
	 */
case 203:
YY_RULE_SETUP
#line 1593 "iec_flex.ll"
return PRIORITY;
	YY_BREAK

case 204:
YY_RULE_SETUP
#line 1596 "iec_flex.ll"
return L;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1597 "iec_flex.ll"
return D;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1598 "iec_flex.ll"
return SD;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1599 "iec_flex.ll"
return DS;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1600 "iec_flex.ll"
return SL;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1601 "iec_flex.ll"
return N;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1602 "iec_flex.ll"
return P;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1603 "iec_flex.ll"
return P0;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1604 "iec_flex.ll"
return P1;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1605 "iec_flex.ll"
return R;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1606 "iec_flex.ll"
return S;
	YY_BREAK

/********************************/
/* B 1.7 Configuration elements */
/********************************/
/* Note: The following END_CONFIGURATION rule will never get to be used, as we have
	 *       another identical rule above (closer to the rules handling the transitions
	 *       of the main state machine) that will always execute before this one.
	 * Note: The following END_CONFIGURATION rule includes a BEGIN(INITIAL); command.
	 *       This is nt strictly necessary, but I place it here so it follwos the same
	 *       pattern used in END_FUNCTION, END_PROGRAM, and END_FUNCTION_BLOCK
	 */
case 215:
YY_RULE_SETUP
#line 1620 "iec_flex.ll"
return CONFIGURATION;		/* Keyword */
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1621 "iec_flex.ll"
BEGIN(INITIAL); return END_CONFIGURATION;	/* Keyword */   /* see 2 Notes above! */
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1622 "iec_flex.ll"
return TASK;			/* Keyword */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1623 "iec_flex.ll"
return RESOURCE;		/* Keyword */
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1624 "iec_flex.ll"
return ON;			/* Keyword */
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1625 "iec_flex.ll"
return END_RESOURCE;		/* Keyword */
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1626 "iec_flex.ll"
return VAR_CONFIG;		/* Keyword */
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1627 "iec_flex.ll"
return VAR_ACCESS;		/* Keyword */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1628 "iec_flex.ll"
return END_VAR;			/* Keyword */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1629 "iec_flex.ll"
return WITH;			/* Keyword */
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1630 "iec_flex.ll"
return PROGRAM;			/* Keyword */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1631 "iec_flex.ll"
return RETAIN;			/* Keyword */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1632 "iec_flex.ll"
return NON_RETAIN;		/* Keyword */
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1633 "iec_flex.ll"
return READ_WRITE;		/* Keyword */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1634 "iec_flex.ll"
return READ_ONLY;		/* Keyword */
	YY_BREAK
/* PRIORITY, SINGLE and INTERVAL are not a keywords, so we only return them when 
	 * it is explicitly required and we are not expecting any identifiers
	 * that could also use the same letter sequence (i.e. an identifier: piority, ...)
	 */

case 230:
YY_RULE_SETUP
#line 1641 "iec_flex.ll"
return PRIORITY;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1642 "iec_flex.ll"
return SINGLE;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1643 "iec_flex.ll"
return INTERVAL;
	YY_BREAK

/***********************************/
/* B 2.1 Instructions and Operands */
/***********************************/
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1649 "iec_flex.ll"
return EOL;
	YY_BREAK
/*******************/
/* B 2.2 Operators */
/*******************/
/* NOTE: we can't have flex return the same token for
	 *       ANDN and &N, neither for AND and &, since
	 *       AND and ANDN are considered valid variable
	 *       function or functionblock type names!
	 *       This means that the parser may decide that the
	 *       AND or ANDN strings found in the source code
	 *       are being used as variable names
	 *       and not as operators, and will therefore transform
	 *       these tokens into indentifier tokens!
	 *       We can't have the parser thinking that the source
	 *       code contained the string AND (which may be interpreted
	 *       as a vairable name) when in reality the source code
	 *       merely contained the character &, so we use two
	 *       different tokens for & and AND (and similarly
	 *       ANDN and &N)!
	 */
/* The following tokens clash with ST expression operators and Standard Functions */
/* They are also keywords! */
case 234:
YY_RULE_SETUP
#line 1673 "iec_flex.ll"
return AND;		/* Keyword */
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 1674 "iec_flex.ll"
return MOD;		/* Keyword */
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1675 "iec_flex.ll"
return OR;		/* Keyword */
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 1676 "iec_flex.ll"
return XOR;		/* Keyword */
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 1677 "iec_flex.ll"
return NOT;		/* Keyword */
	YY_BREAK
/* The following tokens clash with Standard Functions */
/* They are keywords because they are a function name */

case 239:
YY_RULE_SETUP
#line 1682 "iec_flex.ll"
return ADD;		/* Keyword (Standard Function) */
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 1683 "iec_flex.ll"
return DIV;		/* Keyword (Standard Function) */
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1684 "iec_flex.ll"
return EQ;		/* Keyword (Standard Function) */
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 1685 "iec_flex.ll"
return GE;		/* Keyword (Standard Function) */
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 1686 "iec_flex.ll"
return GT;		/* Keyword (Standard Function) */
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1687 "iec_flex.ll"
return LE;		/* Keyword (Standard Function) */
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1688 "iec_flex.ll"
return LT;		/* Keyword (Standard Function) */
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1689 "iec_flex.ll"
return MUL;		/* Keyword (Standard Function) */
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1690 "iec_flex.ll"
return NE;		/* Keyword (Standard Function) */
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1691 "iec_flex.ll"
return SUB;		/* Keyword (Standard Function) */
	YY_BREAK

/* The following tokens clash with SFC action qualifiers */
/* They are not keywords! */

case 249:
YY_RULE_SETUP
#line 1697 "iec_flex.ll"
return S;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1698 "iec_flex.ll"
return R;
	YY_BREAK

/* The following tokens clash with ST expression operators */
case 251:
YY_RULE_SETUP
#line 1702 "iec_flex.ll"
return AND2;		/* NOT a Delimiter! */
	YY_BREAK
/* The following tokens have no clashes */
/* They are not keywords! */

case 252:
YY_RULE_SETUP
#line 1707 "iec_flex.ll"
return LD;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1708 "iec_flex.ll"
return LDN;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1709 "iec_flex.ll"
return ST;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1710 "iec_flex.ll"
return STN;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1711 "iec_flex.ll"
return S1;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1712 "iec_flex.ll"
return R1;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1713 "iec_flex.ll"
return CLK;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1714 "iec_flex.ll"
return CU;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1715 "iec_flex.ll"
return CD;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1716 "iec_flex.ll"
return PV;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1717 "iec_flex.ll"
return IN;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1718 "iec_flex.ll"
return PT;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1719 "iec_flex.ll"
return ANDN;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1720 "iec_flex.ll"
return ANDN2;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 1721 "iec_flex.ll"
return ORN;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1722 "iec_flex.ll"
return XORN;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1723 "iec_flex.ll"
return CAL;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1724 "iec_flex.ll"
return CALC;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 1725 "iec_flex.ll"
return CALCN;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1726 "iec_flex.ll"
return RET;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1727 "iec_flex.ll"
return RETC;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1728 "iec_flex.ll"
return RETCN;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1729 "iec_flex.ll"
return JMP;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1730 "iec_flex.ll"
return JMPC;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1731 "iec_flex.ll"
return JMPCN;
	YY_BREAK

/***********************/
/* B 3.1 - Expressions */
/***********************/
case 277:
YY_RULE_SETUP
#line 1737 "iec_flex.ll"
return OPER_EXP;	/* NOT a Delimiter! */
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1738 "iec_flex.ll"
return OPER_NE;		/* NOT a Delimiter! */
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1739 "iec_flex.ll"
return OPER_GE;		/* NOT a Delimiter! */
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1740 "iec_flex.ll"
return OPER_LE;		/* NOT a Delimiter! */
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1741 "iec_flex.ll"
return AND2;		/* NOT a Delimiter! */
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1742 "iec_flex.ll"
return AND;		/* Keyword */
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1743 "iec_flex.ll"
return XOR;		/* Keyword */
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1744 "iec_flex.ll"
return OR;		/* Keyword */
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1745 "iec_flex.ll"
return NOT;		/* Keyword */
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1746 "iec_flex.ll"
return MOD;		/* Keyword */
	YY_BREAK
/*****************************************/
/* B 3.2.2 Subprogram Control Statements */
/*****************************************/
case 287:
YY_RULE_SETUP
#line 1752 "iec_flex.ll"
return ASSIGN;		/* Delimiter */
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1753 "iec_flex.ll"
return SENDTO;		/* Delimiter */
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1754 "iec_flex.ll"
return RETURN;		/* Keyword */
	YY_BREAK
/********************************/
/* B 3.2.3 Selection Statements */
/********************************/
case 290:
YY_RULE_SETUP
#line 1760 "iec_flex.ll"
return IF;		/* Keyword */
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1761 "iec_flex.ll"
return THEN;		/* Keyword */
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1762 "iec_flex.ll"
return ELSIF;		/* Keyword */
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1763 "iec_flex.ll"
return ELSE;		/* Keyword */
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1764 "iec_flex.ll"
return END_IF;		/* Keyword */
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1766 "iec_flex.ll"
return CASE;		/* Keyword */
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1767 "iec_flex.ll"
return OF;		/* Keyword */
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1768 "iec_flex.ll"
return ELSE;		/* Keyword */
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1769 "iec_flex.ll"
return END_CASE;	/* Keyword */
	YY_BREAK
/********************************/
/* B 3.2.4 Iteration Statements */
/********************************/
case 299:
YY_RULE_SETUP
#line 1775 "iec_flex.ll"
return FOR;		/* Keyword */
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1776 "iec_flex.ll"
return TO;		/* Keyword */
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1777 "iec_flex.ll"
return BY;		/* Keyword */
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1778 "iec_flex.ll"
return DO;		/* Keyword */
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1779 "iec_flex.ll"
return END_FOR;		/* Keyword */
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1781 "iec_flex.ll"
return WHILE;		/* Keyword */
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1782 "iec_flex.ll"
return DO;		/* Keyword */
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1783 "iec_flex.ll"
return END_WHILE;	/* Keyword */
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1785 "iec_flex.ll"
return REPEAT;		/* Keyword */
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1786 "iec_flex.ll"
return UNTIL;		/* Keyword */
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1787 "iec_flex.ll"
return END_REPEAT;	/* Keyword */
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1789 "iec_flex.ll"
return EXIT;		/* Keyword */
	YY_BREAK
/********************************************************/
/********************************************************/
/********************************************************/
/*****                                              *****/
/*****                                              *****/
/*****  N O W    W O R K    W I T H    V A L U E S  *****/
/*****                                              *****/
/*****                                              *****/
/********************************************************/
/********************************************************/
/********************************************************/
/********************************************/
/* B.1.4.1   Directly Represented Variables */
/********************************************/
case 311:
YY_RULE_SETUP
#line 1812 "iec_flex.ll"
{yylval.ID=strdup(yytext); return get_direct_variable_token(yytext);}
	YY_BREAK
/******************************************/
/* B 1.4.3 - Declaration & Initialisation */
/******************************************/
case 312:
YY_RULE_SETUP
#line 1818 "iec_flex.ll"
{yylval.ID=strdup(yytext); return incompl_location_token;}
	YY_BREAK
/************************/
/* B 1.2.3.1 - Duration */
/************************/
case 313:
YY_RULE_SETUP
#line 1824 "iec_flex.ll"
{yylval.ID=strdup(yytext); return fixed_point_token;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1825 "iec_flex.ll"
{/*fprintf(stderr, "entering time_literal_state ##%s##\n", yytext);*/ unput_and_mark('#'); yy_push_state(time_literal_state);}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1826 "iec_flex.ll"
{return erroneous_interval_token;}
	YY_BREAK

case 316:
YY_RULE_SETUP
#line 1829 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_d_token;}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1830 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_h_token;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1831 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_m_token;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1832 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return integer_s_token;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1833 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-2] = '\0'; return integer_ms_token;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 1834 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_d_token;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1835 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_h_token;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1836 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_m_token;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 1837 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-1] = '\0'; return fixed_point_s_token;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 1838 "iec_flex.ll"
{yylval.ID=strdup(yytext); yylval.ID[yyleng-2] = '\0'; return fixed_point_ms_token;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 1840 "iec_flex.ll"
/* do nothing - eat it up!*/
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1841 "iec_flex.ll"
{/*fprintf(stderr, "popping from time_literal_state (###)\n");*/ yy_pop_state(); return end_interval_token;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 1842 "iec_flex.ll"
{/*fprintf(stderr, "time_literal_state: found invalid character '%s'. Aborting!\n", yytext);*/ ERROR;}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 1843 "iec_flex.ll"
{ERROR;}
	YY_BREAK

/*******************************/
/* B.1.2.2   Character Strings */
/*******************************/
case 330:
YY_RULE_SETUP
#line 1848 "iec_flex.ll"
{yylval.ID=strdup(yytext); return double_byte_character_string_token;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 1849 "iec_flex.ll"
{yylval.ID=strdup(yytext); return single_byte_character_string_token;}
	YY_BREAK
/******************************/
/* B.1.2.1   Numeric literals */
/******************************/
case 332:
YY_RULE_SETUP
#line 1855 "iec_flex.ll"
{yylval.ID=strdup(yytext); return integer_token;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 1856 "iec_flex.ll"
{yylval.ID=strdup(yytext); return real_token;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1857 "iec_flex.ll"
{yylval.ID=strdup(yytext); return binary_integer_token;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1858 "iec_flex.ll"
{yylval.ID=strdup(yytext); return octal_integer_token;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 1859 "iec_flex.ll"
{yylval.ID=strdup(yytext); return hex_integer_token;}
	YY_BREAK
/*****************************************/
/* B.1.1 Letters, digits and identifiers */
/*****************************************/
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1865 "iec_flex.ll"
{yylval.ID=strdup(yytext); return sendto_identifier_token;}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 1866 "iec_flex.ll"
{yylval.ID=strdup(yytext); return sendto_identifier_token;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1867 "iec_flex.ll"
{yylval.ID=strdup(yytext);
					 // printf("returning identifier...: %s, %d\n", yytext, get_identifier_token(yytext));
					 return get_identifier_token(yytext);}
	YY_BREAK
/************************************************/
/************************************************/
/************************************************/
/*****                                      *****/
/*****                                      *****/
/*****   T H E    L E F T O V E R S . . .   *****/
/*****                                      *****/
/*****                                      *****/
/************************************************/
/************************************************/
/************************************************/
/* do the single character tokens...
	 *
	 *  e.g.:  ':'  '('  ')'  '+'  '*'  ...
	 */
case 340:
YY_RULE_SETUP
#line 1892 "iec_flex.ll"
{return yytext[0];}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 1895 "iec_flex.ll"
ECHO;
	YY_BREAK
#line 10118 "iec_flex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2848 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2848 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2847);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1895 "iec_flex.ll"




/*************************/
/* Tracking Functions... */
/*************************/

#define MAX_LINE_LENGTH 1024

tracking_t *GetNewTracking(FILE* in_file) {
  tracking_t* new_env = new tracking_t;
  new_env->eof = 0;
  new_env->lineNumber = 0;
  new_env->currentChar = 0;
  new_env->lineLength = 0;
  new_env->currentTokenStart = 0;
  new_env->buffer = (char*)malloc(MAX_LINE_LENGTH);
  new_env->in_file = in_file;
  return new_env;
}


void FreeTracking(tracking_t *tracking) {
  free(tracking->buffer);
  delete tracking;
}


/* GetNextChar: reads a character from input */
int GetNextChar(char *b, int maxBuffer) {
  char *p;
  
  if (  current_tracking->eof  )
    return 0;
  
  while (  current_tracking->currentChar >= current_tracking->lineLength  ) {
    current_tracking->currentChar = 0;
    current_tracking->currentTokenStart = 1;
    current_tracking->eof = false;
    
    p = fgets(current_tracking->buffer, MAX_LINE_LENGTH, current_tracking->in_file);
    if (  p == NULL  ) {
      if (  ferror(current_tracking->in_file)  )
        return 0;
      current_tracking->eof = true;
      return 0;
    }
    
    current_tracking->lineLength = strlen(current_tracking->buffer);
    
    /* only increment line number if the buffer was big enough to read the whole line! */
    char last_char = current_tracking->buffer[current_tracking->lineLength - 1];
    if (('\n' == last_char) || ('\r' == last_char))  // '\r' ---> CR, '\n'  ---> LF
      current_tracking->lineNumber++;
  }
  
  b[0] = current_tracking->buffer[current_tracking->currentChar];
  if (b[0] == ' ' || b[0] == '\t')
    current_tracking->currentTokenStart++;
  current_tracking->currentChar++;

  return b[0]==0?0:1;
}




/***********************************/
/* Utility function definitions... */
/***********************************/

/* print the include file stack to stderr... */
void print_include_stack(void) {
  int i;

  if ((include_stack_ptr - 1) >= 0)
    fprintf (stderr, "in file "); 
  for (i = include_stack_ptr - 1; i >= 0; i--)
    fprintf (stderr, "included from file %s:%d\n", include_stack[i].filename, include_stack[i].env->lineNumber);
}



/* set the internal state variables of lexical analyser to process a new include file */
void handle_include_file_(FILE *filehandle, const char *filename) {
  if (include_stack_ptr >= MAX_INCLUDE_DEPTH) {
    fprintf(stderr, "Includes nested too deeply\n");
    exit( 1 );
  }
  
  yyin = filehandle;
  
  include_stack[include_stack_ptr].buffer_state = YY_CURRENT_BUFFER;
  include_stack[include_stack_ptr].env = current_tracking;
  include_stack[include_stack_ptr].filename = current_filename;
  
  current_filename = strdup(filename);
  current_tracking = GetNewTracking(yyin);
  include_stack_ptr++;

  /* switch input buffer to new file... */
  yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));
}



/* insert the code (in <source_code>) into the source code we are parsing.
 * This is done by creating an artificial file with that new source code, and then 'including' the file
 */
void include_string_(const char *source_code) {
  FILE *tmp_file = tmpfile();
  
  if(tmp_file == NULL) {
    perror("Error creating temp file.");
    exit(EXIT_FAILURE);
  }

  fwrite((void *)source_code, 1, strlen(source_code), tmp_file);
  rewind(tmp_file);

  /* now parse the tmp file, by asking flex to handle it as if it had been included with the (*#include ... *) pragma... */
  handle_include_file_(tmp_file, "");
//fclose(tmp_file);  /* do NOT close file. It must only be closed when we finish reading from it! */
}



/* Open an include file, and set the internal state variables of lexical analyser to process a new include file */
void include_file(const char *filename) {
  FILE *filehandle = NULL;
  
  for (int i = 0; (INCLUDE_DIRECTORIES[i] != NULL) && (filehandle == NULL); i++) {
    char *full_name;
    full_name = strdup3(INCLUDE_DIRECTORIES[i], "/", filename);
    if (full_name == NULL) {
      fprintf(stderr, "Out of memory!\n");
      exit( 1 );
    }
    filehandle = fopen(full_name, "r");
    free(full_name);
  }

  if (NULL == filehandle) {
    fprintf(stderr, "Error opening included file %s\n", filename);
    exit( 1 );
  }

  /* now process the new file... */
  handle_include_file_(filehandle, filename);
}





/* return all the text in the current token back to the input stream, except the first n chars. */
void unput_text(unsigned int n) {
  /* it seems that flex has a bug in that it will not correctly count the line numbers
   * if we return newlines back to the input stream. These newlines will be re-counted
   * a second time when they are processed again by flex.
   * We therefore determine how many newlines are in the text we are returning,
   * and decrement the line counter acordingly...
   */
  /*
  unsigned int i;
  
  for (i = n; i < strlen(yytext); i++)
    if (yytext[i] == '\n')
      current_tracking->lineNumber--;
  */
  /* now return all the text back to the input stream... */
  yyless(n);
}


/* return all the text in the current token back to the input stream, 
 * but first return to the stream an additional character to mark the end of the token. 
 */
void unput_and_mark(const char c) {
  char *yycopy = strdup( yytext ); /* unput() destroys yytext, so we copy it first */
  unput(c);
  for (int i = yyleng-1; i >= 0; i--)
    unput(yycopy[i]);

  free(yycopy);
}



/* The body_state tries to find a ';' before a END_PROGRAM, END_FUNCTION or END_FUNCTION_BLOCK or END_ACTION
 * To do so, it must ignore comments and pragmas. This means that we cannot do this in a signle lex rule.
 * However, we must store any text we consume in every rule, so we can push it back into the buffer
 * once we have decided if we are parsing ST or IL code. The following functions manage that buffer used by
 * the body_state.
 */
/* The buffer used by the body_state state */
char *bodystate_buffer = NULL;

/* append text to bodystate_buffer */
void  append_bodystate_buffer(const char *text) {
  //printf("<<<append_bodystate_buffer>>> %d <%s><%s>\n", bodystate_buffer, text, (NULL != bodystate_buffer)?bodystate_buffer:"NULL");
  long int old_len = 0;
  if (NULL != bodystate_buffer) old_len = strlen(bodystate_buffer);
  bodystate_buffer = (char *)realloc(bodystate_buffer, old_len + strlen(text) + 1);
  if (NULL == bodystate_buffer) ERROR;
  strcpy(bodystate_buffer + old_len, text);
  //printf("=<%s> %d %d\n", (NULL != bodystate_buffer)?bodystate_buffer:NULL, old_len + strlen(text) + 1, bodystate_buffer);
}

/* Return all data in bodystate_buffer back to flex, and empty bodystate_buffer. */
void   unput_bodystate_buffer(void) {
  if (NULL == bodystate_buffer) ERROR;
  //printf("<<<unput_bodystate_buffer>>>\n%s\n", bodystate_buffer);
  
  for (long int i = strlen(bodystate_buffer)-1; i >= 0; i--)
    unput(bodystate_buffer[i]);
  
  free(bodystate_buffer);
  bodystate_buffer = NULL;
}


/* Return true if bodystate_buffer is empty */
int  isempty_bodystate_buffer(void) {
  return (NULL == bodystate_buffer);
}




/* Called by flex when it reaches the end-of-file */
int yywrap(void)
{
  /* We reached the end of the input file... */

  /* Should we continue with another file? */
  /* If so:
   *   open the new file...
   *   return 0;
   */

  /* to stop processing...
   *   return 1;
   */

  return 1;  /* Stop scanning at end of input file. */
}



/*******************************/
/* Public Interface for Bison. */
/*******************************/

/* The following functions will be called from inside bison code! */

void include_string(const char *source_code) {include_string_(source_code);}


/* Tell flex which file to parse. This function will not imediately start parsing the file.
 * To parse the file, you then need to call yyparse()
 *
 * Returns NULL on error opening the file (and a valid errno), or 0 on success.
 * Caller must close the file!
 */
FILE *parse_file(const char *filename) {
  FILE *filehandle = NULL;

  if((filehandle = fopen(filename, "r")) != NULL) {
    yyin = filehandle;
    current_filename = strdup(filename);
    current_tracking = GetNewTracking(yyin);
  }
  return filehandle;
}






/*************************************/
/* Include a main() function to test */
/* the token parsing by flex....     */
/*************************************/
#ifdef TEST_MAIN

#include "../util/symtable.hh"

yystype yylval;
YYLTYPE yylloc;




int get_identifier_token(const char *identifier_str) {return 0;}
int get_direct_variable_token(const char *direct_variable_str) {return 0;}


int main(int argc, char **argv) {

  FILE *in_file;
  int res;
	
  if (argc == 1) {
    /* Work as an interactive (command line) parser... */
    while((res=yylex()))
      fprintf(stderr, "(line %d)token: %d\n", yylineno, res);
  } else {
    /* Work as non-interactive (file) parser... */
    if((in_file = fopen(argv[1], "r")) == NULL) {
      char *errmsg = strdup2("Error opening main file ", argv[1]);
      perror(errmsg);
      free(errmsg);
      return -1;
    }

    /* parse the file... */
    yyin = in_file;
    current_filename = argv[1];
    while(1) {
      res=yylex();
      fprintf(stderr, "(line %d)token: %d (%s)\n", yylineno, res, yylval.ID);
    }
  }
	
	return 0;

}
#endif

